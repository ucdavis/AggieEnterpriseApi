// <auto-generated/>
#nullable enable

namespace AggieEnterpriseApi
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParentsResult : global::System.IEquatable<DeptParentsResult>, IDeptParentsResult
    {
        public DeptParentsResult(global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment? erpFinancialDepartment)
        {
            ErpFinancialDepartment = erpFinancialDepartment;
        }

        /// <summary>
        /// Get a single ErpFinancialDepartment by code.  Returns undefined if does not exist.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment? ErpFinancialDepartment { get; }

        public virtual global::System.Boolean Equals(DeptParentsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ErpFinancialDepartment is null && other.ErpFinancialDepartment is null) || ErpFinancialDepartment != null && ErpFinancialDepartment.Equals(other.ErpFinancialDepartment)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParentsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErpFinancialDepartment != null)
                {
                    hash ^= 397 * ErpFinancialDepartment.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_ErpFinancialDepartment(global::System.String code, global::System.String name, global::System.Boolean enabled, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent? parent)
        {
            Code = code;
            Name = name;
            Enabled = enabled;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Whether this ErpFinancialDepartment is presently enabled for use.
        /// </summary>
        public global::System.Boolean Enabled { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && Enabled == other.Enabled && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Enabled.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name)
        {
            Code = code;
            Name = name;
        }

        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParentsResult
    {
        /// <summary>
        /// Get a single ErpFinancialDepartment by code.  Returns undefined if does not exist.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment? ErpFinancialDepartment { get; }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment
    {
        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Whether this ErpFinancialDepartment is presently enabled for use.
        /// </summary>
        public global::System.Boolean Enabled { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent? Parent { get; }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment
    {
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent? Parent { get; }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent
    {
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent? Parent { get; }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent_Parent
    {
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? Parent { get; }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent
    {
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? Parent { get; }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent
    {
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent
    {
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The ErpFinancialDepartment which is the immediate parent of this one.
        /// Will be undefined if the ErpFinancialDepartment has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent
    {
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpInstitutionLocationSearchResult : global::System.IEquatable<ErpInstitutionLocationSearchResult>, IErpInstitutionLocationSearchResult
    {
        public ErpInstitutionLocationSearchResult(global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch erpInstitutionLocationSearch)
        {
            ErpInstitutionLocationSearch = erpInstitutionLocationSearch;
        }

        /// <summary>
        /// Search for ErpInstitutionLocation objects by multiple properties.
        /// See the ErpInstitutionLocationFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch ErpInstitutionLocationSearch { get; }

        public virtual global::System.Boolean Equals(ErpInstitutionLocationSearchResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ErpInstitutionLocationSearch.Equals(other.ErpInstitutionLocationSearch));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ErpInstitutionLocationSearchResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ErpInstitutionLocationSearch.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Wrapper object for search results for ErpInstitutionLocation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_ErpInstitutionLocationSearchResults : global::System.IEquatable<ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_ErpInstitutionLocationSearchResults>, IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_ErpInstitutionLocationSearchResults
    {
        public ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_ErpInstitutionLocationSearchResults(global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata metadata, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data> data)
        {
            Metadata = metadata;
            Data = data;
        }

        /// <summary>
        /// Information about the search results returned.
        /// </summary>
        public global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata Metadata { get; }

        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data> Data { get; }

        public virtual global::System.Boolean Equals(ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_ErpInstitutionLocationSearchResults? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Metadata.Equals(other.Metadata)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Data, other.Data);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_ErpInstitutionLocationSearchResults)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Metadata.GetHashCode();
                foreach (var Data_elm in Data)
                {
                    hash ^= 397 * Data_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Metadata about the search results returned in a given response.
    /// Used to provide metrics of the results and the information necessary
    /// to pull in the next set of records.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata_SearchResultMetadata : global::System.IEquatable<ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata_SearchResultMetadata>, IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata_SearchResultMetadata
    {
        public ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata_SearchResultMetadata(global::System.Collections.Generic.IReadOnlyList<global::System.String>? sort, global::System.Int32? limit, global::System.Int32 returnedResultCount, global::System.Int32 startIndex, global::System.Int32? nextStartIndex, global::System.Int32? totalResultCount)
        {
            Sort = sort;
            Limit = limit;
            ReturnedResultCount = returnedResultCount;
            StartIndex = startIndex;
            NextStartIndex = nextStartIndex;
            TotalResultCount = totalResultCount;
        }

        /// <summary>
        /// Array of property names used to sort the results
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Sort { get; }

        /// <summary>
        /// requested limit to the number of records to retrieve
        /// </summary>
        public global::System.Int32? Limit { get; }

        /// <summary>
        /// Results returned in the data property.
        /// </summary>
        public global::System.Int32 ReturnedResultCount { get; }

        /// <summary>
        /// Starting index for the current result set.
        /// </summary>
        public global::System.Int32 StartIndex { get; }

        /// <summary>
        /// Start index for getting the next page of results.  Unset if there are no more results.
        /// </summary>
        public global::System.Int32? NextStartIndex { get; }

        /// <summary>
        /// Total number of results.  Will only be populated if `includeTotalResultCount` is true in the search request.
        /// </summary>
        public global::System.Int32? TotalResultCount { get; }

        public virtual global::System.Boolean Equals(ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata_SearchResultMetadata? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Sort, other.Sort)) && Limit == other.Limit && ReturnedResultCount == other.ReturnedResultCount && StartIndex == other.StartIndex && NextStartIndex == other.NextStartIndex && TotalResultCount == other.TotalResultCount;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata_SearchResultMetadata)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Sort != null)
                {
                    foreach (var Sort_elm in Sort)
                    {
                        hash ^= 397 * Sort_elm.GetHashCode();
                    }
                }

                if (Limit != null)
                {
                    hash ^= 397 * Limit.GetHashCode();
                }

                hash ^= 397 * ReturnedResultCount.GetHashCode();
                hash ^= 397 * StartIndex.GetHashCode();
                if (NextStartIndex != null)
                {
                    hash ^= 397 * NextStartIndex.GetHashCode();
                }

                if (TotalResultCount != null)
                {
                    hash ^= 397 * TotalResultCount.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// UC Davis locations that can be used for delivery or receiving locations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data_ErpInstitutionLocation : global::System.IEquatable<ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data_ErpInstitutionLocation>, IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data_ErpInstitutionLocation
    {
        public ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data_ErpInstitutionLocation(global::System.Int64 locationId, global::System.String locationCode, global::System.String addressLine1, global::System.String? addressLine2, global::System.String? addressLine3, global::System.String? addressLine4, global::System.String city, global::System.String? state, global::System.String? postalCode, global::System.Boolean receivingSite, global::System.Boolean deliverySite, global::System.Boolean enabled)
        {
            LocationId = locationId;
            LocationCode = locationCode;
            AddressLine1 = addressLine1;
            AddressLine2 = addressLine2;
            AddressLine3 = addressLine3;
            AddressLine4 = addressLine4;
            City = city;
            State = state;
            PostalCode = postalCode;
            ReceivingSite = receivingSite;
            DeliverySite = deliverySite;
            Enabled = enabled;
        }

        /// <summary>
        /// Value that uniquely identifies the supplier site internally to Oracle.
        /// </summary>
        public global::System.Int64 LocationId { get; }

        /// <summary>
        /// Value that uniquely identifies the supplier site for use on interfaces and in the Oracle UI.
        /// </summary>
        public global::System.String LocationCode { get; }

        /// <summary>
        /// Address Line 1
        /// </summary>
        public global::System.String AddressLine1 { get; }

        /// <summary>
        /// Address Line 2
        /// </summary>
        public global::System.String? AddressLine2 { get; }

        /// <summary>
        /// Address Line 3
        /// </summary>
        public global::System.String? AddressLine3 { get; }

        /// <summary>
        /// Address Line 4
        /// </summary>
        public global::System.String? AddressLine4 { get; }

        /// <summary>
        /// City Name
        /// </summary>
        public global::System.String City { get; }

        /// <summary>
        /// State Code
        /// </summary>
        public global::System.String? State { get; }

        /// <summary>
        /// Postal code
        /// </summary>
        public global::System.String? PostalCode { get; }

        /// <summary>
        /// Whether the location can be used as the receiving address for a purchase order.
        /// </summary>
        public global::System.Boolean ReceivingSite { get; }

        /// <summary>
        /// Whether the location can be used as the delivery address for a requisition.
        /// </summary>
        public global::System.Boolean DeliverySite { get; }

        /// <summary>
        /// Whether this address is enabled for current use.
        /// </summary>
        public global::System.Boolean Enabled { get; }

        public virtual global::System.Boolean Equals(ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data_ErpInstitutionLocation? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (LocationId == other.LocationId) && LocationCode.Equals(other.LocationCode) && AddressLine1.Equals(other.AddressLine1) && ((AddressLine2 is null && other.AddressLine2 is null) || AddressLine2 != null && AddressLine2.Equals(other.AddressLine2)) && ((AddressLine3 is null && other.AddressLine3 is null) || AddressLine3 != null && AddressLine3.Equals(other.AddressLine3)) && ((AddressLine4 is null && other.AddressLine4 is null) || AddressLine4 != null && AddressLine4.Equals(other.AddressLine4)) && City.Equals(other.City) && ((State is null && other.State is null) || State != null && State.Equals(other.State)) && ((PostalCode is null && other.PostalCode is null) || PostalCode != null && PostalCode.Equals(other.PostalCode)) && ReceivingSite == other.ReceivingSite && DeliverySite == other.DeliverySite && Enabled == other.Enabled;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data_ErpInstitutionLocation)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * LocationId.GetHashCode();
                hash ^= 397 * LocationCode.GetHashCode();
                hash ^= 397 * AddressLine1.GetHashCode();
                if (AddressLine2 != null)
                {
                    hash ^= 397 * AddressLine2.GetHashCode();
                }

                if (AddressLine3 != null)
                {
                    hash ^= 397 * AddressLine3.GetHashCode();
                }

                if (AddressLine4 != null)
                {
                    hash ^= 397 * AddressLine4.GetHashCode();
                }

                hash ^= 397 * City.GetHashCode();
                if (State != null)
                {
                    hash ^= 397 * State.GetHashCode();
                }

                if (PostalCode != null)
                {
                    hash ^= 397 * PostalCode.GetHashCode();
                }

                hash ^= 397 * ReceivingSite.GetHashCode();
                hash ^= 397 * DeliverySite.GetHashCode();
                hash ^= 397 * Enabled.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpInstitutionLocationSearchResult
    {
        /// <summary>
        /// Search for ErpInstitutionLocation objects by multiple properties.
        /// See the ErpInstitutionLocationFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch ErpInstitutionLocationSearch { get; }
    }

    /// <summary>
    /// Wrapper object for search results for ErpInstitutionLocation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpInstitutionLocationSearch_ErpInstitutionLocationSearch
    {
        /// <summary>
        /// Information about the search results returned.
        /// </summary>
        public global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata Metadata { get; }

        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data> Data { get; }
    }

    /// <summary>
    /// Wrapper object for search results for ErpInstitutionLocation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_ErpInstitutionLocationSearchResults : IErpInstitutionLocationSearch_ErpInstitutionLocationSearch
    {
    }

    /// <summary>
    /// Metadata about the search results returned in a given response.
    /// Used to provide metrics of the results and the information necessary
    /// to pull in the next set of records.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata
    {
        /// <summary>
        /// Array of property names used to sort the results
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Sort { get; }

        /// <summary>
        /// requested limit to the number of records to retrieve
        /// </summary>
        public global::System.Int32? Limit { get; }

        /// <summary>
        /// Results returned in the data property.
        /// </summary>
        public global::System.Int32 ReturnedResultCount { get; }

        /// <summary>
        /// Starting index for the current result set.
        /// </summary>
        public global::System.Int32 StartIndex { get; }

        /// <summary>
        /// Start index for getting the next page of results.  Unset if there are no more results.
        /// </summary>
        public global::System.Int32? NextStartIndex { get; }

        /// <summary>
        /// Total number of results.  Will only be populated if `includeTotalResultCount` is true in the search request.
        /// </summary>
        public global::System.Int32? TotalResultCount { get; }
    }

    /// <summary>
    /// Metadata about the search results returned in a given response.
    /// Used to provide metrics of the results and the information necessary
    /// to pull in the next set of records.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata_SearchResultMetadata : IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata
    {
    }

    /// <summary>
    /// UC Davis locations that can be used for delivery or receiving locations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data
    {
        /// <summary>
        /// Value that uniquely identifies the supplier site internally to Oracle.
        /// </summary>
        public global::System.Int64 LocationId { get; }

        /// <summary>
        /// Value that uniquely identifies the supplier site for use on interfaces and in the Oracle UI.
        /// </summary>
        public global::System.String LocationCode { get; }

        /// <summary>
        /// Address Line 1
        /// </summary>
        public global::System.String AddressLine1 { get; }

        /// <summary>
        /// Address Line 2
        /// </summary>
        public global::System.String? AddressLine2 { get; }

        /// <summary>
        /// Address Line 3
        /// </summary>
        public global::System.String? AddressLine3 { get; }

        /// <summary>
        /// Address Line 4
        /// </summary>
        public global::System.String? AddressLine4 { get; }

        /// <summary>
        /// City Name
        /// </summary>
        public global::System.String City { get; }

        /// <summary>
        /// State Code
        /// </summary>
        public global::System.String? State { get; }

        /// <summary>
        /// Postal code
        /// </summary>
        public global::System.String? PostalCode { get; }

        /// <summary>
        /// Whether the location can be used as the receiving address for a purchase order.
        /// </summary>
        public global::System.Boolean ReceivingSite { get; }

        /// <summary>
        /// Whether the location can be used as the delivery address for a requisition.
        /// </summary>
        public global::System.Boolean DeliverySite { get; }

        /// <summary>
        /// Whether this address is enabled for current use.
        /// </summary>
        public global::System.Boolean Enabled { get; }
    }

    /// <summary>
    /// UC Davis locations that can be used for delivery or receiving locations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data_ErpInstitutionLocation : IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpUnitOfMeasureSearchResult : global::System.IEquatable<ErpUnitOfMeasureSearchResult>, IErpUnitOfMeasureSearchResult
    {
        public ErpUnitOfMeasureSearchResult(global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch erpUnitOfMeasureSearch)
        {
            ErpUnitOfMeasureSearch = erpUnitOfMeasureSearch;
        }

        /// <summary>
        /// Search for ErpUnitOfMeasure objects by multiple properties.
        /// See the ErpUnitOfMeasureFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch ErpUnitOfMeasureSearch { get; }

        public virtual global::System.Boolean Equals(ErpUnitOfMeasureSearchResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ErpUnitOfMeasureSearch.Equals(other.ErpUnitOfMeasureSearch));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ErpUnitOfMeasureSearchResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ErpUnitOfMeasureSearch.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Wrapper object for search results for ErpUnitOfMeasure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearchResults : global::System.IEquatable<ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearchResults>, IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearchResults
    {
        public ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearchResults(global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata metadata, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data> data)
        {
            Metadata = metadata;
            Data = data;
        }

        /// <summary>
        /// Information about the search results returned.
        /// </summary>
        public global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata Metadata { get; }

        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data> Data { get; }

        public virtual global::System.Boolean Equals(ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearchResults? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Metadata.Equals(other.Metadata)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Data, other.Data);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearchResults)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Metadata.GetHashCode();
                foreach (var Data_elm in Data)
                {
                    hash ^= 397 * Data_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Metadata about the search results returned in a given response.
    /// Used to provide metrics of the results and the information necessary
    /// to pull in the next set of records.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata_SearchResultMetadata : global::System.IEquatable<ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata_SearchResultMetadata>, IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata_SearchResultMetadata
    {
        public ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata_SearchResultMetadata(global::System.Collections.Generic.IReadOnlyList<global::System.String>? sort, global::System.Int32? limit, global::System.Int32 returnedResultCount, global::System.Int32 startIndex, global::System.Int32? nextStartIndex, global::System.Int32? totalResultCount)
        {
            Sort = sort;
            Limit = limit;
            ReturnedResultCount = returnedResultCount;
            StartIndex = startIndex;
            NextStartIndex = nextStartIndex;
            TotalResultCount = totalResultCount;
        }

        /// <summary>
        /// Array of property names used to sort the results
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Sort { get; }

        /// <summary>
        /// requested limit to the number of records to retrieve
        /// </summary>
        public global::System.Int32? Limit { get; }

        /// <summary>
        /// Results returned in the data property.
        /// </summary>
        public global::System.Int32 ReturnedResultCount { get; }

        /// <summary>
        /// Starting index for the current result set.
        /// </summary>
        public global::System.Int32 StartIndex { get; }

        /// <summary>
        /// Start index for getting the next page of results.  Unset if there are no more results.
        /// </summary>
        public global::System.Int32? NextStartIndex { get; }

        /// <summary>
        /// Total number of results.  Will only be populated if `includeTotalResultCount` is true in the search request.
        /// </summary>
        public global::System.Int32? TotalResultCount { get; }

        public virtual global::System.Boolean Equals(ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata_SearchResultMetadata? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Sort, other.Sort)) && Limit == other.Limit && ReturnedResultCount == other.ReturnedResultCount && StartIndex == other.StartIndex && NextStartIndex == other.NextStartIndex && TotalResultCount == other.TotalResultCount;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata_SearchResultMetadata)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Sort != null)
                {
                    foreach (var Sort_elm in Sort)
                    {
                        hash ^= 397 * Sort_elm.GetHashCode();
                    }
                }

                if (Limit != null)
                {
                    hash ^= 397 * Limit.GetHashCode();
                }

                hash ^= 397 * ReturnedResultCount.GetHashCode();
                hash ^= 397 * StartIndex.GetHashCode();
                if (NextStartIndex != null)
                {
                    hash ^= 397 * NextStartIndex.GetHashCode();
                }

                if (TotalResultCount != null)
                {
                    hash ^= 397 * TotalResultCount.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data_ErpUnitOfMeasure : global::System.IEquatable<ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data_ErpUnitOfMeasure>, IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data_ErpUnitOfMeasure
    {
        public ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data_ErpUnitOfMeasure(global::System.String? uomCode, global::System.String? name)
        {
            UomCode = uomCode;
            Name = name;
        }

        /// <summary>
        /// Unique short code assigned to a Unit of Measure (UOM)
        /// </summary>
        public global::System.String? UomCode { get; }

        /// <summary>
        /// Translatable Unit of Measure (UOM) name
        /// </summary>
        public global::System.String? Name { get; }

        public virtual global::System.Boolean Equals(ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data_ErpUnitOfMeasure? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((UomCode is null && other.UomCode is null) || UomCode != null && UomCode.Equals(other.UomCode))) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data_ErpUnitOfMeasure)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (UomCode != null)
                {
                    hash ^= 397 * UomCode.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpUnitOfMeasureSearchResult
    {
        /// <summary>
        /// Search for ErpUnitOfMeasure objects by multiple properties.
        /// See the ErpUnitOfMeasureFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch ErpUnitOfMeasureSearch { get; }
    }

    /// <summary>
    /// Wrapper object for search results for ErpUnitOfMeasure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch
    {
        /// <summary>
        /// Information about the search results returned.
        /// </summary>
        public global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata Metadata { get; }

        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data> Data { get; }
    }

    /// <summary>
    /// Wrapper object for search results for ErpUnitOfMeasure
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearchResults : IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch
    {
    }

    /// <summary>
    /// Metadata about the search results returned in a given response.
    /// Used to provide metrics of the results and the information necessary
    /// to pull in the next set of records.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata
    {
        /// <summary>
        /// Array of property names used to sort the results
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Sort { get; }

        /// <summary>
        /// requested limit to the number of records to retrieve
        /// </summary>
        public global::System.Int32? Limit { get; }

        /// <summary>
        /// Results returned in the data property.
        /// </summary>
        public global::System.Int32 ReturnedResultCount { get; }

        /// <summary>
        /// Starting index for the current result set.
        /// </summary>
        public global::System.Int32 StartIndex { get; }

        /// <summary>
        /// Start index for getting the next page of results.  Unset if there are no more results.
        /// </summary>
        public global::System.Int32? NextStartIndex { get; }

        /// <summary>
        /// Total number of results.  Will only be populated if `includeTotalResultCount` is true in the search request.
        /// </summary>
        public global::System.Int32? TotalResultCount { get; }
    }

    /// <summary>
    /// Metadata about the search results returned in a given response.
    /// Used to provide metrics of the results and the information necessary
    /// to pull in the next set of records.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata_SearchResultMetadata : IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data
    {
        /// <summary>
        /// Unique short code assigned to a Unit of Measure (UOM)
        /// </summary>
        public global::System.String? UomCode { get; }

        /// <summary>
        /// Translatable Unit of Measure (UOM) name
        /// </summary>
        public global::System.String? Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data_ErpUnitOfMeasure : IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParentsResult : global::System.IEquatable<FundParentsResult>, IFundParentsResult
    {
        public FundParentsResult(global::AggieEnterpriseApi.IFundParents_ErpFund? erpFund)
        {
            ErpFund = erpFund;
        }

        /// <summary>
        /// Get a single ErpFund by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund? ErpFund { get; }

        public virtual global::System.Boolean Equals(FundParentsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ErpFund is null && other.ErpFund is null) || ErpFund != null && ErpFund.Equals(other.ErpFund)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParentsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErpFund != null)
                {
                    hash ^= 397 * ErpFund.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_ErpFund : global::System.IEquatable<FundParents_ErpFund_ErpFund>, IFundParents_ErpFund_ErpFund
    {
        public FundParents_ErpFund_ErpFund(global::System.String code, global::System.String name, global::System.Boolean? budgeted, global::System.Boolean eligibleForUse, global::System.Boolean enabled, global::System.String? endDate, global::System.Int64 id, global::System.String? startDate, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent? parent)
        {
            Code = code;
            Name = name;
            Budgeted = budgeted;
            EligibleForUse = eligibleForUse;
            Enabled = enabled;
            EndDate = endDate;
            Id = id;
            StartDate = startDate;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Whether this fund is used for budgeting purposes.
        /// </summary>
        public global::System.Boolean? Budgeted { get; }

        /// <summary>
        /// Returns whether this ErpFund is valid to use on transactional documents for the given accounting date.  If not provided, the date will be defaulted to the current date.
        /// 
        /// To be eligible for use, the ErpFund must:
        /// * Be enabled
        /// * Not be summaryOnly
        /// * Have a startDate and endDate range which includes the given accountingDate
        /// </summary>
        public global::System.Boolean EligibleForUse { get; }

        /// <summary>
        /// Whether this ErpFund is presently enabled for use.
        /// </summary>
        public global::System.Boolean Enabled { get; }

        /// <summary>
        /// The date till which the value is available for use.
        /// </summary>
        public global::System.String? EndDate { get; }

        /// <summary>
        /// Internal numeric identifier of an ErpFund
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// The date from when the value is available for use.
        /// </summary>
        public global::System.String? StartDate { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && Budgeted == other.Budgeted && EligibleForUse == other.EligibleForUse && Enabled == other.Enabled && ((EndDate is null && other.EndDate is null) || EndDate != null && EndDate.Equals(other.EndDate)) && Id == other.Id && ((StartDate is null && other.StartDate is null) || StartDate != null && StartDate.Equals(other.StartDate)) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Budgeted != null)
                {
                    hash ^= 397 * Budgeted.GetHashCode();
                }

                hash ^= 397 * EligibleForUse.GetHashCode();
                hash ^= 397 * Enabled.GetHashCode();
                if (EndDate != null)
                {
                    hash ^= 397 * EndDate.GetHashCode();
                }

                hash ^= 397 * Id.GetHashCode();
                if (StartDate != null)
                {
                    hash ^= 397 * StartDate.GetHashCode();
                }

                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_ErpFund>, IFundParents_ErpFund_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_Parent_ErpFund>, IFundParents_ErpFund_Parent_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_Parent_Parent_ErpFund>, IFundParents_ErpFund_Parent_Parent_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_Parent_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_Parent_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_Parent_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund>, IFundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund>, IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund>, IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund>, IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
        }

        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParentsResult
    {
        /// <summary>
        /// Get a single ErpFund by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund? ErpFund { get; }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund
    {
        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Whether this fund is used for budgeting purposes.
        /// </summary>
        public global::System.Boolean? Budgeted { get; }

        /// <summary>
        /// Returns whether this ErpFund is valid to use on transactional documents for the given accounting date.  If not provided, the date will be defaulted to the current date.
        /// 
        /// To be eligible for use, the ErpFund must:
        /// * Be enabled
        /// * Not be summaryOnly
        /// * Have a startDate and endDate range which includes the given accountingDate
        /// </summary>
        public global::System.Boolean EligibleForUse { get; }

        /// <summary>
        /// Whether this ErpFund is presently enabled for use.
        /// </summary>
        public global::System.Boolean Enabled { get; }

        /// <summary>
        /// The date till which the value is available for use.
        /// </summary>
        public global::System.String? EndDate { get; }

        /// <summary>
        /// Internal numeric identifier of an ErpFund
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// The date from when the value is available for use.
        /// </summary>
        public global::System.String? StartDate { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent? Parent { get; }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_ErpFund : IFundParents_ErpFund
    {
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent? Parent { get; }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_ErpFund : IFundParents_ErpFund_Parent
    {
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent? Parent { get; }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_ErpFund : IFundParents_ErpFund_Parent_Parent
    {
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? Parent { get; }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_ErpFund : IFundParents_ErpFund_Parent_Parent_Parent
    {
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? Parent { get; }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund : IFundParents_ErpFund_Parent_Parent_Parent_Parent
    {
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund : IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent
    {
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }

        /// <summary>
        /// The ErpFund which is the immediate parent of this one.
        /// Will be undefined if the ErpFund has no parent.
        /// </summary>
        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund : IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent
    {
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent
    {
        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Level below the top for a ErpFund that is part of a reporting hierarchy.
        /// </summary>
        public global::System.Int32? HierarchyDepth { get; }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund : IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestResult : global::System.IEquatable<GlJournalRequestResult>, IGlJournalRequestResult
    {
        public GlJournalRequestResult(global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest glJournalRequest)
        {
            GlJournalRequest = glJournalRequest;
        }

        /// <summary>
        /// Requests that a Journal Voucher and/or PPM Costing file be uploaded to Oracle.
        /// 
        /// The journal voucher is the primary interface for loading transactions into Oracle from boundary systems.  It is used regardless of whether the expenses are costs which can be applied to the general ledger or must be expensed to the PPM sub-ledger.  The data model in the request allows for all fields which might be needed for GL or PPM transactions to be provided.  However, it is up to the caller to know and fill out the fields properly.  Where possible, the API will reject invalid data prior to it being sent to Oracle.
        /// 
        /// This API replaces the KFS GL Collector process.  While the valid values of the FAU components (now called chartstring segments) have changed, the basic concepts of feeding transactional data to the financial system have not.  As always, transactions submitted to the GL must be balanced between debits and credits.  Valid values must be used for certain fields, and fields have content and length limits.
        /// 
        /// The correct values to use for chartstring segments is out of scope for this documentation.  This API is the mechanism by which you submit values already determined to be functionally correct to the financial system.  Other operations on this server provide data retrieval and validation tools to support generation of correct data payloads for the API.
        /// 
        /// Please see below in this document for examples of payloads into this API.
        /// 
        /// #### Supporting Operations
        /// 
        /// Other operations which should be used to pre-validate chartstring segments are below.  Please see <https: / / financeandbusiness.ucdavis.edu / aggie-enterprise / chart-of-accounts / redesign> for information about each of these segments.
        /// 
        /// * [`erpEntity`]({{Queries.erpEntity}})
        /// * [`erpFund`]({{Queries.erpFund}})
        /// * [`erpFinancialDepartment`]({{Queries.erpFinancialDepartment}})
        /// * [`erpAccount`]({{Queries.erpAccount}})
        /// * [`erpPurpose`]({{Queries.erpPurpose}})
        /// * [`erpProject`]({{Queries.erpProject}})
        /// * [`erpProgram`]({{Queries.erpProgram}})
        /// * [`erpActivity`]({{Queries.erpActivity}})
        /// 
        /// For validating combinations, the following two operations are provided, differing only in their input format.
        /// 
        /// * [`glValidateChartSegments`]({{Queries.glValidateChartSegments}})
        /// * [`glValidateChartstring`]({{Queries.glValidateChartstring}})
        /// 
        /// #### Managed Project Cost Entries (PPM/POET)
        /// 
        /// In addition to the standard GL-type of transaction which aligns with the KFS general ledger, Oracle Financials also utilizes a sub-ledger for tracking costs against managed projects.  This loosely matches contracts and grants (award-based) accounts from KFS, but PPM (Project and Portfolio Management) encompasses more than that.
        /// 
        /// For expenses (or income) which are to be recorded against these managed projects, the expense must be recorded in the sub-ledger first, using a different set of chartstring values.  This interface allows you to provide both GL and PPM sub-ledger transactions in the same payload.  (Any attempt to record transactions against a managed project directly (using GL segments) will be rejected.)
        /// 
        /// For PPM, you must use a different set of input strings on the journal line, utilizing the 4 fields below (all required):
        /// 
        /// * `p`roject
        /// * `o`rganization (same values as `ErpFinancialDepartment`)
        /// * `e`xpenditureType (same values as `ErpAccount`)
        /// * `t`ask
        /// 
        /// Tasks are child records to each project.  You can obtain the list of valid tasks for any project by referencing the `PpmProject.tasks` property.
        /// 
        /// There are also the two segments listed below.  For API-based use, the framework will pull the correct award and funding source for any sponsored projects.  For file-based submissions, the default values must be included by querying from the `ppmProject` operation.  You can check whether you need to include these by referencing the `sponsoredProject` property on the `PpmProject`.
        /// 
        /// * award (only for sponsored projects)
        /// * fundingSource (only for sponsored projects)
        /// 
        /// As with the GL segments, the API provides the operations below for lookups and validation:
        /// 
        /// * [`ppmProject`]({{Queries.ppmProject}})
        /// * [`ppmExpenditureType`]({{Queries.ppmExpenditureType}})
        /// * [`ppmOrganization`]({{Queries.ppmOrganization}})
        /// * [`ppmSegmentsValidate`]({{Queries.ppmSegmentsValidate}})
        /// 
        /// #### Volume of Data
        /// 
        /// Unlike the use of the KFS ledger, the Oracle Financials general ledger will be a thin ledger.  This means that the level of detail that is allowed to be loaded into the ledger will be limited to summary level information.  It is required that you summarize data down as much as possible to the chartstring segments while being able to retain a link to the source of the transactions.  (E.g., an order number, batch number, or a transaction date)  Submitting lines for each source line item in an external billing system will not be allowed.  Failure to summarize data to an acceptable level will result in loss of API or journal upload access.
        /// 
        /// #### Journal Balancing
        /// 
        /// As with the KFS ledger, journal payloads must balance.  (debit = credits)  Each API payload is a single journal (document number in KFS).
        /// 
        /// While lines with `glSegments` and `ppmSegments` are posted to different ledgers, we can balance across them when creating journals.  Offset entries are required by Oracle to keep the GL in balance until sub-ledger accounting processes execute.  These will be created by the integration framework for you and applied to a central clearing location outside of your department's cost center.
        /// 
        /// #### Basic Use
        /// 
        /// 1. Call the operation (`glJournalRequest`) providing a data payload with the proper structure.  (See [`GlJournalRequestInput`]({{Types.GlJournalRequestInput}}))
        /// 2. GraphQL Server will validate content format and reject if invalid.
        /// 3. API Server will perform request-specific validation against a local copy of Oracle ERP data.
        /// 4. A failure in either of these initial validations will result in an error response with no request being generated.
        /// 5. Passing validation will save the request to allow for pickup by the integration platform for processing.
        /// 6. A request tracking ID will be generated and returned to allow for the consumer to check on the status of the request and obtain results when completed.
        /// 7. At a later time, use the generated request tracking ID against the [`glJournalRequestStatus`]({{Queries.glJournalRequestStatus}}) operation to determine if the request was processed successfully
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest GlJournalRequest { get; }

        public virtual global::System.Boolean Equals(GlJournalRequestResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GlJournalRequest.Equals(other.GlJournalRequest));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GlJournalRequest.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Output type for GLJournal requests and follow-up status updates.
    /// 
    /// Contains the overall request status.  After a successful creation of the journal, will also contain the Oracle Financials assigned journal ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput : global::System.IEquatable<GlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput>, IGlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput
    {
        public GlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput(global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_RequestStatus requestStatus, global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_ValidationResults? validationResults)
        {
            RequestStatus = requestStatus;
            ValidationResults = validationResults;
        }

        /// <summary>
        /// Overall status of the action request
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_RequestStatus RequestStatus { get; }

        /// <summary>
        /// Errors found when validating the payload data.  These must be corrected before the request will be accepted.
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_ValidationResults? ValidationResults { get; }

        public virtual global::System.Boolean Equals(GlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RequestStatus.Equals(other.RequestStatus)) && ((ValidationResults is null && other.ValidationResults is null) || ValidationResults != null && ValidationResults.Equals(other.ValidationResults));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RequestStatus.GetHashCode();
                if (ValidationResults != null)
                {
                    hash ^= 397 * ValidationResults.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Fields common to all action status requests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus : global::System.IEquatable<GlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus>, IGlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus
    {
        public GlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus(global::System.Guid? requestId, global::System.String consumerId, global::System.DateTimeOffset requestDateTime, global::AggieEnterpriseApi.RequestStatus requestStatus, global::System.String operationName)
        {
            RequestId = requestId;
            ConsumerId = consumerId;
            RequestDateTime = requestDateTime;
            RequestStatus = requestStatus;
            OperationName = operationName;
        }

        /// <summary>
        /// Unique identifier assigned to the request
        /// </summary>
        public global::System.Guid? RequestId { get; }

        /// <summary>
        /// ID of the consumer who made the request extracted from the service authentication data
        /// </summary>
        public global::System.String ConsumerId { get; }

        public global::System.DateTimeOffset RequestDateTime { get; }

        public global::AggieEnterpriseApi.RequestStatus RequestStatus { get; }

        /// <summary>
        /// Name of the operation called.
        /// </summary>
        public global::System.String OperationName { get; }

        public virtual global::System.Boolean Equals(GlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((RequestId is null && other.RequestId is null) || RequestId != null && RequestId.Equals(other.RequestId))) && ConsumerId.Equals(other.ConsumerId) && RequestDateTime.Equals(other.RequestDateTime) && RequestStatus.Equals(other.RequestStatus) && OperationName.Equals(other.OperationName);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (RequestId != null)
                {
                    hash ^= 397 * RequestId.GetHashCode();
                }

                hash ^= 397 * ConsumerId.GetHashCode();
                hash ^= 397 * RequestDateTime.GetHashCode();
                hash ^= 397 * RequestStatus.GetHashCode();
                hash ^= 397 * OperationName.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse : global::System.IEquatable<GlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse>, IGlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse
    {
        public GlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse(global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties)
        {
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
        }

        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        public virtual global::System.Boolean Equals(GlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MessageProperties, other.MessageProperties);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (MessageProperties != null)
                {
                    foreach (var MessageProperties_elm in MessageProperties)
                    {
                        hash ^= 397 * MessageProperties_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestResult
    {
        /// <summary>
        /// Requests that a Journal Voucher and/or PPM Costing file be uploaded to Oracle.
        /// 
        /// The journal voucher is the primary interface for loading transactions into Oracle from boundary systems.  It is used regardless of whether the expenses are costs which can be applied to the general ledger or must be expensed to the PPM sub-ledger.  The data model in the request allows for all fields which might be needed for GL or PPM transactions to be provided.  However, it is up to the caller to know and fill out the fields properly.  Where possible, the API will reject invalid data prior to it being sent to Oracle.
        /// 
        /// This API replaces the KFS GL Collector process.  While the valid values of the FAU components (now called chartstring segments) have changed, the basic concepts of feeding transactional data to the financial system have not.  As always, transactions submitted to the GL must be balanced between debits and credits.  Valid values must be used for certain fields, and fields have content and length limits.
        /// 
        /// The correct values to use for chartstring segments is out of scope for this documentation.  This API is the mechanism by which you submit values already determined to be functionally correct to the financial system.  Other operations on this server provide data retrieval and validation tools to support generation of correct data payloads for the API.
        /// 
        /// Please see below in this document for examples of payloads into this API.
        /// 
        /// #### Supporting Operations
        /// 
        /// Other operations which should be used to pre-validate chartstring segments are below.  Please see <https: / / financeandbusiness.ucdavis.edu / aggie-enterprise / chart-of-accounts / redesign> for information about each of these segments.
        /// 
        /// * [`erpEntity`]({{Queries.erpEntity}})
        /// * [`erpFund`]({{Queries.erpFund}})
        /// * [`erpFinancialDepartment`]({{Queries.erpFinancialDepartment}})
        /// * [`erpAccount`]({{Queries.erpAccount}})
        /// * [`erpPurpose`]({{Queries.erpPurpose}})
        /// * [`erpProject`]({{Queries.erpProject}})
        /// * [`erpProgram`]({{Queries.erpProgram}})
        /// * [`erpActivity`]({{Queries.erpActivity}})
        /// 
        /// For validating combinations, the following two operations are provided, differing only in their input format.
        /// 
        /// * [`glValidateChartSegments`]({{Queries.glValidateChartSegments}})
        /// * [`glValidateChartstring`]({{Queries.glValidateChartstring}})
        /// 
        /// #### Managed Project Cost Entries (PPM/POET)
        /// 
        /// In addition to the standard GL-type of transaction which aligns with the KFS general ledger, Oracle Financials also utilizes a sub-ledger for tracking costs against managed projects.  This loosely matches contracts and grants (award-based) accounts from KFS, but PPM (Project and Portfolio Management) encompasses more than that.
        /// 
        /// For expenses (or income) which are to be recorded against these managed projects, the expense must be recorded in the sub-ledger first, using a different set of chartstring values.  This interface allows you to provide both GL and PPM sub-ledger transactions in the same payload.  (Any attempt to record transactions against a managed project directly (using GL segments) will be rejected.)
        /// 
        /// For PPM, you must use a different set of input strings on the journal line, utilizing the 4 fields below (all required):
        /// 
        /// * `p`roject
        /// * `o`rganization (same values as `ErpFinancialDepartment`)
        /// * `e`xpenditureType (same values as `ErpAccount`)
        /// * `t`ask
        /// 
        /// Tasks are child records to each project.  You can obtain the list of valid tasks for any project by referencing the `PpmProject.tasks` property.
        /// 
        /// There are also the two segments listed below.  For API-based use, the framework will pull the correct award and funding source for any sponsored projects.  For file-based submissions, the default values must be included by querying from the `ppmProject` operation.  You can check whether you need to include these by referencing the `sponsoredProject` property on the `PpmProject`.
        /// 
        /// * award (only for sponsored projects)
        /// * fundingSource (only for sponsored projects)
        /// 
        /// As with the GL segments, the API provides the operations below for lookups and validation:
        /// 
        /// * [`ppmProject`]({{Queries.ppmProject}})
        /// * [`ppmExpenditureType`]({{Queries.ppmExpenditureType}})
        /// * [`ppmOrganization`]({{Queries.ppmOrganization}})
        /// * [`ppmSegmentsValidate`]({{Queries.ppmSegmentsValidate}})
        /// 
        /// #### Volume of Data
        /// 
        /// Unlike the use of the KFS ledger, the Oracle Financials general ledger will be a thin ledger.  This means that the level of detail that is allowed to be loaded into the ledger will be limited to summary level information.  It is required that you summarize data down as much as possible to the chartstring segments while being able to retain a link to the source of the transactions.  (E.g., an order number, batch number, or a transaction date)  Submitting lines for each source line item in an external billing system will not be allowed.  Failure to summarize data to an acceptable level will result in loss of API or journal upload access.
        /// 
        /// #### Journal Balancing
        /// 
        /// As with the KFS ledger, journal payloads must balance.  (debit = credits)  Each API payload is a single journal (document number in KFS).
        /// 
        /// While lines with `glSegments` and `ppmSegments` are posted to different ledgers, we can balance across them when creating journals.  Offset entries are required by Oracle to keep the GL in balance until sub-ledger accounting processes execute.  These will be created by the integration framework for you and applied to a central clearing location outside of your department's cost center.
        /// 
        /// #### Basic Use
        /// 
        /// 1. Call the operation (`glJournalRequest`) providing a data payload with the proper structure.  (See [`GlJournalRequestInput`]({{Types.GlJournalRequestInput}}))
        /// 2. GraphQL Server will validate content format and reject if invalid.
        /// 3. API Server will perform request-specific validation against a local copy of Oracle ERP data.
        /// 4. A failure in either of these initial validations will result in an error response with no request being generated.
        /// 5. Passing validation will save the request to allow for pickup by the integration platform for processing.
        /// 6. A request tracking ID will be generated and returned to allow for the consumer to check on the status of the request and obtain results when completed.
        /// 7. At a later time, use the generated request tracking ID against the [`glJournalRequestStatus`]({{Queries.glJournalRequestStatus}}) operation to determine if the request was processed successfully
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest GlJournalRequest { get; }
    }

    /// <summary>
    /// Output type for GLJournal requests and follow-up status updates.
    /// 
    /// Contains the overall request status.  After a successful creation of the journal, will also contain the Oracle Financials assigned journal ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequest_GlJournalRequest
    {
        /// <summary>
        /// Overall status of the action request
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_RequestStatus RequestStatus { get; }

        /// <summary>
        /// Errors found when validating the payload data.  These must be corrected before the request will be accepted.
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_ValidationResults? ValidationResults { get; }
    }

    /// <summary>
    /// Output type for GLJournal requests and follow-up status updates.
    /// 
    /// Contains the overall request status.  After a successful creation of the journal, will also contain the Oracle Financials assigned journal ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput : IGlJournalRequest_GlJournalRequest
    {
    }

    /// <summary>
    /// Fields common to all action status requests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequest_GlJournalRequest_RequestStatus
    {
        /// <summary>
        /// Unique identifier assigned to the request
        /// </summary>
        public global::System.Guid? RequestId { get; }

        /// <summary>
        /// ID of the consumer who made the request extracted from the service authentication data
        /// </summary>
        public global::System.String ConsumerId { get; }

        public global::System.DateTimeOffset RequestDateTime { get; }

        public global::AggieEnterpriseApi.RequestStatus RequestStatus { get; }

        /// <summary>
        /// Name of the operation called.
        /// </summary>
        public global::System.String OperationName { get; }
    }

    /// <summary>
    /// Fields common to all action status requests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus : IGlJournalRequest_GlJournalRequest_RequestStatus
    {
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequest_GlJournalRequest_ValidationResults
    {
        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse : IGlJournalRequest_GlJournalRequest_ValidationResults
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusResult : global::System.IEquatable<GlJournalRequestStatusResult>, IGlJournalRequestStatusResult
    {
        public GlJournalRequestStatusResult(global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus? glJournalRequestStatus)
        {
            GlJournalRequestStatus = glJournalRequestStatus;
        }

        /// <summary>
        /// Get the status of a previously submitted journal voucher request by the API-assigned request ID.
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus? GlJournalRequestStatus { get; }

        public virtual global::System.Boolean Equals(GlJournalRequestStatusResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((GlJournalRequestStatus is null && other.GlJournalRequestStatus is null) || GlJournalRequestStatus != null && GlJournalRequestStatus.Equals(other.GlJournalRequestStatus)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestStatusResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GlJournalRequestStatus != null)
                {
                    hash ^= 397 * GlJournalRequestStatus.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Output type for GLJournal requests and follow-up status updates.
    /// 
    /// Contains the overall request status.  After a successful creation of the journal, will also contain the Oracle Financials assigned journal ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput : global::System.IEquatable<GlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput>, IGlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput
    {
        public GlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput(global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus requestStatus, global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult? processingResult, global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults? validationResults)
        {
            RequestStatus = requestStatus;
            ProcessingResult = processingResult;
            ValidationResults = validationResults;
        }

        /// <summary>
        /// Overall status of the action request
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus RequestStatus { get; }

        /// <summary>
        /// Results of the Job or Jobs required to submit this request to the ERP.
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult? ProcessingResult { get; }

        /// <summary>
        /// Errors found when validating the payload data.  These must be corrected before the request will be accepted.
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults? ValidationResults { get; }

        public virtual global::System.Boolean Equals(GlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RequestStatus.Equals(other.RequestStatus)) && ((ProcessingResult is null && other.ProcessingResult is null) || ProcessingResult != null && ProcessingResult.Equals(other.ProcessingResult)) && ((ValidationResults is null && other.ValidationResults is null) || ValidationResults != null && ValidationResults.Equals(other.ValidationResults));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RequestStatus.GetHashCode();
                if (ProcessingResult != null)
                {
                    hash ^= 397 * ProcessingResult.GetHashCode();
                }

                if (ValidationResults != null)
                {
                    hash ^= 397 * ValidationResults.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Fields common to all action status requests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus : global::System.IEquatable<GlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus>, IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus
    {
        public GlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus(global::System.String? statusRequestPayload, global::System.String operationName, global::AggieEnterpriseApi.RequestStatus requestStatus, global::System.DateTimeOffset requestDateTime, global::System.DateTimeOffset lastStatusDateTime, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.DateTimeOffset? processedDateTime, global::System.String boundaryApplicationName, global::System.String consumerId, global::System.String? consumerNotes, global::System.String consumerReferenceId)
        {
            StatusRequestPayload = statusRequestPayload;
            OperationName = operationName;
            RequestStatus = requestStatus;
            RequestDateTime = requestDateTime;
            LastStatusDateTime = lastStatusDateTime;
            ErrorMessages = errorMessages;
            ProcessedDateTime = processedDateTime;
            BoundaryApplicationName = boundaryApplicationName;
            ConsumerId = consumerId;
            ConsumerNotes = consumerNotes;
            ConsumerReferenceId = consumerReferenceId;
        }

        /// <summary>
        /// GraphQL Payload to post back to this server to check on the status of the request.
        /// </summary>
        public global::System.String? StatusRequestPayload { get; }

        /// <summary>
        /// Name of the operation called.
        /// </summary>
        public global::System.String OperationName { get; }

        public global::AggieEnterpriseApi.RequestStatus RequestStatus { get; }

        public global::System.DateTimeOffset RequestDateTime { get; }

        /// <summary>
        /// When the status last changed
        /// </summary>
        public global::System.DateTimeOffset LastStatusDateTime { get; }

        /// <summary>
        /// Error information if the request failed during processing.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// When the request was processed by the ERP system
        /// </summary>
        public global::System.DateTimeOffset? ProcessedDateTime { get; }

        /// <summary>
        /// Identifier for the boundary application originating the request.
        /// </summary>
        public global::System.String BoundaryApplicationName { get; }

        /// <summary>
        /// ID of the consumer who made the request extracted from the service authentication data
        /// </summary>
        public global::System.String ConsumerId { get; }

        /// <summary>
        /// Any notes to include with the request, this is stored as metadata to provide context to the request.
        /// </summary>
        public global::System.String? ConsumerNotes { get; }

        /// <summary>
        /// Identifier provided by the consumer which usually references the source record within their system.  Does not need to be unique.
        /// </summary>
        public global::System.String ConsumerReferenceId { get; }

        public virtual global::System.Boolean Equals(GlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((StatusRequestPayload is null && other.StatusRequestPayload is null) || StatusRequestPayload != null && StatusRequestPayload.Equals(other.StatusRequestPayload))) && OperationName.Equals(other.OperationName) && RequestStatus.Equals(other.RequestStatus) && RequestDateTime.Equals(other.RequestDateTime) && LastStatusDateTime.Equals(other.LastStatusDateTime) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages) && ((ProcessedDateTime is null && other.ProcessedDateTime is null) || ProcessedDateTime != null && ProcessedDateTime.Equals(other.ProcessedDateTime)) && BoundaryApplicationName.Equals(other.BoundaryApplicationName) && ConsumerId.Equals(other.ConsumerId) && ((ConsumerNotes is null && other.ConsumerNotes is null) || ConsumerNotes != null && ConsumerNotes.Equals(other.ConsumerNotes)) && ConsumerReferenceId.Equals(other.ConsumerReferenceId);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (StatusRequestPayload != null)
                {
                    hash ^= 397 * StatusRequestPayload.GetHashCode();
                }

                hash ^= 397 * OperationName.GetHashCode();
                hash ^= 397 * RequestStatus.GetHashCode();
                hash ^= 397 * RequestDateTime.GetHashCode();
                hash ^= 397 * LastStatusDateTime.GetHashCode();
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (ProcessedDateTime != null)
                {
                    hash ^= 397 * ProcessedDateTime.GetHashCode();
                }

                hash ^= 397 * BoundaryApplicationName.GetHashCode();
                hash ^= 397 * ConsumerId.GetHashCode();
                if (ConsumerNotes != null)
                {
                    hash ^= 397 * ConsumerNotes.GetHashCode();
                }

                hash ^= 397 * ConsumerReferenceId.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Result of the attempt to process the action request in the destination system
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult : global::System.IEquatable<GlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult>, IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult
    {
        public GlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult(global::System.String status, global::System.DateTimeOffset? processedDateTime)
        {
            Status = status;
            ProcessedDateTime = processedDateTime;
        }

        public global::System.String Status { get; }

        /// <summary>
        /// Time the request was noted as completed processing, whether successful or not.
        /// </summary>
        public global::System.DateTimeOffset? ProcessedDateTime { get; }

        public virtual global::System.Boolean Equals(GlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Status.Equals(other.Status)) && ((ProcessedDateTime is null && other.ProcessedDateTime is null) || ProcessedDateTime != null && ProcessedDateTime.Equals(other.ProcessedDateTime));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Status.GetHashCode();
                if (ProcessedDateTime != null)
                {
                    hash ^= 397 * ProcessedDateTime.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse : global::System.IEquatable<GlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse>, IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse
    {
        public GlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse(global::System.Boolean valid, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages)
        {
            Valid = valid;
            ErrorMessages = errorMessages;
        }

        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }

        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public virtual global::System.Boolean Equals(GlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Valid == other.Valid) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Valid.GetHashCode();
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatusResult
    {
        /// <summary>
        /// Get the status of a previously submitted journal voucher request by the API-assigned request ID.
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus? GlJournalRequestStatus { get; }
    }

    /// <summary>
    /// Output type for GLJournal requests and follow-up status updates.
    /// 
    /// Contains the overall request status.  After a successful creation of the journal, will also contain the Oracle Financials assigned journal ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus
    {
        /// <summary>
        /// Overall status of the action request
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus RequestStatus { get; }

        /// <summary>
        /// Results of the Job or Jobs required to submit this request to the ERP.
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult? ProcessingResult { get; }

        /// <summary>
        /// Errors found when validating the payload data.  These must be corrected before the request will be accepted.
        /// </summary>
        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults? ValidationResults { get; }
    }

    /// <summary>
    /// Output type for GLJournal requests and follow-up status updates.
    /// 
    /// Contains the overall request status.  After a successful creation of the journal, will also contain the Oracle Financials assigned journal ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput : IGlJournalRequestStatus_GlJournalRequestStatus
    {
    }

    /// <summary>
    /// Fields common to all action status requests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus
    {
        /// <summary>
        /// GraphQL Payload to post back to this server to check on the status of the request.
        /// </summary>
        public global::System.String? StatusRequestPayload { get; }

        /// <summary>
        /// Name of the operation called.
        /// </summary>
        public global::System.String OperationName { get; }

        public global::AggieEnterpriseApi.RequestStatus RequestStatus { get; }

        public global::System.DateTimeOffset RequestDateTime { get; }

        /// <summary>
        /// When the status last changed
        /// </summary>
        public global::System.DateTimeOffset LastStatusDateTime { get; }

        /// <summary>
        /// Error information if the request failed during processing.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// When the request was processed by the ERP system
        /// </summary>
        public global::System.DateTimeOffset? ProcessedDateTime { get; }

        /// <summary>
        /// Identifier for the boundary application originating the request.
        /// </summary>
        public global::System.String BoundaryApplicationName { get; }

        /// <summary>
        /// ID of the consumer who made the request extracted from the service authentication data
        /// </summary>
        public global::System.String ConsumerId { get; }

        /// <summary>
        /// Any notes to include with the request, this is stored as metadata to provide context to the request.
        /// </summary>
        public global::System.String? ConsumerNotes { get; }

        /// <summary>
        /// Identifier provided by the consumer which usually references the source record within their system.  Does not need to be unique.
        /// </summary>
        public global::System.String ConsumerReferenceId { get; }
    }

    /// <summary>
    /// Fields common to all action status requests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus : IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus
    {
    }

    /// <summary>
    /// Result of the attempt to process the action request in the destination system
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult
    {
        public global::System.String Status { get; }

        /// <summary>
        /// Time the request was noted as completed processing, whether successful or not.
        /// </summary>
        public global::System.DateTimeOffset? ProcessedDateTime { get; }
    }

    /// <summary>
    /// Result of the attempt to process the action request in the destination system
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult : IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult
    {
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults
    {
        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }

        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse : IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetailsResult : global::System.IEquatable<CoaDetailsResult>, ICoaDetailsResult
    {
        public CoaDetailsResult(global::AggieEnterpriseApi.ICoaDetails_ErpEntity? erpEntity, global::AggieEnterpriseApi.ICoaDetails_ErpFund? erpFund, global::AggieEnterpriseApi.ICoaDetails_ErpFinancialDepartment? erpFinancialDepartment, global::AggieEnterpriseApi.ICoaDetails_ErpAccount? erpAccount, global::AggieEnterpriseApi.ICoaDetails_ErpPurpose? erpPurpose)
        {
            ErpEntity = erpEntity;
            ErpFund = erpFund;
            ErpFinancialDepartment = erpFinancialDepartment;
            ErpAccount = erpAccount;
            ErpPurpose = erpPurpose;
        }

        /// <summary>
        /// Get a single ErpEntity by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.ICoaDetails_ErpEntity? ErpEntity { get; }

        /// <summary>
        /// Get a single ErpFund by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.ICoaDetails_ErpFund? ErpFund { get; }

        /// <summary>
        /// Get a single ErpFinancialDepartment by code.  Returns undefined if does not exist.
        /// </summary>
        public global::AggieEnterpriseApi.ICoaDetails_ErpFinancialDepartment? ErpFinancialDepartment { get; }

        /// <summary>
        /// Get a single ErpAccount by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.ICoaDetails_ErpAccount? ErpAccount { get; }

        /// <summary>
        /// Get a single ErpPurpose by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.ICoaDetails_ErpPurpose? ErpPurpose { get; }

        public virtual global::System.Boolean Equals(CoaDetailsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ErpEntity is null && other.ErpEntity is null) || ErpEntity != null && ErpEntity.Equals(other.ErpEntity))) && ((ErpFund is null && other.ErpFund is null) || ErpFund != null && ErpFund.Equals(other.ErpFund)) && ((ErpFinancialDepartment is null && other.ErpFinancialDepartment is null) || ErpFinancialDepartment != null && ErpFinancialDepartment.Equals(other.ErpFinancialDepartment)) && ((ErpAccount is null && other.ErpAccount is null) || ErpAccount != null && ErpAccount.Equals(other.ErpAccount)) && ((ErpPurpose is null && other.ErpPurpose is null) || ErpPurpose != null && ErpPurpose.Equals(other.ErpPurpose));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CoaDetailsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErpEntity != null)
                {
                    hash ^= 397 * ErpEntity.GetHashCode();
                }

                if (ErpFund != null)
                {
                    hash ^= 397 * ErpFund.GetHashCode();
                }

                if (ErpFinancialDepartment != null)
                {
                    hash ^= 397 * ErpFinancialDepartment.GetHashCode();
                }

                if (ErpAccount != null)
                {
                    hash ^= 397 * ErpAccount.GetHashCode();
                }

                if (ErpPurpose != null)
                {
                    hash ^= 397 * ErpPurpose.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The Entity segment identifies the major UC system organizational units. These units generally require their own complete, separately audited financial statements to comply with external, regulatory reporting requirements (e.g., external audits, tax reporting), which cannot achieve compliance by using the audited financial statements issued by the Office of the President. Entity, however, will also provide high level management and operational reports.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Entity level.
    /// 
    /// Entities at all levels have unique reporting and/or external auditing needs that can only be met with an Entity level designation (e.g., UC Davis Health).
    /// 
    /// **FAU Value Comparison:**
    /// The Entity segment most closely aligns with the KFS Chart (e.g. 3, H, L, P).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpEntity_ErpEntity : global::System.IEquatable<CoaDetails_ErpEntity_ErpEntity>, ICoaDetails_ErpEntity_ErpEntity
    {
        public CoaDetails_ErpEntity_ErpEntity(global::System.String code, global::System.String name)
        {
            Code = code;
            Name = name;
        }

        /// <summary>
        /// Unique identifier of an ErpEntity
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpEntity
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(CoaDetails_ErpEntity_ErpEntity? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CoaDetails_ErpEntity_ErpEntity)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpFund_ErpFund : global::System.IEquatable<CoaDetails_ErpFund_ErpFund>, ICoaDetails_ErpFund_ErpFund
    {
        public CoaDetails_ErpFund_ErpFund(global::System.String code, global::System.String name)
        {
            Code = code;
            Name = name;
        }

        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(CoaDetails_ErpFund_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CoaDetails_ErpFund_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment : global::System.IEquatable<CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment>, ICoaDetails_ErpFinancialDepartment_ErpFinancialDepartment
    {
        public CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment(global::System.String code, global::System.String name, global::System.Boolean eligibleForUse)
        {
            Code = code;
            Name = name;
            EligibleForUse = eligibleForUse;
        }

        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Returns whether this ErpFinancialDepartment is valid to use on transactional documents for the given accounting date.  If not provided, the date will be defaulted to the current date.
        /// 
        /// To be eligible for use, the ErpFinancialDepartment must:
        /// * Be enabled
        /// * Not be summaryOnly
        /// * Have a startDate and endDate range which includes the given accountingDate
        /// </summary>
        public global::System.Boolean EligibleForUse { get; }

        public virtual global::System.Boolean Equals(CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && EligibleForUse == other.EligibleForUse;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * EligibleForUse.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// For clarity between the CoA Account segment and the current KFS Account, we will refer to the CoA segment as "Natural Account", a commonly used accounting term.
    /// 
    /// The (Natural) Account segment categorizes the nature of the transaction being recorded. The transaction is either revenue-producing, an expenditure, an asset that is owned, or a liability that is owed. Additionally, Account maintains Net Position for Entities and Funds.
    /// 
    /// (Natural) Account values will generally be shared across Financial Departments to provide consistency in operational and management reporting for UC Davis.
    /// 
    /// **FAU Value Comparison:**
    /// 
    /// The (Natural) Account segment most closely aligns with the KFS Object Code.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpAccount_ErpAccount : global::System.IEquatable<CoaDetails_ErpAccount_ErpAccount>, ICoaDetails_ErpAccount_ErpAccount
    {
        public CoaDetails_ErpAccount_ErpAccount(global::System.String code, global::System.String name)
        {
            Code = code;
            Name = name;
        }

        /// <summary>
        /// Unique identifier of an ErpAccount
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpAccount
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(CoaDetails_ErpAccount_ErpAccount? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CoaDetails_ErpAccount_ErpAccount)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The Purpose segment tracks the purpose of the transaction, such as NACUBO-defined functional expense classification and mission.
    /// 
    /// NACUBO classification data is utilized for far-reaching external reporting (e.g., institution ranking). This field is also essential for compliance with federal cost principles and financial statement reporting requiring expenditures be displayed by functional class.
    /// 
    /// **FAU Value Comparison:**
    /// 
    /// The Purpose segment most closely aligns with the HEFC (Higher Ed. Function Code) attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpPurpose_ErpPurpose : global::System.IEquatable<CoaDetails_ErpPurpose_ErpPurpose>, ICoaDetails_ErpPurpose_ErpPurpose
    {
        public CoaDetails_ErpPurpose_ErpPurpose(global::System.String code, global::System.String name)
        {
            Code = code;
            Name = name;
        }

        /// <summary>
        /// Unique identifier of an ErpPurpose
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpPurpose
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(CoaDetails_ErpPurpose_ErpPurpose? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CoaDetails_ErpPurpose_ErpPurpose)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetailsResult
    {
        /// <summary>
        /// Get a single ErpEntity by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.ICoaDetails_ErpEntity? ErpEntity { get; }

        /// <summary>
        /// Get a single ErpFund by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.ICoaDetails_ErpFund? ErpFund { get; }

        /// <summary>
        /// Get a single ErpFinancialDepartment by code.  Returns undefined if does not exist.
        /// </summary>
        public global::AggieEnterpriseApi.ICoaDetails_ErpFinancialDepartment? ErpFinancialDepartment { get; }

        /// <summary>
        /// Get a single ErpAccount by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.ICoaDetails_ErpAccount? ErpAccount { get; }

        /// <summary>
        /// Get a single ErpPurpose by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.ICoaDetails_ErpPurpose? ErpPurpose { get; }
    }

    /// <summary>
    /// The Entity segment identifies the major UC system organizational units. These units generally require their own complete, separately audited financial statements to comply with external, regulatory reporting requirements (e.g., external audits, tax reporting), which cannot achieve compliance by using the audited financial statements issued by the Office of the President. Entity, however, will also provide high level management and operational reports.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Entity level.
    /// 
    /// Entities at all levels have unique reporting and/or external auditing needs that can only be met with an Entity level designation (e.g., UC Davis Health).
    /// 
    /// **FAU Value Comparison:**
    /// The Entity segment most closely aligns with the KFS Chart (e.g. 3, H, L, P).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpEntity
    {
        /// <summary>
        /// Unique identifier of an ErpEntity
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpEntity
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// The Entity segment identifies the major UC system organizational units. These units generally require their own complete, separately audited financial statements to comply with external, regulatory reporting requirements (e.g., external audits, tax reporting), which cannot achieve compliance by using the audited financial statements issued by the Office of the President. Entity, however, will also provide high level management and operational reports.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Entity level.
    /// 
    /// Entities at all levels have unique reporting and/or external auditing needs that can only be met with an Entity level designation (e.g., UC Davis Health).
    /// 
    /// **FAU Value Comparison:**
    /// The Entity segment most closely aligns with the KFS Chart (e.g. 3, H, L, P).
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpEntity_ErpEntity : ICoaDetails_ErpEntity
    {
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpFund
    {
        /// <summary>
        /// Unique identifier of an ErpFund
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFund
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.
    /// 
    /// The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.
    /// 
    /// In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.
    /// 
    /// **FAU Value Comparison:**
    /// The Fund segment most closely aligns with the fund attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpFund_ErpFund : ICoaDetails_ErpFund
    {
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpFinancialDepartment
    {
        /// <summary>
        /// Unique identifier of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpFinancialDepartment
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Returns whether this ErpFinancialDepartment is valid to use on transactional documents for the given accounting date.  If not provided, the date will be defaulted to the current date.
        /// 
        /// To be eligible for use, the ErpFinancialDepartment must:
        /// * Be enabled
        /// * Not be summaryOnly
        /// * Have a startDate and endDate range which includes the given accountingDate
        /// </summary>
        public global::System.Boolean EligibleForUse { get; }
    }

    /// <summary>
    /// Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.
    /// 
    /// **Financial Departments have:**
    /// - An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)
    /// 
    /// - Identifiable, permanently funded employees and generally an allocation of physical space
    /// 
    /// **FAU Value Comparison:**
    /// Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.
    /// 
    /// **Access Roles: erp:reader-refdata**
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpFinancialDepartment_ErpFinancialDepartment : ICoaDetails_ErpFinancialDepartment
    {
    }

    /// <summary>
    /// For clarity between the CoA Account segment and the current KFS Account, we will refer to the CoA segment as "Natural Account", a commonly used accounting term.
    /// 
    /// The (Natural) Account segment categorizes the nature of the transaction being recorded. The transaction is either revenue-producing, an expenditure, an asset that is owned, or a liability that is owed. Additionally, Account maintains Net Position for Entities and Funds.
    /// 
    /// (Natural) Account values will generally be shared across Financial Departments to provide consistency in operational and management reporting for UC Davis.
    /// 
    /// **FAU Value Comparison:**
    /// 
    /// The (Natural) Account segment most closely aligns with the KFS Object Code.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpAccount
    {
        /// <summary>
        /// Unique identifier of an ErpAccount
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpAccount
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// For clarity between the CoA Account segment and the current KFS Account, we will refer to the CoA segment as "Natural Account", a commonly used accounting term.
    /// 
    /// The (Natural) Account segment categorizes the nature of the transaction being recorded. The transaction is either revenue-producing, an expenditure, an asset that is owned, or a liability that is owed. Additionally, Account maintains Net Position for Entities and Funds.
    /// 
    /// (Natural) Account values will generally be shared across Financial Departments to provide consistency in operational and management reporting for UC Davis.
    /// 
    /// **FAU Value Comparison:**
    /// 
    /// The (Natural) Account segment most closely aligns with the KFS Object Code.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpAccount_ErpAccount : ICoaDetails_ErpAccount
    {
    }

    /// <summary>
    /// The Purpose segment tracks the purpose of the transaction, such as NACUBO-defined functional expense classification and mission.
    /// 
    /// NACUBO classification data is utilized for far-reaching external reporting (e.g., institution ranking). This field is also essential for compliance with federal cost principles and financial statement reporting requiring expenditures be displayed by functional class.
    /// 
    /// **FAU Value Comparison:**
    /// 
    /// The Purpose segment most closely aligns with the HEFC (Higher Ed. Function Code) attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpPurpose
    {
        /// <summary>
        /// Unique identifier of an ErpPurpose
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Descriptive name of an ErpPurpose
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// The Purpose segment tracks the purpose of the transaction, such as NACUBO-defined functional expense classification and mission.
    /// 
    /// NACUBO classification data is utilized for far-reaching external reporting (e.g., institution ranking). This field is also essential for compliance with federal cost principles and financial statement reporting requiring expenditures be displayed by functional class.
    /// 
    /// **FAU Value Comparison:**
    /// 
    /// The Purpose segment most closely aligns with the HEFC (Higher Ed. Function Code) attribute of the KFS Account.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpPurpose_ErpPurpose : ICoaDetails_ErpPurpose
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class KfsConvertAccountResult : global::System.IEquatable<KfsConvertAccountResult>, IKfsConvertAccountResult
    {
        public KfsConvertAccountResult(global::AggieEnterpriseApi.IKfsConvertAccount_KfsConvertAccount kfsConvertAccount)
        {
            KfsConvertAccount = kfsConvertAccount;
        }

        /// <summary>
        /// Accepts a chart and account (and optionally a sub account and/or project code) which was converted as part of cutover and returns the cost center portion with matching GL or POET segments needed to record a transaction.  If no match is found when a sub account or project code is provided, the conversion will revert to only using the chart and account.  The attributes used for the returned converted values will be included in the response.
        /// 
        /// In the case of a POET segment response, an array of tasks will be returned.  The data conversion mapping does not contain that information.  At cutover, there will be only one task per project.  However, additional tasks will be added as part of use after go-live.
        /// </summary>
        public global::AggieEnterpriseApi.IKfsConvertAccount_KfsConvertAccount KfsConvertAccount { get; }

        public virtual global::System.Boolean Equals(KfsConvertAccountResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (KfsConvertAccount.Equals(other.KfsConvertAccount));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((KfsConvertAccountResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * KfsConvertAccount.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Return type when requesting conversion of a KFS Account to the Oracle costing segments.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class KfsConvertAccount_KfsConvertAccount_KfsConvertAccountOutput : global::System.IEquatable<KfsConvertAccount_KfsConvertAccount_KfsConvertAccountOutput>, IKfsConvertAccount_KfsConvertAccount_KfsConvertAccountOutput
    {
        public KfsConvertAccount_KfsConvertAccount_KfsConvertAccountOutput(global::System.Boolean mappingFound, global::AggieEnterpriseApi.IKfsConvertAccount_KfsConvertAccount_GlSegments? glSegments, global::AggieEnterpriseApi.IKfsConvertAccount_KfsConvertAccount_PpmSegments? ppmSegments)
        {
            MappingFound = mappingFound;
            GlSegments = glSegments;
            PpmSegments = ppmSegments;
        }

        /// <summary>
        /// Whether the account was found in the mapping table
        /// </summary>
        public global::System.Boolean MappingFound { get; }

        /// <summary>
        /// If a GL cost center, the segments which could be derived from the given chart-account.
        /// </summary>
        public global::AggieEnterpriseApi.IKfsConvertAccount_KfsConvertAccount_GlSegments? GlSegments { get; }

        /// <summary>
        /// If a POET cost center, the segments which could be derived from the given chart-account.
        /// </summary>
        public global::AggieEnterpriseApi.IKfsConvertAccount_KfsConvertAccount_PpmSegments? PpmSegments { get; }

        public virtual global::System.Boolean Equals(KfsConvertAccount_KfsConvertAccount_KfsConvertAccountOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (MappingFound == other.MappingFound) && ((GlSegments is null && other.GlSegments is null) || GlSegments != null && GlSegments.Equals(other.GlSegments)) && ((PpmSegments is null && other.PpmSegments is null) || PpmSegments != null && PpmSegments.Equals(other.PpmSegments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((KfsConvertAccount_KfsConvertAccount_KfsConvertAccountOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * MappingFound.GetHashCode();
                if (GlSegments != null)
                {
                    hash ^= 397 * GlSegments.GetHashCode();
                }

                if (PpmSegments != null)
                {
                    hash ^= 397 * PpmSegments.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Cost-center components of Oracle GL Segments which can be derived from the KFS Chart-Account-Sub Account-Project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class KfsConvertAccount_KfsConvertAccount_GlSegments_GlCostCenterSegments : global::System.IEquatable<KfsConvertAccount_KfsConvertAccount_GlSegments_GlCostCenterSegments>, IKfsConvertAccount_KfsConvertAccount_GlSegments_GlCostCenterSegments
    {
        public KfsConvertAccount_KfsConvertAccount_GlSegments_GlCostCenterSegments(global::System.String entity, global::System.String fund, global::System.String department, global::System.String? purpose, global::System.String? project, global::System.String? program, global::System.String? activity)
        {
            Entity = entity;
            Fund = fund;
            Department = department;
            Purpose = purpose;
            Project = project;
            Program = program;
            Activity = activity;
        }

        public global::System.String Entity { get; }

        public global::System.String Fund { get; }

        public global::System.String Department { get; }

        public global::System.String? Purpose { get; }

        public global::System.String? Project { get; }

        public global::System.String? Program { get; }

        public global::System.String? Activity { get; }

        public virtual global::System.Boolean Equals(KfsConvertAccount_KfsConvertAccount_GlSegments_GlCostCenterSegments? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Entity.Equals(other.Entity)) && Fund.Equals(other.Fund) && Department.Equals(other.Department) && ((Purpose is null && other.Purpose is null) || Purpose != null && Purpose.Equals(other.Purpose)) && ((Project is null && other.Project is null) || Project != null && Project.Equals(other.Project)) && ((Program is null && other.Program is null) || Program != null && Program.Equals(other.Program)) && ((Activity is null && other.Activity is null) || Activity != null && Activity.Equals(other.Activity));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((KfsConvertAccount_KfsConvertAccount_GlSegments_GlCostCenterSegments)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Entity.GetHashCode();
                hash ^= 397 * Fund.GetHashCode();
                hash ^= 397 * Department.GetHashCode();
                if (Purpose != null)
                {
                    hash ^= 397 * Purpose.GetHashCode();
                }

                if (Project != null)
                {
                    hash ^= 397 * Project.GetHashCode();
                }

                if (Program != null)
                {
                    hash ^= 397 * Program.GetHashCode();
                }

                if (Activity != null)
                {
                    hash ^= 397 * Activity.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Cost-center components of the POET Segments which can be derived from the KFS Chart-Account-Sub Account-Project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class KfsConvertAccount_KfsConvertAccount_PpmSegments_PpmCostCenterSegments : global::System.IEquatable<KfsConvertAccount_KfsConvertAccount_PpmSegments_PpmCostCenterSegments>, IKfsConvertAccount_KfsConvertAccount_PpmSegments_PpmCostCenterSegments
    {
        public KfsConvertAccount_KfsConvertAccount_PpmSegments_PpmCostCenterSegments(global::System.String project, global::System.String organization, global::System.Collections.Generic.IReadOnlyList<global::System.String> task, global::System.String? award, global::System.String? fundingSource)
        {
            Project = project;
            Organization = organization;
            Task = task;
            Award = award;
            FundingSource = fundingSource;
        }

        public global::System.String Project { get; }

        public global::System.String Organization { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Task { get; }

        public global::System.String? Award { get; }

        public global::System.String? FundingSource { get; }

        public virtual global::System.Boolean Equals(KfsConvertAccount_KfsConvertAccount_PpmSegments_PpmCostCenterSegments? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Project.Equals(other.Project)) && Organization.Equals(other.Organization) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Task, other.Task) && ((Award is null && other.Award is null) || Award != null && Award.Equals(other.Award)) && ((FundingSource is null && other.FundingSource is null) || FundingSource != null && FundingSource.Equals(other.FundingSource));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((KfsConvertAccount_KfsConvertAccount_PpmSegments_PpmCostCenterSegments)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Project.GetHashCode();
                hash ^= 397 * Organization.GetHashCode();
                foreach (var Task_elm in Task)
                {
                    hash ^= 397 * Task_elm.GetHashCode();
                }

                if (Award != null)
                {
                    hash ^= 397 * Award.GetHashCode();
                }

                if (FundingSource != null)
                {
                    hash ^= 397 * FundingSource.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IKfsConvertAccountResult
    {
        /// <summary>
        /// Accepts a chart and account (and optionally a sub account and/or project code) which was converted as part of cutover and returns the cost center portion with matching GL or POET segments needed to record a transaction.  If no match is found when a sub account or project code is provided, the conversion will revert to only using the chart and account.  The attributes used for the returned converted values will be included in the response.
        /// 
        /// In the case of a POET segment response, an array of tasks will be returned.  The data conversion mapping does not contain that information.  At cutover, there will be only one task per project.  However, additional tasks will be added as part of use after go-live.
        /// </summary>
        public global::AggieEnterpriseApi.IKfsConvertAccount_KfsConvertAccount KfsConvertAccount { get; }
    }

    /// <summary>
    /// Return type when requesting conversion of a KFS Account to the Oracle costing segments.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IKfsConvertAccount_KfsConvertAccount
    {
        /// <summary>
        /// Whether the account was found in the mapping table
        /// </summary>
        public global::System.Boolean MappingFound { get; }

        /// <summary>
        /// If a GL cost center, the segments which could be derived from the given chart-account.
        /// </summary>
        public global::AggieEnterpriseApi.IKfsConvertAccount_KfsConvertAccount_GlSegments? GlSegments { get; }

        /// <summary>
        /// If a POET cost center, the segments which could be derived from the given chart-account.
        /// </summary>
        public global::AggieEnterpriseApi.IKfsConvertAccount_KfsConvertAccount_PpmSegments? PpmSegments { get; }
    }

    /// <summary>
    /// Return type when requesting conversion of a KFS Account to the Oracle costing segments.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IKfsConvertAccount_KfsConvertAccount_KfsConvertAccountOutput : IKfsConvertAccount_KfsConvertAccount
    {
    }

    /// <summary>
    /// Cost-center components of Oracle GL Segments which can be derived from the KFS Chart-Account-Sub Account-Project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IKfsConvertAccount_KfsConvertAccount_GlSegments
    {
        public global::System.String Entity { get; }

        public global::System.String Fund { get; }

        public global::System.String Department { get; }

        public global::System.String? Purpose { get; }

        public global::System.String? Project { get; }

        public global::System.String? Program { get; }

        public global::System.String? Activity { get; }
    }

    /// <summary>
    /// Cost-center components of Oracle GL Segments which can be derived from the KFS Chart-Account-Sub Account-Project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IKfsConvertAccount_KfsConvertAccount_GlSegments_GlCostCenterSegments : IKfsConvertAccount_KfsConvertAccount_GlSegments
    {
    }

    /// <summary>
    /// Cost-center components of the POET Segments which can be derived from the KFS Chart-Account-Sub Account-Project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IKfsConvertAccount_KfsConvertAccount_PpmSegments
    {
        public global::System.String Project { get; }

        public global::System.String Organization { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String> Task { get; }

        public global::System.String? Award { get; }

        public global::System.String? FundingSource { get; }
    }

    /// <summary>
    /// Cost-center components of the POET Segments which can be derived from the KFS Chart-Account-Sub Account-Project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IKfsConvertAccount_KfsConvertAccount_PpmSegments_PpmCostCenterSegments : IKfsConvertAccount_KfsConvertAccount_PpmSegments
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidateResult : global::System.IEquatable<PpmStringSegmentsValidateResult>, IPpmStringSegmentsValidateResult
    {
        public PpmStringSegmentsValidateResult(global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate ppmStringSegmentsValidate)
        {
            PpmStringSegmentsValidate = ppmStringSegmentsValidate;
        }

        /// <summary>
        /// Validates that the given PPM chartstring is most likely valid for posting
        /// to the Oracle ERP PPM Module sub-ledger.  Individual non-blank elements will be checked
        /// for current validity.
        /// 
        /// If no date is passed, today's date will be assumed.
        /// 
        /// This operation will return a fully populated set of segments.
        /// 
        /// This operation will return the validation result and the segments as parsed out into their component fields.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate PpmStringSegmentsValidate { get; }

        public virtual global::System.Boolean Equals(PpmStringSegmentsValidateResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PpmStringSegmentsValidate.Equals(other.PpmStringSegmentsValidate));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmStringSegmentsValidateResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PpmStringSegmentsValidate.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Return data structure when validating a set of PPM segment values.
    /// 
    /// The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.
    /// 
    /// The operation will complete any missing segments with their defaults and return them populated in the "segments" property.  This property is structured such that they could be included as accounting line or distribution data in other operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput : global::System.IEquatable<PpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput>, IPpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput
    {
        public PpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput(global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse validationResponse, global::System.String? segmentString)
        {
            ValidationResponse = validationResponse;
            SegmentString = segmentString;
        }

        /// <summary>
        /// Validation result and error messages, if any.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse ValidationResponse { get; }

        /// <summary>
        /// PPM segment string matching the segments object.  Only populated if the validation passes.
        /// </summary>
        public global::System.String? SegmentString { get; }

        public virtual global::System.Boolean Equals(PpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ValidationResponse.Equals(other.ValidationResponse)) && ((SegmentString is null && other.SegmentString is null) || SegmentString != null && SegmentString.Equals(other.SegmentString));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ValidationResponse.GetHashCode();
                if (SegmentString != null)
                {
                    hash ^= 397 * SegmentString.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse : global::System.IEquatable<PpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse>, IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse
    {
        public PpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse(global::System.Boolean valid, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties)
        {
            Valid = valid;
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
        }

        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }

        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        public virtual global::System.Boolean Equals(PpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Valid == other.Valid) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MessageProperties, other.MessageProperties);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Valid.GetHashCode();
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (MessageProperties != null)
                {
                    foreach (var MessageProperties_elm in MessageProperties)
                    {
                        hash ^= 397 * MessageProperties_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmStringSegmentsValidateResult
    {
        /// <summary>
        /// Validates that the given PPM chartstring is most likely valid for posting
        /// to the Oracle ERP PPM Module sub-ledger.  Individual non-blank elements will be checked
        /// for current validity.
        /// 
        /// If no date is passed, today's date will be assumed.
        /// 
        /// This operation will return a fully populated set of segments.
        /// 
        /// This operation will return the validation result and the segments as parsed out into their component fields.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate PpmStringSegmentsValidate { get; }
    }

    /// <summary>
    /// Return data structure when validating a set of PPM segment values.
    /// 
    /// The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.
    /// 
    /// The operation will complete any missing segments with their defaults and return them populated in the "segments" property.  This property is structured such that they could be included as accounting line or distribution data in other operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmStringSegmentsValidate_PpmStringSegmentsValidate
    {
        /// <summary>
        /// Validation result and error messages, if any.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse ValidationResponse { get; }

        /// <summary>
        /// PPM segment string matching the segments object.  Only populated if the validation passes.
        /// </summary>
        public global::System.String? SegmentString { get; }
    }

    /// <summary>
    /// Return data structure when validating a set of PPM segment values.
    /// 
    /// The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.
    /// 
    /// The operation will complete any missing segments with their defaults and return them populated in the "segments" property.  This property is structured such that they could be included as accounting line or distribution data in other operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput : IPpmStringSegmentsValidate_PpmStringSegmentsValidate
    {
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse
    {
        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }

        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse : IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateResult : global::System.IEquatable<PpmSegmentsValidateResult>, IPpmSegmentsValidateResult
    {
        public PpmSegmentsValidateResult(global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate ppmSegmentsValidate)
        {
            PpmSegmentsValidate = ppmSegmentsValidate;
        }

        /// <summary>
        /// Validates that the given set of PPM segments are most likely valid for posting
        /// to the Oracle ERP PPM Module sub-ledger.  Individual non-blank elements will be checked
        /// for current validity.
        /// 
        /// If no date is passed, today's date will be assumed.
        /// 
        /// This operation will return a fully populated set of segments.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate PpmSegmentsValidate { get; }

        public virtual global::System.Boolean Equals(PpmSegmentsValidateResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PpmSegmentsValidate.Equals(other.PpmSegmentsValidate));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmSegmentsValidateResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PpmSegmentsValidate.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Return data structure when validating a set of PPM segment values.
    /// 
    /// The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.
    /// 
    /// The operation will complete any missing segments with their defaults and return them populated in the "segments" property.  This property is structured such that they could be included as accounting line or distribution data in other operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput : global::System.IEquatable<PpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput>, IPpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput
    {
        public PpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput(global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse validationResponse, global::System.String? segmentString)
        {
            ValidationResponse = validationResponse;
            SegmentString = segmentString;
        }

        /// <summary>
        /// Validation result and error messages, if any.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse ValidationResponse { get; }

        /// <summary>
        /// PPM segment string matching the segments object.  Only populated if the validation passes.
        /// </summary>
        public global::System.String? SegmentString { get; }

        public virtual global::System.Boolean Equals(PpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ValidationResponse.Equals(other.ValidationResponse)) && ((SegmentString is null && other.SegmentString is null) || SegmentString != null && SegmentString.Equals(other.SegmentString));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ValidationResponse.GetHashCode();
                if (SegmentString != null)
                {
                    hash ^= 397 * SegmentString.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse : global::System.IEquatable<PpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse>, IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse
    {
        public PpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse(global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties, global::System.Boolean valid)
        {
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
            Valid = valid;
        }

        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }

        public virtual global::System.Boolean Equals(PpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MessageProperties, other.MessageProperties) && Valid == other.Valid;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (MessageProperties != null)
                {
                    foreach (var MessageProperties_elm in MessageProperties)
                    {
                        hash ^= 397 * MessageProperties_elm.GetHashCode();
                    }
                }

                hash ^= 397 * Valid.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmSegmentsValidateResult
    {
        /// <summary>
        /// Validates that the given set of PPM segments are most likely valid for posting
        /// to the Oracle ERP PPM Module sub-ledger.  Individual non-blank elements will be checked
        /// for current validity.
        /// 
        /// If no date is passed, today's date will be assumed.
        /// 
        /// This operation will return a fully populated set of segments.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate PpmSegmentsValidate { get; }
    }

    /// <summary>
    /// Return data structure when validating a set of PPM segment values.
    /// 
    /// The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.
    /// 
    /// The operation will complete any missing segments with their defaults and return them populated in the "segments" property.  This property is structured such that they could be included as accounting line or distribution data in other operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmSegmentsValidate_PpmSegmentsValidate
    {
        /// <summary>
        /// Validation result and error messages, if any.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse ValidationResponse { get; }

        /// <summary>
        /// PPM segment string matching the segments object.  Only populated if the validation passes.
        /// </summary>
        public global::System.String? SegmentString { get; }
    }

    /// <summary>
    /// Return data structure when validating a set of PPM segment values.
    /// 
    /// The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.
    /// 
    /// The operation will complete any missing segments with their defaults and return them populated in the "segments" property.  This property is structured such that they could be included as accounting line or distribution data in other operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput : IPpmSegmentsValidate_PpmSegmentsValidate
    {
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse
    {
        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse : IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskByProjectNumberAndTaskNumberResult : global::System.IEquatable<PpmTaskByProjectNumberAndTaskNumberResult>, IPpmTaskByProjectNumberAndTaskNumberResult
    {
        public PpmTaskByProjectNumberAndTaskNumberResult(global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber? ppmTaskByProjectNumberAndTaskNumber)
        {
            PpmTaskByProjectNumberAndTaskNumber = ppmTaskByProjectNumberAndTaskNumber;
        }

        /// <summary>
        /// Gets PpmTasks by projectNumber and taskNumber.  Returns undefined if not found
        /// </summary>
        public global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber? PpmTaskByProjectNumberAndTaskNumber { get; }

        public virtual global::System.Boolean Equals(PpmTaskByProjectNumberAndTaskNumberResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PpmTaskByProjectNumberAndTaskNumber is null && other.PpmTaskByProjectNumberAndTaskNumber is null) || PpmTaskByProjectNumberAndTaskNumber != null && PpmTaskByProjectNumberAndTaskNumber.Equals(other.PpmTaskByProjectNumberAndTaskNumber)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmTaskByProjectNumberAndTaskNumberResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PpmTaskByProjectNumberAndTaskNumber != null)
                {
                    hash ^= 397 * PpmTaskByProjectNumberAndTaskNumber.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The Task identifies the activities used to further breakdown a PPM project. Every project MUST have at least one Task.  The number of tasks will vary by type of project.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts in the General Ledger:**
    /// 
    /// * The Task value will NOT roll up to the Chart of Accounts. Task values will only be used in the PPM module.
    /// * Internal rules within the Oracle PPM module will be used to map the task to components of the GL Chart of Accounts which are not directly mapped to other components of the POET(AF) segments.
    /// 
    /// **Examples:**
    /// 
    /// * Design
    /// * Construction
    /// * Data Gathering & Analysis
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTask : global::System.IEquatable<PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTask>, IPpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTask
    {
        public PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTask(global::System.String taskNumber, global::System.String name, global::System.Boolean billable, global::System.Boolean chargeable, global::System.Boolean eligibleForUse, global::System.String? glPostingProgramCode, global::System.String? glPostingPurposeCode, global::System.String? glPostingFundCode, global::System.String? glPostingActivityCode)
        {
            TaskNumber = taskNumber;
            Name = name;
            Billable = billable;
            Chargeable = chargeable;
            EligibleForUse = eligibleForUse;
            GlPostingProgramCode = glPostingProgramCode;
            GlPostingPurposeCode = glPostingPurposeCode;
            GlPostingFundCode = glPostingFundCode;
            GlPostingActivityCode = glPostingActivityCode;
        }

        /// <summary>
        /// Task Number: The number of a task.
        /// </summary>
        public global::System.String TaskNumber { get; }

        /// <summary>
        /// Task Name: The name of the task. A task is a subdivision of the project work. Each project can have a set of top tasks and a hierarchy of subtasks below each top task.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Billable: Indicates that transactions charged to that task can be billed to customers.
        /// </summary>
        public global::System.Boolean Billable { get; }

        /// <summary>
        /// Chargeable: Indicates that something is eligible to be charged to a task.
        /// </summary>
        public global::System.Boolean Chargeable { get; }

        /// <summary>
        /// Returns whether this PpmTask is valid to use on transactional documents for the given accounting date.  If not provided, the date will be defaulted to the current date.
        /// 
        /// To be eligible for use, the PpmTask must:
        /// * Be chargeable
        /// * Be a lowestLevelTask
        /// * Have a taskStartDate and taskFinishDate range which includes the given accountingDate
        /// </summary>
        public global::System.Boolean EligibleForUse { get; }

        /// <summary>
        /// GL Program used during subledger accounting jobs to post GL entries when costs are recorded against this task.
        /// </summary>
        public global::System.String? GlPostingProgramCode { get; }

        /// <summary>
        /// GL Purpose  used during subledger accounting jobs to post GL entries when costs are recorded against this task.
        /// </summary>
        public global::System.String? GlPostingPurposeCode { get; }

        /// <summary>
        /// GL Fund used during subledger accounting jobs to post GL entries when costs are recorded against this task.
        /// </summary>
        public global::System.String? GlPostingFundCode { get; }

        /// <summary>
        /// GL Activity used during subledger accounting jobs to post GL entries when costs are recorded against this task.
        /// </summary>
        public global::System.String? GlPostingActivityCode { get; }

        public virtual global::System.Boolean Equals(PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTask? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TaskNumber.Equals(other.TaskNumber)) && Name.Equals(other.Name) && Billable == other.Billable && Chargeable == other.Chargeable && EligibleForUse == other.EligibleForUse && ((GlPostingProgramCode is null && other.GlPostingProgramCode is null) || GlPostingProgramCode != null && GlPostingProgramCode.Equals(other.GlPostingProgramCode)) && ((GlPostingPurposeCode is null && other.GlPostingPurposeCode is null) || GlPostingPurposeCode != null && GlPostingPurposeCode.Equals(other.GlPostingPurposeCode)) && ((GlPostingFundCode is null && other.GlPostingFundCode is null) || GlPostingFundCode != null && GlPostingFundCode.Equals(other.GlPostingFundCode)) && ((GlPostingActivityCode is null && other.GlPostingActivityCode is null) || GlPostingActivityCode != null && GlPostingActivityCode.Equals(other.GlPostingActivityCode));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTask)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TaskNumber.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Billable.GetHashCode();
                hash ^= 397 * Chargeable.GetHashCode();
                hash ^= 397 * EligibleForUse.GetHashCode();
                if (GlPostingProgramCode != null)
                {
                    hash ^= 397 * GlPostingProgramCode.GetHashCode();
                }

                if (GlPostingPurposeCode != null)
                {
                    hash ^= 397 * GlPostingPurposeCode.GetHashCode();
                }

                if (GlPostingFundCode != null)
                {
                    hash ^= 397 * GlPostingFundCode.GetHashCode();
                }

                if (GlPostingActivityCode != null)
                {
                    hash ^= 397 * GlPostingActivityCode.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmTaskByProjectNumberAndTaskNumberResult
    {
        /// <summary>
        /// Gets PpmTasks by projectNumber and taskNumber.  Returns undefined if not found
        /// </summary>
        public global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber? PpmTaskByProjectNumberAndTaskNumber { get; }
    }

    /// <summary>
    /// The Task identifies the activities used to further breakdown a PPM project. Every project MUST have at least one Task.  The number of tasks will vary by type of project.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts in the General Ledger:**
    /// 
    /// * The Task value will NOT roll up to the Chart of Accounts. Task values will only be used in the PPM module.
    /// * Internal rules within the Oracle PPM module will be used to map the task to components of the GL Chart of Accounts which are not directly mapped to other components of the POET(AF) segments.
    /// 
    /// **Examples:**
    /// 
    /// * Design
    /// * Construction
    /// * Data Gathering & Analysis
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber
    {
        /// <summary>
        /// Task Number: The number of a task.
        /// </summary>
        public global::System.String TaskNumber { get; }

        /// <summary>
        /// Task Name: The name of the task. A task is a subdivision of the project work. Each project can have a set of top tasks and a hierarchy of subtasks below each top task.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Billable: Indicates that transactions charged to that task can be billed to customers.
        /// </summary>
        public global::System.Boolean Billable { get; }

        /// <summary>
        /// Chargeable: Indicates that something is eligible to be charged to a task.
        /// </summary>
        public global::System.Boolean Chargeable { get; }

        /// <summary>
        /// Returns whether this PpmTask is valid to use on transactional documents for the given accounting date.  If not provided, the date will be defaulted to the current date.
        /// 
        /// To be eligible for use, the PpmTask must:
        /// * Be chargeable
        /// * Be a lowestLevelTask
        /// * Have a taskStartDate and taskFinishDate range which includes the given accountingDate
        /// </summary>
        public global::System.Boolean EligibleForUse { get; }

        /// <summary>
        /// GL Program used during subledger accounting jobs to post GL entries when costs are recorded against this task.
        /// </summary>
        public global::System.String? GlPostingProgramCode { get; }

        /// <summary>
        /// GL Purpose  used during subledger accounting jobs to post GL entries when costs are recorded against this task.
        /// </summary>
        public global::System.String? GlPostingPurposeCode { get; }

        /// <summary>
        /// GL Fund used during subledger accounting jobs to post GL entries when costs are recorded against this task.
        /// </summary>
        public global::System.String? GlPostingFundCode { get; }

        /// <summary>
        /// GL Activity used during subledger accounting jobs to post GL entries when costs are recorded against this task.
        /// </summary>
        public global::System.String? GlPostingActivityCode { get; }
    }

    /// <summary>
    /// The Task identifies the activities used to further breakdown a PPM project. Every project MUST have at least one Task.  The number of tasks will vary by type of project.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts in the General Ledger:**
    /// 
    /// * The Task value will NOT roll up to the Chart of Accounts. Task values will only be used in the PPM module.
    /// * Internal rules within the Oracle PPM module will be used to map the task to components of the GL Chart of Accounts which are not directly mapped to other components of the POET(AF) segments.
    /// 
    /// **Examples:**
    /// 
    /// * Design
    /// * Construction
    /// * Data Gathering & Analysis
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTask : IPpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionCreateResult : global::System.IEquatable<ScmPurchaseRequisitionCreateResult>, IScmPurchaseRequisitionCreateResult
    {
        public ScmPurchaseRequisitionCreateResult(global::AggieEnterpriseApi.IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate scmPurchaseRequisitionCreate)
        {
            ScmPurchaseRequisitionCreate = scmPurchaseRequisitionCreate;
        }

        /// <summary>
        /// Requests that a Purchase Requisition be uploaded to Oracle.
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate ScmPurchaseRequisitionCreate { get; }

        public virtual global::System.Boolean Equals(ScmPurchaseRequisitionCreateResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ScmPurchaseRequisitionCreate.Equals(other.ScmPurchaseRequisitionCreate));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchaseRequisitionCreateResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ScmPurchaseRequisitionCreate.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Output type for ScmPurchaseRequisition creation and follow-up status updates.
    /// 
    /// Contains the overall request status.  After a successful creation of the document, will also contain the Oracle Financials assigned ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionRequestStatusOutput : global::System.IEquatable<ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionRequestStatusOutput>, IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionRequestStatusOutput
    {
        public ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionRequestStatusOutput(global::AggieEnterpriseApi.IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus requestStatus, global::AggieEnterpriseApi.IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults? validationResults)
        {
            RequestStatus = requestStatus;
            ValidationResults = validationResults;
        }

        /// <summary>
        /// Status of the action request overall.
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus RequestStatus { get; }

        /// <summary>
        /// Validation errors of payload data
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults? ValidationResults { get; }

        public virtual global::System.Boolean Equals(ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionRequestStatusOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RequestStatus.Equals(other.RequestStatus)) && ((ValidationResults is null && other.ValidationResults is null) || ValidationResults != null && ValidationResults.Equals(other.ValidationResults));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionRequestStatusOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RequestStatus.GetHashCode();
                if (ValidationResults != null)
                {
                    hash ^= 397 * ValidationResults.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Fields common to all action status requests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus_ActionRequestStatus : global::System.IEquatable<ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus_ActionRequestStatus>, IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus_ActionRequestStatus
    {
        public ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus_ActionRequestStatus(global::System.Guid? requestId, global::AggieEnterpriseApi.RequestStatus requestStatus, global::System.DateTimeOffset? processedDateTime, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages)
        {
            RequestId = requestId;
            RequestStatus = requestStatus;
            ProcessedDateTime = processedDateTime;
            ErrorMessages = errorMessages;
        }

        /// <summary>
        /// Unique identifier assigned to the request
        /// </summary>
        public global::System.Guid? RequestId { get; }

        public global::AggieEnterpriseApi.RequestStatus RequestStatus { get; }

        /// <summary>
        /// When the request was processed by the ERP system
        /// </summary>
        public global::System.DateTimeOffset? ProcessedDateTime { get; }

        /// <summary>
        /// Error information if the request failed during processing.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public virtual global::System.Boolean Equals(ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus_ActionRequestStatus? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((RequestId is null && other.RequestId is null) || RequestId != null && RequestId.Equals(other.RequestId))) && RequestStatus.Equals(other.RequestStatus) && ((ProcessedDateTime is null && other.ProcessedDateTime is null) || ProcessedDateTime != null && ProcessedDateTime.Equals(other.ProcessedDateTime)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus_ActionRequestStatus)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (RequestId != null)
                {
                    hash ^= 397 * RequestId.GetHashCode();
                }

                hash ^= 397 * RequestStatus.GetHashCode();
                if (ProcessedDateTime != null)
                {
                    hash ^= 397 * ProcessedDateTime.GetHashCode();
                }

                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults_ValidationResponse : global::System.IEquatable<ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults_ValidationResponse>, IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults_ValidationResponse
    {
        public ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults_ValidationResponse(global::System.Boolean valid, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties)
        {
            Valid = valid;
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
        }

        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }

        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        public virtual global::System.Boolean Equals(ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Valid == other.Valid) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MessageProperties, other.MessageProperties);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Valid.GetHashCode();
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (MessageProperties != null)
                {
                    foreach (var MessageProperties_elm in MessageProperties)
                    {
                        hash ^= 397 * MessageProperties_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionCreateResult
    {
        /// <summary>
        /// Requests that a Purchase Requisition be uploaded to Oracle.
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate ScmPurchaseRequisitionCreate { get; }
    }

    /// <summary>
    /// Output type for ScmPurchaseRequisition creation and follow-up status updates.
    /// 
    /// Contains the overall request status.  After a successful creation of the document, will also contain the Oracle Financials assigned ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate
    {
        /// <summary>
        /// Status of the action request overall.
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus RequestStatus { get; }

        /// <summary>
        /// Validation errors of payload data
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults? ValidationResults { get; }
    }

    /// <summary>
    /// Output type for ScmPurchaseRequisition creation and follow-up status updates.
    /// 
    /// Contains the overall request status.  After a successful creation of the document, will also contain the Oracle Financials assigned ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionRequestStatusOutput : IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate
    {
    }

    /// <summary>
    /// Fields common to all action status requests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus
    {
        /// <summary>
        /// Unique identifier assigned to the request
        /// </summary>
        public global::System.Guid? RequestId { get; }

        public global::AggieEnterpriseApi.RequestStatus RequestStatus { get; }

        /// <summary>
        /// When the request was processed by the ERP system
        /// </summary>
        public global::System.DateTimeOffset? ProcessedDateTime { get; }

        /// <summary>
        /// Error information if the request failed during processing.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }
    }

    /// <summary>
    /// Fields common to all action status requests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus_ActionRequestStatus : IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus
    {
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults
    {
        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }

        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults_ValidationResponse : IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionRequestStatusResult : global::System.IEquatable<ScmPurchaseRequisitionRequestStatusResult>, IScmPurchaseRequisitionRequestStatusResult
    {
        public ScmPurchaseRequisitionRequestStatusResult(global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus? scmPurchaseRequisitionRequestStatus)
        {
            ScmPurchaseRequisitionRequestStatus = scmPurchaseRequisitionRequestStatus;
        }

        /// <summary>
        /// Get the status of a previously submitted Purchase Requisition request by the API-assigned request ID.
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus? ScmPurchaseRequisitionRequestStatus { get; }

        public virtual global::System.Boolean Equals(ScmPurchaseRequisitionRequestStatusResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ScmPurchaseRequisitionRequestStatus is null && other.ScmPurchaseRequisitionRequestStatus is null) || ScmPurchaseRequisitionRequestStatus != null && ScmPurchaseRequisitionRequestStatus.Equals(other.ScmPurchaseRequisitionRequestStatus)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchaseRequisitionRequestStatusResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ScmPurchaseRequisitionRequestStatus != null)
                {
                    hash ^= 397 * ScmPurchaseRequisitionRequestStatus.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Output type for ScmPurchaseRequisition creation and follow-up status updates.
    /// 
    /// Contains the overall request status.  After a successful creation of the document, will also contain the Oracle Financials assigned ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatusOutput : global::System.IEquatable<ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatusOutput>, IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatusOutput
    {
        public ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatusOutput(global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus requestStatus, global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults? validationResults)
        {
            RequestStatus = requestStatus;
            ValidationResults = validationResults;
        }

        /// <summary>
        /// Status of the action request overall.
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus RequestStatus { get; }

        /// <summary>
        /// Validation errors of payload data
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults? ValidationResults { get; }

        public virtual global::System.Boolean Equals(ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatusOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RequestStatus.Equals(other.RequestStatus)) && ((ValidationResults is null && other.ValidationResults is null) || ValidationResults != null && ValidationResults.Equals(other.ValidationResults));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatusOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RequestStatus.GetHashCode();
                if (ValidationResults != null)
                {
                    hash ^= 397 * ValidationResults.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Fields common to all action status requests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus_ActionRequestStatus : global::System.IEquatable<ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus_ActionRequestStatus>, IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus_ActionRequestStatus
    {
        public ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus_ActionRequestStatus(global::System.Guid? requestId, global::System.String consumerTrackingId, global::System.String consumerReferenceId, global::System.String? consumerNotes, global::System.DateTimeOffset requestDateTime, global::AggieEnterpriseApi.RequestStatus requestStatus, global::System.DateTimeOffset lastStatusDateTime, global::System.DateTimeOffset? processedDateTime, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages)
        {
            RequestId = requestId;
            ConsumerTrackingId = consumerTrackingId;
            ConsumerReferenceId = consumerReferenceId;
            ConsumerNotes = consumerNotes;
            RequestDateTime = requestDateTime;
            RequestStatus = requestStatus;
            LastStatusDateTime = lastStatusDateTime;
            ProcessedDateTime = processedDateTime;
            ErrorMessages = errorMessages;
        }

        /// <summary>
        /// Unique identifier assigned to the request
        /// </summary>
        public global::System.Guid? RequestId { get; }

        /// <summary>
        /// Identifier provided by the consumer to track requests internally.  It is recommended that this be a globally unique identfier tracked in their system.  Can be used to match up data in the caller's system.
        /// </summary>
        public global::System.String ConsumerTrackingId { get; }

        /// <summary>
        /// Identifier provided by the consumer which usually references the source record within their system.  Does not need to be unique.
        /// </summary>
        public global::System.String ConsumerReferenceId { get; }

        /// <summary>
        /// Any notes to include with the request, this is stored as metadata to provide context to the request.
        /// </summary>
        public global::System.String? ConsumerNotes { get; }

        public global::System.DateTimeOffset RequestDateTime { get; }

        public global::AggieEnterpriseApi.RequestStatus RequestStatus { get; }

        /// <summary>
        /// When the status last changed
        /// </summary>
        public global::System.DateTimeOffset LastStatusDateTime { get; }

        /// <summary>
        /// When the request was processed by the ERP system
        /// </summary>
        public global::System.DateTimeOffset? ProcessedDateTime { get; }

        /// <summary>
        /// Error information if the request failed during processing.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public virtual global::System.Boolean Equals(ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus_ActionRequestStatus? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((RequestId is null && other.RequestId is null) || RequestId != null && RequestId.Equals(other.RequestId))) && ConsumerTrackingId.Equals(other.ConsumerTrackingId) && ConsumerReferenceId.Equals(other.ConsumerReferenceId) && ((ConsumerNotes is null && other.ConsumerNotes is null) || ConsumerNotes != null && ConsumerNotes.Equals(other.ConsumerNotes)) && RequestDateTime.Equals(other.RequestDateTime) && RequestStatus.Equals(other.RequestStatus) && LastStatusDateTime.Equals(other.LastStatusDateTime) && ((ProcessedDateTime is null && other.ProcessedDateTime is null) || ProcessedDateTime != null && ProcessedDateTime.Equals(other.ProcessedDateTime)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus_ActionRequestStatus)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (RequestId != null)
                {
                    hash ^= 397 * RequestId.GetHashCode();
                }

                hash ^= 397 * ConsumerTrackingId.GetHashCode();
                hash ^= 397 * ConsumerReferenceId.GetHashCode();
                if (ConsumerNotes != null)
                {
                    hash ^= 397 * ConsumerNotes.GetHashCode();
                }

                hash ^= 397 * RequestDateTime.GetHashCode();
                hash ^= 397 * RequestStatus.GetHashCode();
                hash ^= 397 * LastStatusDateTime.GetHashCode();
                if (ProcessedDateTime != null)
                {
                    hash ^= 397 * ProcessedDateTime.GetHashCode();
                }

                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults_ValidationResponse : global::System.IEquatable<ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults_ValidationResponse>, IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults_ValidationResponse
    {
        public ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults_ValidationResponse(global::System.Boolean valid, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties)
        {
            Valid = valid;
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
        }

        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }

        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        public virtual global::System.Boolean Equals(ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Valid == other.Valid) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MessageProperties, other.MessageProperties);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Valid.GetHashCode();
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (MessageProperties != null)
                {
                    foreach (var MessageProperties_elm in MessageProperties)
                    {
                        hash ^= 397 * MessageProperties_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionRequestStatusResult
    {
        /// <summary>
        /// Get the status of a previously submitted Purchase Requisition request by the API-assigned request ID.
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus? ScmPurchaseRequisitionRequestStatus { get; }
    }

    /// <summary>
    /// Output type for ScmPurchaseRequisition creation and follow-up status updates.
    /// 
    /// Contains the overall request status.  After a successful creation of the document, will also contain the Oracle Financials assigned ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus
    {
        /// <summary>
        /// Status of the action request overall.
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus RequestStatus { get; }

        /// <summary>
        /// Validation errors of payload data
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults? ValidationResults { get; }
    }

    /// <summary>
    /// Output type for ScmPurchaseRequisition creation and follow-up status updates.
    /// 
    /// Contains the overall request status.  After a successful creation of the document, will also contain the Oracle Financials assigned ID.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatusOutput : IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus
    {
    }

    /// <summary>
    /// Fields common to all action status requests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus
    {
        /// <summary>
        /// Unique identifier assigned to the request
        /// </summary>
        public global::System.Guid? RequestId { get; }

        /// <summary>
        /// Identifier provided by the consumer to track requests internally.  It is recommended that this be a globally unique identfier tracked in their system.  Can be used to match up data in the caller's system.
        /// </summary>
        public global::System.String ConsumerTrackingId { get; }

        /// <summary>
        /// Identifier provided by the consumer which usually references the source record within their system.  Does not need to be unique.
        /// </summary>
        public global::System.String ConsumerReferenceId { get; }

        /// <summary>
        /// Any notes to include with the request, this is stored as metadata to provide context to the request.
        /// </summary>
        public global::System.String? ConsumerNotes { get; }

        public global::System.DateTimeOffset RequestDateTime { get; }

        public global::AggieEnterpriseApi.RequestStatus RequestStatus { get; }

        /// <summary>
        /// When the status last changed
        /// </summary>
        public global::System.DateTimeOffset LastStatusDateTime { get; }

        /// <summary>
        /// When the request was processed by the ERP system
        /// </summary>
        public global::System.DateTimeOffset? ProcessedDateTime { get; }

        /// <summary>
        /// Error information if the request failed during processing.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }
    }

    /// <summary>
    /// Fields common to all action status requests.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus_ActionRequestStatus : IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus
    {
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults
    {
        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }

        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults_ValidationResponse : IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategoryByCodeResult : global::System.IEquatable<ScmPurchasingCategoryByCodeResult>, IScmPurchasingCategoryByCodeResult
    {
        public ScmPurchasingCategoryByCodeResult(global::AggieEnterpriseApi.IScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode? scmPurchasingCategoryByCode)
        {
            ScmPurchasingCategoryByCode = scmPurchasingCategoryByCode;
        }

        /// <summary>
        /// Get a single ScmPurchasingCategory by category code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode? ScmPurchasingCategoryByCode { get; }

        public virtual global::System.Boolean Equals(ScmPurchasingCategoryByCodeResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ScmPurchasingCategoryByCode is null && other.ScmPurchasingCategoryByCode is null) || ScmPurchasingCategoryByCode != null && ScmPurchasingCategoryByCode.Equals(other.ScmPurchasingCategoryByCode)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchasingCategoryByCodeResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ScmPurchasingCategoryByCode != null)
                {
                    hash ^= 397 * ScmPurchasingCategoryByCode.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The SCM purchasing category represent the type of item being paid for on an invoice payment.
    /// 
    /// The Oracle Purchasing category is the conceptual replacement for the KFS Commodity Code.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategory : global::System.IEquatable<ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategory>, IScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategory
    {
        public ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategory(global::System.Int64 id, global::System.String code, global::System.String name, global::System.String? description, global::System.String? categoryContentCode, global::System.DateTime? startDateActive, global::System.DateTime? endDateActive, global::System.Boolean enabled, global::System.DateTimeOffset lastUpdateDateTime, global::System.String? lastUpdateUserId)
        {
            Id = id;
            Code = code;
            Name = name;
            Description = description;
            CategoryContentCode = categoryContentCode;
            StartDateActive = startDateActive;
            EndDateActive = endDateActive;
            Enabled = enabled;
            LastUpdateDateTime = lastUpdateDateTime;
            LastUpdateUserId = lastUpdateUserId;
        }

        /// <summary>
        /// Unique identifier of the Category Code
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// A category is used to manage the catalog hierarchy. Items are assigned to categories in the catalog.
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Name of the purchasing category.  This is used on the SCM Requisition interface.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Description of the purchasing category.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// Category Content Code.
        /// </summary>
        public global::System.String? CategoryContentCode { get; }

        /// <summary>
        /// The date from when the value is available for use.
        /// </summary>
        public global::System.DateTime? StartDateActive { get; }

        /// <summary>
        /// The date till which the value is available for use.
        /// </summary>
        public global::System.DateTime? EndDateActive { get; }

        /// <summary>
        /// Indicates that the Category is enabled.
        /// </summary>
        public global::System.Boolean Enabled { get; }

        /// <summary>
        /// Timestamp this record was last updated in the financial system.
        /// </summary>
        public global::System.DateTimeOffset LastUpdateDateTime { get; }

        /// <summary>
        /// User ID of the person who last updated this record.
        /// </summary>
        public global::System.String? LastUpdateUserId { get; }

        public virtual global::System.Boolean Equals(ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategory? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Code.Equals(other.Code) && Name.Equals(other.Name) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && ((CategoryContentCode is null && other.CategoryContentCode is null) || CategoryContentCode != null && CategoryContentCode.Equals(other.CategoryContentCode)) && ((StartDateActive is null && other.StartDateActive is null) || StartDateActive != null && StartDateActive.Equals(other.StartDateActive)) && ((EndDateActive is null && other.EndDateActive is null) || EndDateActive != null && EndDateActive.Equals(other.EndDateActive)) && Enabled == other.Enabled && LastUpdateDateTime.Equals(other.LastUpdateDateTime) && ((LastUpdateUserId is null && other.LastUpdateUserId is null) || LastUpdateUserId != null && LastUpdateUserId.Equals(other.LastUpdateUserId));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategory)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                if (CategoryContentCode != null)
                {
                    hash ^= 397 * CategoryContentCode.GetHashCode();
                }

                if (StartDateActive != null)
                {
                    hash ^= 397 * StartDateActive.GetHashCode();
                }

                if (EndDateActive != null)
                {
                    hash ^= 397 * EndDateActive.GetHashCode();
                }

                hash ^= 397 * Enabled.GetHashCode();
                hash ^= 397 * LastUpdateDateTime.GetHashCode();
                if (LastUpdateUserId != null)
                {
                    hash ^= 397 * LastUpdateUserId.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchasingCategoryByCodeResult
    {
        /// <summary>
        /// Get a single ScmPurchasingCategory by category code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode? ScmPurchasingCategoryByCode { get; }
    }

    /// <summary>
    /// The SCM purchasing category represent the type of item being paid for on an invoice payment.
    /// 
    /// The Oracle Purchasing category is the conceptual replacement for the KFS Commodity Code.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode
    {
        /// <summary>
        /// Unique identifier of the Category Code
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// A category is used to manage the catalog hierarchy. Items are assigned to categories in the catalog.
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Name of the purchasing category.  This is used on the SCM Requisition interface.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Description of the purchasing category.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// Category Content Code.
        /// </summary>
        public global::System.String? CategoryContentCode { get; }

        /// <summary>
        /// The date from when the value is available for use.
        /// </summary>
        public global::System.DateTime? StartDateActive { get; }

        /// <summary>
        /// The date till which the value is available for use.
        /// </summary>
        public global::System.DateTime? EndDateActive { get; }

        /// <summary>
        /// Indicates that the Category is enabled.
        /// </summary>
        public global::System.Boolean Enabled { get; }

        /// <summary>
        /// Timestamp this record was last updated in the financial system.
        /// </summary>
        public global::System.DateTimeOffset LastUpdateDateTime { get; }

        /// <summary>
        /// User ID of the person who last updated this record.
        /// </summary>
        public global::System.String? LastUpdateUserId { get; }
    }

    /// <summary>
    /// The SCM purchasing category represent the type of item being paid for on an invoice payment.
    /// 
    /// The Oracle Purchasing category is the conceptual replacement for the KFS Commodity Code.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategory : IScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategorySearchResult : global::System.IEquatable<ScmPurchasingCategorySearchResult>, IScmPurchasingCategorySearchResult
    {
        public ScmPurchasingCategorySearchResult(global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch scmPurchasingCategorySearch)
        {
            ScmPurchasingCategorySearch = scmPurchasingCategorySearch;
        }

        /// <summary>
        /// Search for ScmPurchasingCategory objects by multiple properties.
        /// See the ScmPurchasingCategoryFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch ScmPurchasingCategorySearch { get; }

        public virtual global::System.Boolean Equals(ScmPurchasingCategorySearchResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ScmPurchasingCategorySearch.Equals(other.ScmPurchasingCategorySearch));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchasingCategorySearchResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ScmPurchasingCategorySearch.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Wrapper object for search results for ScmPurchasingCategory
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_ScmPurchasingCategorySearchResults : global::System.IEquatable<ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_ScmPurchasingCategorySearchResults>, IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_ScmPurchasingCategorySearchResults
    {
        public ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_ScmPurchasingCategorySearchResults(global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata metadata, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data> data)
        {
            Metadata = metadata;
            Data = data;
        }

        /// <summary>
        /// Information about the search results returned.
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata Metadata { get; }

        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data> Data { get; }

        public virtual global::System.Boolean Equals(ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_ScmPurchasingCategorySearchResults? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Metadata.Equals(other.Metadata)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Data, other.Data);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_ScmPurchasingCategorySearchResults)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Metadata.GetHashCode();
                foreach (var Data_elm in Data)
                {
                    hash ^= 397 * Data_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Metadata about the search results returned in a given response.
    /// Used to provide metrics of the results and the information necessary
    /// to pull in the next set of records.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata_SearchResultMetadata : global::System.IEquatable<ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata_SearchResultMetadata>, IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata_SearchResultMetadata
    {
        public ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata_SearchResultMetadata(global::System.Collections.Generic.IReadOnlyList<global::System.String>? sort, global::System.Int32? limit, global::System.Int32 returnedResultCount, global::System.Int32 startIndex, global::System.Int32? nextStartIndex, global::System.Int32? totalResultCount)
        {
            Sort = sort;
            Limit = limit;
            ReturnedResultCount = returnedResultCount;
            StartIndex = startIndex;
            NextStartIndex = nextStartIndex;
            TotalResultCount = totalResultCount;
        }

        /// <summary>
        /// Array of property names used to sort the results
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Sort { get; }

        /// <summary>
        /// requested limit to the number of records to retrieve
        /// </summary>
        public global::System.Int32? Limit { get; }

        /// <summary>
        /// Results returned in the data property.
        /// </summary>
        public global::System.Int32 ReturnedResultCount { get; }

        /// <summary>
        /// Starting index for the current result set.
        /// </summary>
        public global::System.Int32 StartIndex { get; }

        /// <summary>
        /// Start index for getting the next page of results.  Unset if there are no more results.
        /// </summary>
        public global::System.Int32? NextStartIndex { get; }

        /// <summary>
        /// Total number of results.  Will only be populated if `includeTotalResultCount` is true in the search request.
        /// </summary>
        public global::System.Int32? TotalResultCount { get; }

        public virtual global::System.Boolean Equals(ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata_SearchResultMetadata? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Sort, other.Sort)) && Limit == other.Limit && ReturnedResultCount == other.ReturnedResultCount && StartIndex == other.StartIndex && NextStartIndex == other.NextStartIndex && TotalResultCount == other.TotalResultCount;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata_SearchResultMetadata)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Sort != null)
                {
                    foreach (var Sort_elm in Sort)
                    {
                        hash ^= 397 * Sort_elm.GetHashCode();
                    }
                }

                if (Limit != null)
                {
                    hash ^= 397 * Limit.GetHashCode();
                }

                hash ^= 397 * ReturnedResultCount.GetHashCode();
                hash ^= 397 * StartIndex.GetHashCode();
                if (NextStartIndex != null)
                {
                    hash ^= 397 * NextStartIndex.GetHashCode();
                }

                if (TotalResultCount != null)
                {
                    hash ^= 397 * TotalResultCount.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The SCM purchasing category represent the type of item being paid for on an invoice payment.
    /// 
    /// The Oracle Purchasing category is the conceptual replacement for the KFS Commodity Code.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategory : global::System.IEquatable<ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategory>, IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategory
    {
        public ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategory(global::System.Int64 id, global::System.String code, global::System.String name, global::System.String? description, global::System.String? categoryContentCode, global::System.Boolean enabled, global::System.DateTime? startDateActive, global::System.DateTime? endDateActive)
        {
            Id = id;
            Code = code;
            Name = name;
            Description = description;
            CategoryContentCode = categoryContentCode;
            Enabled = enabled;
            StartDateActive = startDateActive;
            EndDateActive = endDateActive;
        }

        /// <summary>
        /// Unique identifier of the Category Code
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// A category is used to manage the catalog hierarchy. Items are assigned to categories in the catalog.
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Name of the purchasing category.  This is used on the SCM Requisition interface.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Description of the purchasing category.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// Category Content Code.
        /// </summary>
        public global::System.String? CategoryContentCode { get; }

        /// <summary>
        /// Indicates that the Category is enabled.
        /// </summary>
        public global::System.Boolean Enabled { get; }

        /// <summary>
        /// The date from when the value is available for use.
        /// </summary>
        public global::System.DateTime? StartDateActive { get; }

        /// <summary>
        /// The date till which the value is available for use.
        /// </summary>
        public global::System.DateTime? EndDateActive { get; }

        public virtual global::System.Boolean Equals(ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategory? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Code.Equals(other.Code) && Name.Equals(other.Name) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && ((CategoryContentCode is null && other.CategoryContentCode is null) || CategoryContentCode != null && CategoryContentCode.Equals(other.CategoryContentCode)) && Enabled == other.Enabled && ((StartDateActive is null && other.StartDateActive is null) || StartDateActive != null && StartDateActive.Equals(other.StartDateActive)) && ((EndDateActive is null && other.EndDateActive is null) || EndDateActive != null && EndDateActive.Equals(other.EndDateActive));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategory)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                if (CategoryContentCode != null)
                {
                    hash ^= 397 * CategoryContentCode.GetHashCode();
                }

                hash ^= 397 * Enabled.GetHashCode();
                if (StartDateActive != null)
                {
                    hash ^= 397 * StartDateActive.GetHashCode();
                }

                if (EndDateActive != null)
                {
                    hash ^= 397 * EndDateActive.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchasingCategorySearchResult
    {
        /// <summary>
        /// Search for ScmPurchasingCategory objects by multiple properties.
        /// See the ScmPurchasingCategoryFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch ScmPurchasingCategorySearch { get; }
    }

    /// <summary>
    /// Wrapper object for search results for ScmPurchasingCategory
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchasingCategorySearch_ScmPurchasingCategorySearch
    {
        /// <summary>
        /// Information about the search results returned.
        /// </summary>
        public global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata Metadata { get; }

        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data> Data { get; }
    }

    /// <summary>
    /// Wrapper object for search results for ScmPurchasingCategory
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_ScmPurchasingCategorySearchResults : IScmPurchasingCategorySearch_ScmPurchasingCategorySearch
    {
    }

    /// <summary>
    /// Metadata about the search results returned in a given response.
    /// Used to provide metrics of the results and the information necessary
    /// to pull in the next set of records.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata
    {
        /// <summary>
        /// Array of property names used to sort the results
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Sort { get; }

        /// <summary>
        /// requested limit to the number of records to retrieve
        /// </summary>
        public global::System.Int32? Limit { get; }

        /// <summary>
        /// Results returned in the data property.
        /// </summary>
        public global::System.Int32 ReturnedResultCount { get; }

        /// <summary>
        /// Starting index for the current result set.
        /// </summary>
        public global::System.Int32 StartIndex { get; }

        /// <summary>
        /// Start index for getting the next page of results.  Unset if there are no more results.
        /// </summary>
        public global::System.Int32? NextStartIndex { get; }

        /// <summary>
        /// Total number of results.  Will only be populated if `includeTotalResultCount` is true in the search request.
        /// </summary>
        public global::System.Int32? TotalResultCount { get; }
    }

    /// <summary>
    /// Metadata about the search results returned in a given response.
    /// Used to provide metrics of the results and the information necessary
    /// to pull in the next set of records.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata_SearchResultMetadata : IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata
    {
    }

    /// <summary>
    /// The SCM purchasing category represent the type of item being paid for on an invoice payment.
    /// 
    /// The Oracle Purchasing category is the conceptual replacement for the KFS Commodity Code.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data
    {
        /// <summary>
        /// Unique identifier of the Category Code
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// A category is used to manage the catalog hierarchy. Items are assigned to categories in the catalog.
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Name of the purchasing category.  This is used on the SCM Requisition interface.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Description of the purchasing category.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// Category Content Code.
        /// </summary>
        public global::System.String? CategoryContentCode { get; }

        /// <summary>
        /// Indicates that the Category is enabled.
        /// </summary>
        public global::System.Boolean Enabled { get; }

        /// <summary>
        /// The date from when the value is available for use.
        /// </summary>
        public global::System.DateTime? StartDateActive { get; }

        /// <summary>
        /// The date till which the value is available for use.
        /// </summary>
        public global::System.DateTime? EndDateActive { get; }
    }

    /// <summary>
    /// The SCM purchasing category represent the type of item being paid for on an invoice payment.
    /// 
    /// The Oracle Purchasing category is the conceptual replacement for the KFS Commodity Code.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategory : IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierSearchResult : global::System.IEquatable<ScmSupplierSearchResult>, IScmSupplierSearchResult
    {
        public ScmSupplierSearchResult(global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch scmSupplierSearch)
        {
            ScmSupplierSearch = scmSupplierSearch;
        }

        /// <summary>
        /// Search for ScmSupplier objects by multiple properties.
        /// See the ScmSupplierFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch ScmSupplierSearch { get; }

        public virtual global::System.Boolean Equals(ScmSupplierSearchResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ScmSupplierSearch.Equals(other.ScmSupplierSearch));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmSupplierSearchResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ScmSupplierSearch.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Search results object for ScmSupplier
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierSearch_ScmSupplierSearch_ScmSupplierSearchResults : global::System.IEquatable<ScmSupplierSearch_ScmSupplierSearch_ScmSupplierSearchResults>, IScmSupplierSearch_ScmSupplierSearch_ScmSupplierSearchResults
    {
        public ScmSupplierSearch_ScmSupplierSearch_ScmSupplierSearchResults(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data> data)
        {
            Data = data;
        }

        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data> Data { get; }

        public virtual global::System.Boolean Equals(ScmSupplierSearch_ScmSupplierSearch_ScmSupplierSearchResults? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Data, other.Data));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmSupplierSearch_ScmSupplierSearch_ScmSupplierSearchResults)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Data_elm in Data)
                {
                    hash ^= 397 * Data_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A defined supplier of goods or services in the ERP system.
    /// 
    /// Each supplier may have multiple sites at which they do business.  It is necessary to identify both the supplier and site when submitting a payment.
    /// 
    /// Supplier in Oracle replaces Vendor in KFS.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierSearch_ScmSupplierSearch_Data_ScmSupplier : global::System.IEquatable<ScmSupplierSearch_ScmSupplierSearch_Data_ScmSupplier>, IScmSupplierSearch_ScmSupplierSearch_Data_ScmSupplier
    {
        public ScmSupplierSearch_ScmSupplierSearch_Data_ScmSupplier(global::System.String name, global::System.Int64 supplierNumber, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data_Sites> sites)
        {
            Name = name;
            SupplierNumber = supplierNumber;
            Sites = sites;
        }

        /// <summary>
        /// Supplier: Name of the supplier.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Unique ID for the supplier used to reference it within the UI and in interfaces.  This largely corresponds to the Vendor ID in KFS.
        /// </summary>
        public global::System.Int64 SupplierNumber { get; }

        /// <summary>
        /// Supplier business locations referenced when making orders or payments to the supplier.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data_Sites> Sites { get; }

        public virtual global::System.Boolean Equals(ScmSupplierSearch_ScmSupplierSearch_Data_ScmSupplier? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && SupplierNumber == other.SupplierNumber && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Sites, other.Sites);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmSupplierSearch_ScmSupplierSearch_Data_ScmSupplier)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * SupplierNumber.GetHashCode();
                foreach (var Sites_elm in Sites)
                {
                    hash ^= 397 * Sites_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Supplier Site represents a business location referenced when making orders or payments to the supplier.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierSearch_ScmSupplierSearch_Data_Sites_ScmSupplierSite : global::System.IEquatable<ScmSupplierSearch_ScmSupplierSearch_Data_Sites_ScmSupplierSite>, IScmSupplierSearch_ScmSupplierSearch_Data_Sites_ScmSupplierSite
    {
        public ScmSupplierSearch_ScmSupplierSearch_Data_Sites_ScmSupplierSite(global::System.String supplierSiteCode, global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location? location)
        {
            SupplierSiteCode = supplierSiteCode;
            Location = location;
        }

        /// <summary>
        /// Code used to identify the site on the UI and in interfaces.
        /// </summary>
        public global::System.String SupplierSiteCode { get; }

        /// <summary>
        /// Physical address of the site.
        /// </summary>
        public global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location? Location { get; }

        public virtual global::System.Boolean Equals(ScmSupplierSearch_ScmSupplierSearch_Data_Sites_ScmSupplierSite? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SupplierSiteCode.Equals(other.SupplierSiteCode)) && ((Location is null && other.Location is null) || Location != null && Location.Equals(other.Location));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmSupplierSearch_ScmSupplierSearch_Data_Sites_ScmSupplierSite)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SupplierSiteCode.GetHashCode();
                if (Location != null)
                {
                    hash ^= 397 * Location.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Locations referenced by Supplier and AR Customer Sites
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location_ErpLocation : global::System.IEquatable<ScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location_ErpLocation>, IScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location_ErpLocation
    {
        public ScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location_ErpLocation(global::System.String? addressLine1, global::System.String? addressLine2, global::System.String? addressLine3, global::System.String? addressLine4, global::System.String? city, global::System.String? state, global::System.String? postalCode)
        {
            AddressLine1 = addressLine1;
            AddressLine2 = addressLine2;
            AddressLine3 = addressLine3;
            AddressLine4 = addressLine4;
            City = city;
            State = state;
            PostalCode = postalCode;
        }

        /// <summary>
        /// Address Line 1
        /// </summary>
        public global::System.String? AddressLine1 { get; }

        /// <summary>
        /// Address Line 2
        /// </summary>
        public global::System.String? AddressLine2 { get; }

        /// <summary>
        /// Address Line 3
        /// </summary>
        public global::System.String? AddressLine3 { get; }

        /// <summary>
        /// Address Line 4
        /// </summary>
        public global::System.String? AddressLine4 { get; }

        /// <summary>
        /// City of the supplier address
        /// </summary>
        public global::System.String? City { get; }

        /// <summary>
        /// State of the supplier address
        /// </summary>
        public global::System.String? State { get; }

        /// <summary>
        /// Postal code of the supplier address
        /// </summary>
        public global::System.String? PostalCode { get; }

        public virtual global::System.Boolean Equals(ScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location_ErpLocation? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((AddressLine1 is null && other.AddressLine1 is null) || AddressLine1 != null && AddressLine1.Equals(other.AddressLine1))) && ((AddressLine2 is null && other.AddressLine2 is null) || AddressLine2 != null && AddressLine2.Equals(other.AddressLine2)) && ((AddressLine3 is null && other.AddressLine3 is null) || AddressLine3 != null && AddressLine3.Equals(other.AddressLine3)) && ((AddressLine4 is null && other.AddressLine4 is null) || AddressLine4 != null && AddressLine4.Equals(other.AddressLine4)) && ((City is null && other.City is null) || City != null && City.Equals(other.City)) && ((State is null && other.State is null) || State != null && State.Equals(other.State)) && ((PostalCode is null && other.PostalCode is null) || PostalCode != null && PostalCode.Equals(other.PostalCode));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location_ErpLocation)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (AddressLine1 != null)
                {
                    hash ^= 397 * AddressLine1.GetHashCode();
                }

                if (AddressLine2 != null)
                {
                    hash ^= 397 * AddressLine2.GetHashCode();
                }

                if (AddressLine3 != null)
                {
                    hash ^= 397 * AddressLine3.GetHashCode();
                }

                if (AddressLine4 != null)
                {
                    hash ^= 397 * AddressLine4.GetHashCode();
                }

                if (City != null)
                {
                    hash ^= 397 * City.GetHashCode();
                }

                if (State != null)
                {
                    hash ^= 397 * State.GetHashCode();
                }

                if (PostalCode != null)
                {
                    hash ^= 397 * PostalCode.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmSupplierSearchResult
    {
        /// <summary>
        /// Search for ScmSupplier objects by multiple properties.
        /// See the ScmSupplierFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch ScmSupplierSearch { get; }
    }

    /// <summary>
    /// Search results object for ScmSupplier
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmSupplierSearch_ScmSupplierSearch
    {
        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data> Data { get; }
    }

    /// <summary>
    /// Search results object for ScmSupplier
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmSupplierSearch_ScmSupplierSearch_ScmSupplierSearchResults : IScmSupplierSearch_ScmSupplierSearch
    {
    }

    /// <summary>
    /// A defined supplier of goods or services in the ERP system.
    /// 
    /// Each supplier may have multiple sites at which they do business.  It is necessary to identify both the supplier and site when submitting a payment.
    /// 
    /// Supplier in Oracle replaces Vendor in KFS.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmSupplierSearch_ScmSupplierSearch_Data
    {
        /// <summary>
        /// Supplier: Name of the supplier.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// Unique ID for the supplier used to reference it within the UI and in interfaces.  This largely corresponds to the Vendor ID in KFS.
        /// </summary>
        public global::System.Int64 SupplierNumber { get; }

        /// <summary>
        /// Supplier business locations referenced when making orders or payments to the supplier.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data_Sites> Sites { get; }
    }

    /// <summary>
    /// A defined supplier of goods or services in the ERP system.
    /// 
    /// Each supplier may have multiple sites at which they do business.  It is necessary to identify both the supplier and site when submitting a payment.
    /// 
    /// Supplier in Oracle replaces Vendor in KFS.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmSupplierSearch_ScmSupplierSearch_Data_ScmSupplier : IScmSupplierSearch_ScmSupplierSearch_Data
    {
    }

    /// <summary>
    /// Supplier Site represents a business location referenced when making orders or payments to the supplier.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmSupplierSearch_ScmSupplierSearch_Data_Sites
    {
        /// <summary>
        /// Code used to identify the site on the UI and in interfaces.
        /// </summary>
        public global::System.String SupplierSiteCode { get; }

        /// <summary>
        /// Physical address of the site.
        /// </summary>
        public global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location? Location { get; }
    }

    /// <summary>
    /// Supplier Site represents a business location referenced when making orders or payments to the supplier.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmSupplierSearch_ScmSupplierSearch_Data_Sites_ScmSupplierSite : IScmSupplierSearch_ScmSupplierSearch_Data_Sites
    {
    }

    /// <summary>
    /// Locations referenced by Supplier and AR Customer Sites
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location
    {
        /// <summary>
        /// Address Line 1
        /// </summary>
        public global::System.String? AddressLine1 { get; }

        /// <summary>
        /// Address Line 2
        /// </summary>
        public global::System.String? AddressLine2 { get; }

        /// <summary>
        /// Address Line 3
        /// </summary>
        public global::System.String? AddressLine3 { get; }

        /// <summary>
        /// Address Line 4
        /// </summary>
        public global::System.String? AddressLine4 { get; }

        /// <summary>
        /// City of the supplier address
        /// </summary>
        public global::System.String? City { get; }

        /// <summary>
        /// State of the supplier address
        /// </summary>
        public global::System.String? State { get; }

        /// <summary>
        /// Postal code of the supplier address
        /// </summary>
        public global::System.String? PostalCode { get; }
    }

    /// <summary>
    /// Locations referenced by Supplier and AR Customer Sites
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location_ErpLocation : IScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeSearchResult : global::System.IEquatable<PpmExpenditureTypeSearchResult>, IPpmExpenditureTypeSearchResult
    {
        public PpmExpenditureTypeSearchResult(global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeByCode? ppmExpenditureTypeByCode, global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch ppmExpenditureTypeSearch)
        {
            PpmExpenditureTypeByCode = ppmExpenditureTypeByCode;
            PpmExpenditureTypeSearch = ppmExpenditureTypeSearch;
        }

        /// <summary>
        /// Get a single PpmExpenditureType by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeByCode? PpmExpenditureTypeByCode { get; }

        /// <summary>
        /// Search for PpmExpenditureType objects by multiple properties.
        /// See
        /// See the PpmExpenditureTypeFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch PpmExpenditureTypeSearch { get; }

        public virtual global::System.Boolean Equals(PpmExpenditureTypeSearchResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PpmExpenditureTypeByCode is null && other.PpmExpenditureTypeByCode is null) || PpmExpenditureTypeByCode != null && PpmExpenditureTypeByCode.Equals(other.PpmExpenditureTypeByCode))) && PpmExpenditureTypeSearch.Equals(other.PpmExpenditureTypeSearch);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmExpenditureTypeSearchResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PpmExpenditureTypeByCode != null)
                {
                    hash ^= 397 * PpmExpenditureTypeByCode.GetHashCode();
                }

                hash ^= 397 * PpmExpenditureTypeSearch.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The Expenditure Type identifies the natural classification of the expense transaction being recorded.
    /// 
    /// **Roll-up relationship to the Chart of Accounts in the General Ledger:**
    /// 
    /// * The Expenditure Type value will roll up to the (Natural) Account segment in the Chart of Accounts.
    /// * The first 6 characters of the Expenditure Type value will correspond with the (Natural) Account value it rolls up to.
    /// 
    /// **Examples:**
    /// 
    /// * Salary
    /// * Fringe Benefits
    /// * Consulting Services
    /// * Travel
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureType : global::System.IEquatable<PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureType>, IPpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureType
    {
        public PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureType(global::System.Int64 id, global::System.String code, global::System.String name)
        {
            Id = id;
            Code = code;
            Name = name;
        }

        /// <summary>
        /// Expenditure Type ID: Unique identifier of the expenditure type.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Expenditure Type Code: The code of the Expenditure Type.
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Expenditure Type: Name of the expenditure type.
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Code.Equals(other.Code) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Wrapper object for search results for PpmExpenditureType
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_PpmExpenditureTypeSearchResults : global::System.IEquatable<PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_PpmExpenditureTypeSearchResults>, IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_PpmExpenditureTypeSearchResults
    {
        public PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_PpmExpenditureTypeSearchResults(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data> data)
        {
            Data = data;
        }

        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data> Data { get; }

        public virtual global::System.Boolean Equals(PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_PpmExpenditureTypeSearchResults? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Data, other.Data));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_PpmExpenditureTypeSearchResults)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Data_elm in Data)
                {
                    hash ^= 397 * Data_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The Expenditure Type identifies the natural classification of the expense transaction being recorded.
    /// 
    /// **Roll-up relationship to the Chart of Accounts in the General Ledger:**
    /// 
    /// * The Expenditure Type value will roll up to the (Natural) Account segment in the Chart of Accounts.
    /// * The first 6 characters of the Expenditure Type value will correspond with the (Natural) Account value it rolls up to.
    /// 
    /// **Examples:**
    /// 
    /// * Salary
    /// * Fringe Benefits
    /// * Consulting Services
    /// * Travel
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureType : global::System.IEquatable<PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureType>, IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureType
    {
        public PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureType(global::System.Int64 id, global::System.String code, global::System.String name)
        {
            Id = id;
            Code = code;
            Name = name;
        }

        /// <summary>
        /// Expenditure Type ID: Unique identifier of the expenditure type.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Expenditure Type Code: The code of the Expenditure Type.
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Expenditure Type: Name of the expenditure type.
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureType? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Code.Equals(other.Code) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureType)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmExpenditureTypeSearchResult
    {
        /// <summary>
        /// Get a single PpmExpenditureType by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeByCode? PpmExpenditureTypeByCode { get; }

        /// <summary>
        /// Search for PpmExpenditureType objects by multiple properties.
        /// See
        /// See the PpmExpenditureTypeFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch PpmExpenditureTypeSearch { get; }
    }

    /// <summary>
    /// The Expenditure Type identifies the natural classification of the expense transaction being recorded.
    /// 
    /// **Roll-up relationship to the Chart of Accounts in the General Ledger:**
    /// 
    /// * The Expenditure Type value will roll up to the (Natural) Account segment in the Chart of Accounts.
    /// * The first 6 characters of the Expenditure Type value will correspond with the (Natural) Account value it rolls up to.
    /// 
    /// **Examples:**
    /// 
    /// * Salary
    /// * Fringe Benefits
    /// * Consulting Services
    /// * Travel
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmExpenditureTypeSearch_PpmExpenditureTypeByCode
    {
        /// <summary>
        /// Expenditure Type ID: Unique identifier of the expenditure type.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Expenditure Type Code: The code of the Expenditure Type.
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Expenditure Type: Name of the expenditure type.
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// The Expenditure Type identifies the natural classification of the expense transaction being recorded.
    /// 
    /// **Roll-up relationship to the Chart of Accounts in the General Ledger:**
    /// 
    /// * The Expenditure Type value will roll up to the (Natural) Account segment in the Chart of Accounts.
    /// * The first 6 characters of the Expenditure Type value will correspond with the (Natural) Account value it rolls up to.
    /// 
    /// **Examples:**
    /// 
    /// * Salary
    /// * Fringe Benefits
    /// * Consulting Services
    /// * Travel
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureType : IPpmExpenditureTypeSearch_PpmExpenditureTypeByCode
    {
    }

    /// <summary>
    /// Wrapper object for search results for PpmExpenditureType
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch
    {
        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data> Data { get; }
    }

    /// <summary>
    /// Wrapper object for search results for PpmExpenditureType
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_PpmExpenditureTypeSearchResults : IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch
    {
    }

    /// <summary>
    /// The Expenditure Type identifies the natural classification of the expense transaction being recorded.
    /// 
    /// **Roll-up relationship to the Chart of Accounts in the General Ledger:**
    /// 
    /// * The Expenditure Type value will roll up to the (Natural) Account segment in the Chart of Accounts.
    /// * The first 6 characters of the Expenditure Type value will correspond with the (Natural) Account value it rolls up to.
    /// 
    /// **Examples:**
    /// 
    /// * Salary
    /// * Fringe Benefits
    /// * Consulting Services
    /// * Travel
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data
    {
        /// <summary>
        /// Expenditure Type ID: Unique identifier of the expenditure type.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Expenditure Type Code: The code of the Expenditure Type.
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Expenditure Type: Name of the expenditure type.
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// The Expenditure Type identifies the natural classification of the expense transaction being recorded.
    /// 
    /// **Roll-up relationship to the Chart of Accounts in the General Ledger:**
    /// 
    /// * The Expenditure Type value will roll up to the (Natural) Account segment in the Chart of Accounts.
    /// * The first 6 characters of the Expenditure Type value will correspond with the (Natural) Account value it rolls up to.
    /// 
    /// **Examples:**
    /// 
    /// * Salary
    /// * Fringe Benefits
    /// * Consulting Services
    /// * Travel
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureType : IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationSearchResult : global::System.IEquatable<PpmOrganizationSearchResult>, IPpmOrganizationSearchResult
    {
        public PpmOrganizationSearchResult(global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganization? ppmOrganization, global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganizationSearch ppmOrganizationSearch)
        {
            PpmOrganization = ppmOrganization;
            PpmOrganizationSearch = ppmOrganizationSearch;
        }

        /// <summary>
        /// Get a single PpmOrganization by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganization? PpmOrganization { get; }

        /// <summary>
        /// Search for PpmOrganization objects by multiple properties.
        /// See
        /// See the PpmOrganizationFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganizationSearch PpmOrganizationSearch { get; }

        public virtual global::System.Boolean Equals(PpmOrganizationSearchResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PpmOrganization is null && other.PpmOrganization is null) || PpmOrganization != null && PpmOrganization.Equals(other.PpmOrganization))) && PpmOrganizationSearch.Equals(other.PpmOrganizationSearch);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmOrganizationSearchResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PpmOrganization != null)
                {
                    hash ^= 397 * PpmOrganization.GetHashCode();
                }

                hash ^= 397 * PpmOrganizationSearch.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The Expenditure Organization identifies the organization that is incurring the expense and revenue. This may NOT be the same as the organization that owns the project.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts in the General Ledger:**
    /// 
    /// * The Expenditure Organization value will roll up to the Financial Department segment of the Chart of Accounts.
    /// 
    /// **Examples:**
    /// 
    /// * Computer Science
    /// * Plant Sciences
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationSearch_PpmOrganization_PpmOrganization : global::System.IEquatable<PpmOrganizationSearch_PpmOrganization_PpmOrganization>, IPpmOrganizationSearch_PpmOrganization_PpmOrganization
    {
        public PpmOrganizationSearch_PpmOrganization_PpmOrganization(global::System.Int64 id, global::System.String code, global::System.String name)
        {
            Id = id;
            Code = code;
            Name = name;
        }

        /// <summary>
        /// Organization ID: Unique identifier of the Organization.  Internal to Oracle.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Organization Code: The code of the Organization.
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Organization Name: Name of the Organization
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(PpmOrganizationSearch_PpmOrganization_PpmOrganization? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Code.Equals(other.Code) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmOrganizationSearch_PpmOrganization_PpmOrganization)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Wrapper object for search results for PpmOrganization
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationSearch_PpmOrganizationSearch_PpmOrganizationSearchResults : global::System.IEquatable<PpmOrganizationSearch_PpmOrganizationSearch_PpmOrganizationSearchResults>, IPpmOrganizationSearch_PpmOrganizationSearch_PpmOrganizationSearchResults
    {
        public PpmOrganizationSearch_PpmOrganizationSearch_PpmOrganizationSearchResults(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganizationSearch_Data> data)
        {
            Data = data;
        }

        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganizationSearch_Data> Data { get; }

        public virtual global::System.Boolean Equals(PpmOrganizationSearch_PpmOrganizationSearch_PpmOrganizationSearchResults? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Data, other.Data));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmOrganizationSearch_PpmOrganizationSearch_PpmOrganizationSearchResults)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Data_elm in Data)
                {
                    hash ^= 397 * Data_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The Expenditure Organization identifies the organization that is incurring the expense and revenue. This may NOT be the same as the organization that owns the project.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts in the General Ledger:**
    /// 
    /// * The Expenditure Organization value will roll up to the Financial Department segment of the Chart of Accounts.
    /// 
    /// **Examples:**
    /// 
    /// * Computer Science
    /// * Plant Sciences
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganization : global::System.IEquatable<PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganization>, IPpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganization
    {
        public PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganization(global::System.Int64 id, global::System.String code, global::System.String name)
        {
            Id = id;
            Code = code;
            Name = name;
        }

        /// <summary>
        /// Organization ID: Unique identifier of the Organization.  Internal to Oracle.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Organization Code: The code of the Organization.
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Organization Name: Name of the Organization
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganization? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && Code.Equals(other.Code) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganization)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmOrganizationSearchResult
    {
        /// <summary>
        /// Get a single PpmOrganization by code.  Returns undefined if does not exist
        /// </summary>
        public global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganization? PpmOrganization { get; }

        /// <summary>
        /// Search for PpmOrganization objects by multiple properties.
        /// See
        /// See the PpmOrganizationFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganizationSearch PpmOrganizationSearch { get; }
    }

    /// <summary>
    /// The Expenditure Organization identifies the organization that is incurring the expense and revenue. This may NOT be the same as the organization that owns the project.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts in the General Ledger:**
    /// 
    /// * The Expenditure Organization value will roll up to the Financial Department segment of the Chart of Accounts.
    /// 
    /// **Examples:**
    /// 
    /// * Computer Science
    /// * Plant Sciences
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmOrganizationSearch_PpmOrganization
    {
        /// <summary>
        /// Organization ID: Unique identifier of the Organization.  Internal to Oracle.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Organization Code: The code of the Organization.
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Organization Name: Name of the Organization
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// The Expenditure Organization identifies the organization that is incurring the expense and revenue. This may NOT be the same as the organization that owns the project.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts in the General Ledger:**
    /// 
    /// * The Expenditure Organization value will roll up to the Financial Department segment of the Chart of Accounts.
    /// 
    /// **Examples:**
    /// 
    /// * Computer Science
    /// * Plant Sciences
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmOrganizationSearch_PpmOrganization_PpmOrganization : IPpmOrganizationSearch_PpmOrganization
    {
    }

    /// <summary>
    /// Wrapper object for search results for PpmOrganization
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmOrganizationSearch_PpmOrganizationSearch
    {
        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganizationSearch_Data> Data { get; }
    }

    /// <summary>
    /// Wrapper object for search results for PpmOrganization
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmOrganizationSearch_PpmOrganizationSearch_PpmOrganizationSearchResults : IPpmOrganizationSearch_PpmOrganizationSearch
    {
    }

    /// <summary>
    /// The Expenditure Organization identifies the organization that is incurring the expense and revenue. This may NOT be the same as the organization that owns the project.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts in the General Ledger:**
    /// 
    /// * The Expenditure Organization value will roll up to the Financial Department segment of the Chart of Accounts.
    /// 
    /// **Examples:**
    /// 
    /// * Computer Science
    /// * Plant Sciences
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmOrganizationSearch_PpmOrganizationSearch_Data
    {
        /// <summary>
        /// Organization ID: Unique identifier of the Organization.  Internal to Oracle.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Organization Code: The code of the Organization.
        /// </summary>
        public global::System.String Code { get; }

        /// <summary>
        /// Organization Name: Name of the Organization
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// The Expenditure Organization identifies the organization that is incurring the expense and revenue. This may NOT be the same as the organization that owns the project.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts in the General Ledger:**
    /// 
    /// * The Expenditure Organization value will roll up to the Financial Department segment of the Chart of Accounts.
    /// 
    /// **Examples:**
    /// 
    /// * Computer Science
    /// * Plant Sciences
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganization : IPpmOrganizationSearch_PpmOrganizationSearch_Data
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectSearchResult : global::System.IEquatable<PpmProjectSearchResult>, IPpmProjectSearchResult
    {
        public PpmProjectSearchResult(global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectByNumber? ppmProjectByNumber, global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectSearch ppmProjectSearch)
        {
            PpmProjectByNumber = ppmProjectByNumber;
            PpmProjectSearch = ppmProjectSearch;
        }

        /// <summary>
        /// Get a single PpmProject by the project number.  Returns undefined if no project with that number is found.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectByNumber? PpmProjectByNumber { get; }

        /// <summary>
        /// Search for PpmProject objects by multiple properties.
        /// See
        /// See the PpmProjectFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectSearch PpmProjectSearch { get; }

        public virtual global::System.Boolean Equals(PpmProjectSearchResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((PpmProjectByNumber is null && other.PpmProjectByNumber is null) || PpmProjectByNumber != null && PpmProjectByNumber.Equals(other.PpmProjectByNumber))) && PpmProjectSearch.Equals(other.PpmProjectSearch);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmProjectSearchResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (PpmProjectByNumber != null)
                {
                    hash ^= 397 * PpmProjectByNumber.GetHashCode();
                }

                hash ^= 397 * PpmProjectSearch.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The Project identifies the planned work or activity to be completed over a period of time and intended to achieve a particular goal.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts (CoA) in the General Ledger:**
    /// 
    /// * The POET(AF) Project value will roll up to the Project segment of the Chart of Accounts.
    /// * PPM Project values and CoA Project segment values will be the same
    /// 
    /// **Examples:**
    /// 
    /// * Capital Projects
    /// * Sponsored Projects
    /// * Faculty Projects
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectSearch_PpmProjectByNumber_PpmProject : global::System.IEquatable<PpmProjectSearch_PpmProjectByNumber_PpmProject>, IPpmProjectSearch_PpmProjectByNumber_PpmProject
    {
        public PpmProjectSearch_PpmProjectByNumber_PpmProject(global::System.Int64 id, global::System.String projectNumber, global::System.String name)
        {
            Id = id;
            ProjectNumber = projectNumber;
            Name = name;
        }

        /// <summary>
        /// Project ID: Unique identifier of the project.  Internal to Oracle.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Project Number: Number of the project that is being created.  This will match the GL Project used to record costs to the ledger.
        /// </summary>
        public global::System.String ProjectNumber { get; }

        /// <summary>
        /// Project Name: Name of the project that is being created.
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(PpmProjectSearch_PpmProjectByNumber_PpmProject? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ProjectNumber.Equals(other.ProjectNumber) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmProjectSearch_PpmProjectByNumber_PpmProject)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * ProjectNumber.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Wrapper object for search results for PpmProject
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectSearch_PpmProjectSearch_PpmProjectSearchResults : global::System.IEquatable<PpmProjectSearch_PpmProjectSearch_PpmProjectSearchResults>, IPpmProjectSearch_PpmProjectSearch_PpmProjectSearchResults
    {
        public PpmProjectSearch_PpmProjectSearch_PpmProjectSearchResults(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectSearch_Data> data)
        {
            Data = data;
        }

        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectSearch_Data> Data { get; }

        public virtual global::System.Boolean Equals(PpmProjectSearch_PpmProjectSearch_PpmProjectSearchResults? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Data, other.Data));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmProjectSearch_PpmProjectSearch_PpmProjectSearchResults)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Data_elm in Data)
                {
                    hash ^= 397 * Data_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The Project identifies the planned work or activity to be completed over a period of time and intended to achieve a particular goal.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts (CoA) in the General Ledger:**
    /// 
    /// * The POET(AF) Project value will roll up to the Project segment of the Chart of Accounts.
    /// * PPM Project values and CoA Project segment values will be the same
    /// 
    /// **Examples:**
    /// 
    /// * Capital Projects
    /// * Sponsored Projects
    /// * Faculty Projects
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectSearch_PpmProjectSearch_Data_PpmProject : global::System.IEquatable<PpmProjectSearch_PpmProjectSearch_Data_PpmProject>, IPpmProjectSearch_PpmProjectSearch_Data_PpmProject
    {
        public PpmProjectSearch_PpmProjectSearch_Data_PpmProject(global::System.Int64 id, global::System.String projectNumber, global::System.String name)
        {
            Id = id;
            ProjectNumber = projectNumber;
            Name = name;
        }

        /// <summary>
        /// Project ID: Unique identifier of the project.  Internal to Oracle.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Project Number: Number of the project that is being created.  This will match the GL Project used to record costs to the ledger.
        /// </summary>
        public global::System.String ProjectNumber { get; }

        /// <summary>
        /// Project Name: Name of the project that is being created.
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(PpmProjectSearch_PpmProjectSearch_Data_PpmProject? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && ProjectNumber.Equals(other.ProjectNumber) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmProjectSearch_PpmProjectSearch_Data_PpmProject)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * ProjectNumber.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmProjectSearchResult
    {
        /// <summary>
        /// Get a single PpmProject by the project number.  Returns undefined if no project with that number is found.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectByNumber? PpmProjectByNumber { get; }

        /// <summary>
        /// Search for PpmProject objects by multiple properties.
        /// See
        /// See the PpmProjectFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectSearch PpmProjectSearch { get; }
    }

    /// <summary>
    /// The Project identifies the planned work or activity to be completed over a period of time and intended to achieve a particular goal.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts (CoA) in the General Ledger:**
    /// 
    /// * The POET(AF) Project value will roll up to the Project segment of the Chart of Accounts.
    /// * PPM Project values and CoA Project segment values will be the same
    /// 
    /// **Examples:**
    /// 
    /// * Capital Projects
    /// * Sponsored Projects
    /// * Faculty Projects
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmProjectSearch_PpmProjectByNumber
    {
        /// <summary>
        /// Project ID: Unique identifier of the project.  Internal to Oracle.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Project Number: Number of the project that is being created.  This will match the GL Project used to record costs to the ledger.
        /// </summary>
        public global::System.String ProjectNumber { get; }

        /// <summary>
        /// Project Name: Name of the project that is being created.
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// The Project identifies the planned work or activity to be completed over a period of time and intended to achieve a particular goal.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts (CoA) in the General Ledger:**
    /// 
    /// * The POET(AF) Project value will roll up to the Project segment of the Chart of Accounts.
    /// * PPM Project values and CoA Project segment values will be the same
    /// 
    /// **Examples:**
    /// 
    /// * Capital Projects
    /// * Sponsored Projects
    /// * Faculty Projects
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmProjectSearch_PpmProjectByNumber_PpmProject : IPpmProjectSearch_PpmProjectByNumber
    {
    }

    /// <summary>
    /// Wrapper object for search results for PpmProject
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmProjectSearch_PpmProjectSearch
    {
        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectSearch_Data> Data { get; }
    }

    /// <summary>
    /// Wrapper object for search results for PpmProject
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmProjectSearch_PpmProjectSearch_PpmProjectSearchResults : IPpmProjectSearch_PpmProjectSearch
    {
    }

    /// <summary>
    /// The Project identifies the planned work or activity to be completed over a period of time and intended to achieve a particular goal.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts (CoA) in the General Ledger:**
    /// 
    /// * The POET(AF) Project value will roll up to the Project segment of the Chart of Accounts.
    /// * PPM Project values and CoA Project segment values will be the same
    /// 
    /// **Examples:**
    /// 
    /// * Capital Projects
    /// * Sponsored Projects
    /// * Faculty Projects
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmProjectSearch_PpmProjectSearch_Data
    {
        /// <summary>
        /// Project ID: Unique identifier of the project.  Internal to Oracle.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Project Number: Number of the project that is being created.  This will match the GL Project used to record costs to the ledger.
        /// </summary>
        public global::System.String ProjectNumber { get; }

        /// <summary>
        /// Project Name: Name of the project that is being created.
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// The Project identifies the planned work or activity to be completed over a period of time and intended to achieve a particular goal.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts (CoA) in the General Ledger:**
    /// 
    /// * The POET(AF) Project value will roll up to the Project segment of the Chart of Accounts.
    /// * PPM Project values and CoA Project segment values will be the same
    /// 
    /// **Examples:**
    /// 
    /// * Capital Projects
    /// * Sponsored Projects
    /// * Faculty Projects
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmProjectSearch_PpmProjectSearch_Data_PpmProject : IPpmProjectSearch_PpmProjectSearch_Data
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskSearchResult : global::System.IEquatable<PpmTaskSearchResult>, IPpmTaskSearchResult
    {
        public PpmTaskSearchResult(global::AggieEnterpriseApi.IPpmTaskSearch_PpmTaskSearch ppmTaskSearch)
        {
            PpmTaskSearch = ppmTaskSearch;
        }

        /// <summary>
        /// Search for PpmTask objects by multiple properties.
        /// See
        /// See the PpmTaskFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmTaskSearch_PpmTaskSearch PpmTaskSearch { get; }

        public virtual global::System.Boolean Equals(PpmTaskSearchResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PpmTaskSearch.Equals(other.PpmTaskSearch));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmTaskSearchResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PpmTaskSearch.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Wrapper object for search results for PpmTask
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskSearch_PpmTaskSearch_PpmTaskSearchResults : global::System.IEquatable<PpmTaskSearch_PpmTaskSearch_PpmTaskSearchResults>, IPpmTaskSearch_PpmTaskSearch_PpmTaskSearchResults
    {
        public PpmTaskSearch_PpmTaskSearch_PpmTaskSearchResults(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmTaskSearch_PpmTaskSearch_Data> data)
        {
            Data = data;
        }

        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmTaskSearch_PpmTaskSearch_Data> Data { get; }

        public virtual global::System.Boolean Equals(PpmTaskSearch_PpmTaskSearch_PpmTaskSearchResults? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Data, other.Data));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmTaskSearch_PpmTaskSearch_PpmTaskSearchResults)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Data_elm in Data)
                {
                    hash ^= 397 * Data_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The Task identifies the activities used to further breakdown a PPM project. Every project MUST have at least one Task.  The number of tasks will vary by type of project.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts in the General Ledger:**
    /// 
    /// * The Task value will NOT roll up to the Chart of Accounts. Task values will only be used in the PPM module.
    /// * Internal rules within the Oracle PPM module will be used to map the task to components of the GL Chart of Accounts which are not directly mapped to other components of the POET(AF) segments.
    /// 
    /// **Examples:**
    /// 
    /// * Design
    /// * Construction
    /// * Data Gathering & Analysis
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskSearch_PpmTaskSearch_Data_PpmTask : global::System.IEquatable<PpmTaskSearch_PpmTaskSearch_Data_PpmTask>, IPpmTaskSearch_PpmTaskSearch_Data_PpmTask
    {
        public PpmTaskSearch_PpmTaskSearch_Data_PpmTask(global::System.Int64 id, global::System.String taskNumber, global::System.Int64 projectId, global::System.String name)
        {
            Id = id;
            TaskNumber = taskNumber;
            ProjectId = projectId;
            Name = name;
        }

        /// <summary>
        /// Task ID: Unique identifier of the project task.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Task Number: The number of a task.
        /// </summary>
        public global::System.String TaskNumber { get; }

        /// <summary>
        /// The project that the task is linked to
        /// </summary>
        public global::System.Int64 ProjectId { get; }

        /// <summary>
        /// Task Name: The name of the task. A task is a subdivision of the project work. Each project can have a set of top tasks and a hierarchy of subtasks below each top task.
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(PpmTaskSearch_PpmTaskSearch_Data_PpmTask? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Id == other.Id) && TaskNumber.Equals(other.TaskNumber) && ProjectId == other.ProjectId && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmTaskSearch_PpmTaskSearch_Data_PpmTask)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Id.GetHashCode();
                hash ^= 397 * TaskNumber.GetHashCode();
                hash ^= 397 * ProjectId.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmTaskSearchResult
    {
        /// <summary>
        /// Search for PpmTask objects by multiple properties.
        /// See
        /// See the PpmTaskFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.IPpmTaskSearch_PpmTaskSearch PpmTaskSearch { get; }
    }

    /// <summary>
    /// Wrapper object for search results for PpmTask
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmTaskSearch_PpmTaskSearch
    {
        /// <summary>
        /// Results of the search
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmTaskSearch_PpmTaskSearch_Data> Data { get; }
    }

    /// <summary>
    /// Wrapper object for search results for PpmTask
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmTaskSearch_PpmTaskSearch_PpmTaskSearchResults : IPpmTaskSearch_PpmTaskSearch
    {
    }

    /// <summary>
    /// The Task identifies the activities used to further breakdown a PPM project. Every project MUST have at least one Task.  The number of tasks will vary by type of project.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts in the General Ledger:**
    /// 
    /// * The Task value will NOT roll up to the Chart of Accounts. Task values will only be used in the PPM module.
    /// * Internal rules within the Oracle PPM module will be used to map the task to components of the GL Chart of Accounts which are not directly mapped to other components of the POET(AF) segments.
    /// 
    /// **Examples:**
    /// 
    /// * Design
    /// * Construction
    /// * Data Gathering & Analysis
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmTaskSearch_PpmTaskSearch_Data
    {
        /// <summary>
        /// Task ID: Unique identifier of the project task.
        /// </summary>
        public global::System.Int64 Id { get; }

        /// <summary>
        /// Task Number: The number of a task.
        /// </summary>
        public global::System.String TaskNumber { get; }

        /// <summary>
        /// The project that the task is linked to
        /// </summary>
        public global::System.Int64 ProjectId { get; }

        /// <summary>
        /// Task Name: The name of the task. A task is a subdivision of the project work. Each project can have a set of top tasks and a hierarchy of subtasks below each top task.
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// The Task identifies the activities used to further breakdown a PPM project. Every project MUST have at least one Task.  The number of tasks will vary by type of project.
    /// 
    /// **Roll-up relationship to the new Chart of Accounts in the General Ledger:**
    /// 
    /// * The Task value will NOT roll up to the Chart of Accounts. Task values will only be used in the PPM module.
    /// * Internal rules within the Oracle PPM module will be used to map the task to components of the GL Chart of Accounts which are not directly mapped to other components of the POET(AF) segments.
    /// 
    /// **Examples:**
    /// 
    /// * Design
    /// * Construction
    /// * Data Gathering & Analysis
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmTaskSearch_PpmTaskSearch_Data_PpmTask : IPpmTaskSearch_PpmTaskSearch_Data
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsResult : global::System.IEquatable<GlValidateChartSegmentsResult>, IGlValidateChartSegmentsResult
    {
        public GlValidateChartSegmentsResult(global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments glValidateChartSegments)
        {
            GlValidateChartSegments = glValidateChartSegments;
        }

        /// <summary>
        /// Validates that the given set of GL chartstring segments are most likely valid for posting
        /// to the financial system general ledger.  Individual non-blank elements will be checked
        /// for current validity.
        /// 
        /// If validateCVRs is true, certain combinations of attributes will be sanity checked.
        /// 
        /// This operation will return a fully populated set of segments, including defaults in
        /// both individual segment and full chartstring form.
        /// 
        /// If the combination was previously known/used in the financial system, its unique ID will be included.
        /// </summary>
        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments GlValidateChartSegments { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegmentsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GlValidateChartSegments.Equals(other.GlValidateChartSegments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegmentsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GlValidateChartSegments.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Return data structure when validating a set of GL segment values.
    /// 
    /// The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.
    /// 
    /// The operation will complete any missing segments with their defaults and return them populated in the "segments" property as well as the "completeChartstring" property.  Both of these are structured such that (if all properties requested) they could be included as accounting line or distribution data in other operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput : global::System.IEquatable<GlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput>, IGlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput
    {
        public GlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput(global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse validationResponse, global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Segments segments, global::System.String? completeChartstring, global::System.Int64? codeCombinationId, global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_SegmentNames segmentNames, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Warnings>? warnings, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_EndDates>? endDates)
        {
            ValidationResponse = validationResponse;
            Segments = segments;
            CompleteChartstring = completeChartstring;
            CodeCombinationId = codeCombinationId;
            SegmentNames = segmentNames;
            Warnings = warnings;
            EndDates = endDates;
        }

        /// <summary>
        /// Validation result and error messages, if any.
        /// </summary>
        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse ValidationResponse { get; }

        /// <summary>
        /// Fully populated object with the GL segments combination that was validated.
        /// </summary>
        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Segments Segments { get; }

        /// <summary>
        /// Full chartstring with the GL segments combination that was validated.
        /// </summary>
        public global::System.String? CompleteChartstring { get; }

        /// <summary>
        /// The "codeCombinationId" is an informational property only.  If populated, it
        /// indicates that the validated combination of segment values was previously
        /// known to the financial system.  Validity still needs to be checked, as
        /// chartstrings can be disabled or expire.  However, segments which match an
        /// existing valid combination can not fail validation when posted to the
        /// financial system.
        /// </summary>
        public global::System.Int64? CodeCombinationId { get; }

        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_SegmentNames SegmentNames { get; }

        /// <summary>
        /// Warnings, if any, related to segments validated during this operation.  The segmentName will be the same as the property name in the GlSegments object.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Warnings>? Warnings { get; }

        /// <summary>
        /// End Dates, if defined, after which a given segment will no longer be accepted for processing.  The segmentName will be the same as the property name in the GlSegments type.  Only segments which have defined end dates will be included in this list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_EndDates>? EndDates { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ValidationResponse.Equals(other.ValidationResponse)) && Segments.Equals(other.Segments) && ((CompleteChartstring is null && other.CompleteChartstring is null) || CompleteChartstring != null && CompleteChartstring.Equals(other.CompleteChartstring)) && CodeCombinationId == other.CodeCombinationId && SegmentNames.Equals(other.SegmentNames) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Warnings, other.Warnings) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(EndDates, other.EndDates);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ValidationResponse.GetHashCode();
                hash ^= 397 * Segments.GetHashCode();
                if (CompleteChartstring != null)
                {
                    hash ^= 397 * CompleteChartstring.GetHashCode();
                }

                if (CodeCombinationId != null)
                {
                    hash ^= 397 * CodeCombinationId.GetHashCode();
                }

                hash ^= 397 * SegmentNames.GetHashCode();
                if (Warnings != null)
                {
                    foreach (var Warnings_elm in Warnings)
                    {
                        hash ^= 397 * Warnings_elm.GetHashCode();
                    }
                }

                if (EndDates != null)
                {
                    foreach (var EndDates_elm in EndDates)
                    {
                        hash ^= 397 * EndDates_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse : global::System.IEquatable<GlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse>, IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse
    {
        public GlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse(global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties, global::System.Boolean valid)
        {
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
            Valid = valid;
        }

        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MessageProperties, other.MessageProperties) && Valid == other.Valid;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (MessageProperties != null)
                {
                    foreach (var MessageProperties_elm in MessageProperties)
                    {
                        hash ^= 397 * MessageProperties_elm.GetHashCode();
                    }
                }

                hash ^= 397 * Valid.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// GL segment values as separate fields.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments : global::System.IEquatable<GlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments>, IGlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments
    {
        public GlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments(global::System.String? account, global::System.String? activity, global::System.String? department, global::System.String? entity, global::System.String? fund, global::System.String? program, global::System.String? project, global::System.String? purpose)
        {
            Account = account;
            Activity = activity;
            Department = department;
            Entity = entity;
            Fund = fund;
            Program = program;
            Project = project;
            Purpose = purpose;
        }

        /// <summary>
        /// Required: Nature of the transaction, expense, income, liability, etc...
        /// </summary>
        public global::System.String? Account { get; }

        /// <summary>
        /// Optional: 
        /// </summary>
        public global::System.String? Activity { get; }

        /// <summary>
        /// Required: Financial department to which to charge a transaction.
        /// </summary>
        public global::System.String? Department { get; }

        /// <summary>
        /// Required: Entity to which to charge a transaction.
        /// </summary>
        public global::System.String? Entity { get; }

        /// <summary>
        /// Required: Funding source to which to charge a transaction.
        /// </summary>
        public global::System.String? Fund { get; }

        /// <summary>
        /// Optional: 
        /// </summary>
        public global::System.String? Program { get; }

        /// <summary>
        /// Optional: 
        /// </summary>
        public global::System.String? Project { get; }

        /// <summary>
        /// Required for Expenses: Functional purpose of the expense.
        /// </summary>
        public global::System.String? Purpose { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Account is null && other.Account is null) || Account != null && Account.Equals(other.Account))) && ((Activity is null && other.Activity is null) || Activity != null && Activity.Equals(other.Activity)) && ((Department is null && other.Department is null) || Department != null && Department.Equals(other.Department)) && ((Entity is null && other.Entity is null) || Entity != null && Entity.Equals(other.Entity)) && ((Fund is null && other.Fund is null) || Fund != null && Fund.Equals(other.Fund)) && ((Program is null && other.Program is null) || Program != null && Program.Equals(other.Program)) && ((Project is null && other.Project is null) || Project != null && Project.Equals(other.Project)) && ((Purpose is null && other.Purpose is null) || Purpose != null && Purpose.Equals(other.Purpose));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Account != null)
                {
                    hash ^= 397 * Account.GetHashCode();
                }

                if (Activity != null)
                {
                    hash ^= 397 * Activity.GetHashCode();
                }

                if (Department != null)
                {
                    hash ^= 397 * Department.GetHashCode();
                }

                if (Entity != null)
                {
                    hash ^= 397 * Entity.GetHashCode();
                }

                if (Fund != null)
                {
                    hash ^= 397 * Fund.GetHashCode();
                }

                if (Program != null)
                {
                    hash ^= 397 * Program.GetHashCode();
                }

                if (Project != null)
                {
                    hash ^= 397 * Project.GetHashCode();
                }

                if (Purpose != null)
                {
                    hash ^= 397 * Purpose.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames : global::System.IEquatable<GlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames>, IGlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames
    {
        public GlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames(global::System.String? entityName, global::System.String? fundName, global::System.String? departmentName, global::System.String? accountName, global::System.String? purposeName, global::System.String? projectName, global::System.String? programName, global::System.String? activityName)
        {
            EntityName = entityName;
            FundName = fundName;
            DepartmentName = departmentName;
            AccountName = accountName;
            PurposeName = purposeName;
            ProjectName = projectName;
            ProgramName = programName;
            ActivityName = activityName;
        }

        public global::System.String? EntityName { get; }

        public global::System.String? FundName { get; }

        public global::System.String? DepartmentName { get; }

        public global::System.String? AccountName { get; }

        public global::System.String? PurposeName { get; }

        public global::System.String? ProjectName { get; }

        public global::System.String? ProgramName { get; }

        public global::System.String? ActivityName { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((EntityName is null && other.EntityName is null) || EntityName != null && EntityName.Equals(other.EntityName))) && ((FundName is null && other.FundName is null) || FundName != null && FundName.Equals(other.FundName)) && ((DepartmentName is null && other.DepartmentName is null) || DepartmentName != null && DepartmentName.Equals(other.DepartmentName)) && ((AccountName is null && other.AccountName is null) || AccountName != null && AccountName.Equals(other.AccountName)) && ((PurposeName is null && other.PurposeName is null) || PurposeName != null && PurposeName.Equals(other.PurposeName)) && ((ProjectName is null && other.ProjectName is null) || ProjectName != null && ProjectName.Equals(other.ProjectName)) && ((ProgramName is null && other.ProgramName is null) || ProgramName != null && ProgramName.Equals(other.ProgramName)) && ((ActivityName is null && other.ActivityName is null) || ActivityName != null && ActivityName.Equals(other.ActivityName));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (EntityName != null)
                {
                    hash ^= 397 * EntityName.GetHashCode();
                }

                if (FundName != null)
                {
                    hash ^= 397 * FundName.GetHashCode();
                }

                if (DepartmentName != null)
                {
                    hash ^= 397 * DepartmentName.GetHashCode();
                }

                if (AccountName != null)
                {
                    hash ^= 397 * AccountName.GetHashCode();
                }

                if (PurposeName != null)
                {
                    hash ^= 397 * PurposeName.GetHashCode();
                }

                if (ProjectName != null)
                {
                    hash ^= 397 * ProjectName.GetHashCode();
                }

                if (ProgramName != null)
                {
                    hash ^= 397 * ProgramName.GetHashCode();
                }

                if (ActivityName != null)
                {
                    hash ^= 397 * ActivityName.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Warning issued when validating a given segment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning : global::System.IEquatable<GlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning>, IGlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning
    {
        public GlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning(global::System.String segmentName, global::System.String warning)
        {
            SegmentName = segmentName;
            Warning = warning;
        }

        /// <summary>
        /// Name of the segment per the property name in the GlSegments or PpmSegments types.
        /// </summary>
        public global::System.String SegmentName { get; }

        /// <summary>
        /// Warning message associated with the use of the given segment.
        /// </summary>
        public global::System.String Warning { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SegmentName.Equals(other.SegmentName)) && Warning.Equals(other.Warning);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SegmentName.GetHashCode();
                hash ^= 397 * Warning.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Valid end date for a given segment in a GL or PPM chartstring.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate : global::System.IEquatable<GlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate>, IGlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate
    {
        public GlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate(global::System.String segmentName, global::System.String endDate)
        {
            SegmentName = segmentName;
            EndDate = endDate;
        }

        /// <summary>
        /// Name of the segment per the property name in the GlSegments or PpmSegments types.
        /// </summary>
        public global::System.String SegmentName { get; }

        /// <summary>
        /// End date of the given segment as defined in the associated table.
        /// </summary>
        public global::System.String EndDate { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SegmentName.Equals(other.SegmentName)) && EndDate.Equals(other.EndDate);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SegmentName.GetHashCode();
                hash ^= 397 * EndDate.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegmentsResult
    {
        /// <summary>
        /// Validates that the given set of GL chartstring segments are most likely valid for posting
        /// to the financial system general ledger.  Individual non-blank elements will be checked
        /// for current validity.
        /// 
        /// If validateCVRs is true, certain combinations of attributes will be sanity checked.
        /// 
        /// This operation will return a fully populated set of segments, including defaults in
        /// both individual segment and full chartstring form.
        /// 
        /// If the combination was previously known/used in the financial system, its unique ID will be included.
        /// </summary>
        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments GlValidateChartSegments { get; }
    }

    /// <summary>
    /// Return data structure when validating a set of GL segment values.
    /// 
    /// The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.
    /// 
    /// The operation will complete any missing segments with their defaults and return them populated in the "segments" property as well as the "completeChartstring" property.  Both of these are structured such that (if all properties requested) they could be included as accounting line or distribution data in other operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments
    {
        /// <summary>
        /// Validation result and error messages, if any.
        /// </summary>
        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse ValidationResponse { get; }

        /// <summary>
        /// Fully populated object with the GL segments combination that was validated.
        /// </summary>
        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Segments Segments { get; }

        /// <summary>
        /// Full chartstring with the GL segments combination that was validated.
        /// </summary>
        public global::System.String? CompleteChartstring { get; }

        /// <summary>
        /// The "codeCombinationId" is an informational property only.  If populated, it
        /// indicates that the validated combination of segment values was previously
        /// known to the financial system.  Validity still needs to be checked, as
        /// chartstrings can be disabled or expire.  However, segments which match an
        /// existing valid combination can not fail validation when posted to the
        /// financial system.
        /// </summary>
        public global::System.Int64? CodeCombinationId { get; }

        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_SegmentNames SegmentNames { get; }

        /// <summary>
        /// Warnings, if any, related to segments validated during this operation.  The segmentName will be the same as the property name in the GlSegments object.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Warnings>? Warnings { get; }

        /// <summary>
        /// End Dates, if defined, after which a given segment will no longer be accepted for processing.  The segmentName will be the same as the property name in the GlSegments type.  Only segments which have defined end dates will be included in this list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_EndDates>? EndDates { get; }
    }

    /// <summary>
    /// Return data structure when validating a set of GL segment values.
    /// 
    /// The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.
    /// 
    /// The operation will complete any missing segments with their defaults and return them populated in the "segments" property as well as the "completeChartstring" property.  Both of these are structured such that (if all properties requested) they could be included as accounting line or distribution data in other operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput : IGlValidateChartSegments_GlValidateChartSegments
    {
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse
    {
        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse : IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse
    {
    }

    /// <summary>
    /// GL segment values as separate fields.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_Segments
    {
        /// <summary>
        /// Required: Nature of the transaction, expense, income, liability, etc...
        /// </summary>
        public global::System.String? Account { get; }

        /// <summary>
        /// Optional: 
        /// </summary>
        public global::System.String? Activity { get; }

        /// <summary>
        /// Required: Financial department to which to charge a transaction.
        /// </summary>
        public global::System.String? Department { get; }

        /// <summary>
        /// Required: Entity to which to charge a transaction.
        /// </summary>
        public global::System.String? Entity { get; }

        /// <summary>
        /// Required: Funding source to which to charge a transaction.
        /// </summary>
        public global::System.String? Fund { get; }

        /// <summary>
        /// Optional: 
        /// </summary>
        public global::System.String? Program { get; }

        /// <summary>
        /// Optional: 
        /// </summary>
        public global::System.String? Project { get; }

        /// <summary>
        /// Required for Expenses: Functional purpose of the expense.
        /// </summary>
        public global::System.String? Purpose { get; }
    }

    /// <summary>
    /// GL segment values as separate fields.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments : IGlValidateChartSegments_GlValidateChartSegments_Segments
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_SegmentNames
    {
        public global::System.String? EntityName { get; }

        public global::System.String? FundName { get; }

        public global::System.String? DepartmentName { get; }

        public global::System.String? AccountName { get; }

        public global::System.String? PurposeName { get; }

        public global::System.String? ProjectName { get; }

        public global::System.String? ProgramName { get; }

        public global::System.String? ActivityName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames : IGlValidateChartSegments_GlValidateChartSegments_SegmentNames
    {
    }

    /// <summary>
    /// Warning issued when validating a given segment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_Warnings
    {
        /// <summary>
        /// Name of the segment per the property name in the GlSegments or PpmSegments types.
        /// </summary>
        public global::System.String SegmentName { get; }

        /// <summary>
        /// Warning message associated with the use of the given segment.
        /// </summary>
        public global::System.String Warning { get; }
    }

    /// <summary>
    /// Warning issued when validating a given segment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning : IGlValidateChartSegments_GlValidateChartSegments_Warnings
    {
    }

    /// <summary>
    /// Valid end date for a given segment in a GL or PPM chartstring.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_EndDates
    {
        /// <summary>
        /// Name of the segment per the property name in the GlSegments or PpmSegments types.
        /// </summary>
        public global::System.String SegmentName { get; }

        /// <summary>
        /// End date of the given segment as defined in the associated table.
        /// </summary>
        public global::System.String EndDate { get; }
    }

    /// <summary>
    /// Valid end date for a given segment in a GL or PPM chartstring.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate : IGlValidateChartSegments_GlValidateChartSegments_EndDates
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstringResult : global::System.IEquatable<GlValidateChartstringResult>, IGlValidateChartstringResult
    {
        public GlValidateChartstringResult(global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring glValidateChartstring)
        {
            GlValidateChartstring = glValidateChartstring;
        }

        /// <summary>
        /// Validates that the given GL chartstring is most likely valid for posting
        /// to the financial system general ledger.  The input string format is strongly typed
        /// and will reject the call if not structured properly.  Please see the definition of the
        /// [GlSegmentString]({{Types.GlSegmentString}}) for format information.
        /// 
        /// If validateCVRs is true, certain combinations of attributes will be sanity checked if the string format is accepted.
        /// 
        /// This operation will return the validation result and the segments as parsed out into their component fields.
        /// 
        /// If the combination was previously known/used in the financial system, its unique ID will be included.
        /// </summary>
        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring GlValidateChartstring { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstringResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GlValidateChartstring.Equals(other.GlValidateChartstring));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstringResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GlValidateChartstring.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Return data structure when validating a set of GL segment values.
    /// 
    /// The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.
    /// 
    /// The operation will complete any missing segments with their defaults and return them populated in the "segments" property as well as the "completeChartstring" property.  Both of these are structured such that (if all properties requested) they could be included as accounting line or distribution data in other operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput : global::System.IEquatable<GlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput>, IGlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput
    {
        public GlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput(global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_ValidationResponse validationResponse, global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Segments segments, global::System.String? completeChartstring, global::System.Int64? codeCombinationId, global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_SegmentNames segmentNames, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Warnings>? warnings, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_EndDates>? endDates)
        {
            ValidationResponse = validationResponse;
            Segments = segments;
            CompleteChartstring = completeChartstring;
            CodeCombinationId = codeCombinationId;
            SegmentNames = segmentNames;
            Warnings = warnings;
            EndDates = endDates;
        }

        /// <summary>
        /// Validation result and error messages, if any.
        /// </summary>
        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_ValidationResponse ValidationResponse { get; }

        /// <summary>
        /// Fully populated object with the GL segments combination that was validated.
        /// </summary>
        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Segments Segments { get; }

        /// <summary>
        /// Full chartstring with the GL segments combination that was validated.
        /// </summary>
        public global::System.String? CompleteChartstring { get; }

        /// <summary>
        /// The "codeCombinationId" is an informational property only.  If populated, it
        /// indicates that the validated combination of segment values was previously
        /// known to the financial system.  Validity still needs to be checked, as
        /// chartstrings can be disabled or expire.  However, segments which match an
        /// existing valid combination can not fail validation when posted to the
        /// financial system.
        /// </summary>
        public global::System.Int64? CodeCombinationId { get; }

        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_SegmentNames SegmentNames { get; }

        /// <summary>
        /// Warnings, if any, related to segments validated during this operation.  The segmentName will be the same as the property name in the GlSegments object.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Warnings>? Warnings { get; }

        /// <summary>
        /// End Dates, if defined, after which a given segment will no longer be accepted for processing.  The segmentName will be the same as the property name in the GlSegments type.  Only segments which have defined end dates will be included in this list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_EndDates>? EndDates { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ValidationResponse.Equals(other.ValidationResponse)) && Segments.Equals(other.Segments) && ((CompleteChartstring is null && other.CompleteChartstring is null) || CompleteChartstring != null && CompleteChartstring.Equals(other.CompleteChartstring)) && CodeCombinationId == other.CodeCombinationId && SegmentNames.Equals(other.SegmentNames) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Warnings, other.Warnings) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(EndDates, other.EndDates);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ValidationResponse.GetHashCode();
                hash ^= 397 * Segments.GetHashCode();
                if (CompleteChartstring != null)
                {
                    hash ^= 397 * CompleteChartstring.GetHashCode();
                }

                if (CodeCombinationId != null)
                {
                    hash ^= 397 * CodeCombinationId.GetHashCode();
                }

                hash ^= 397 * SegmentNames.GetHashCode();
                if (Warnings != null)
                {
                    foreach (var Warnings_elm in Warnings)
                    {
                        hash ^= 397 * Warnings_elm.GetHashCode();
                    }
                }

                if (EndDates != null)
                {
                    foreach (var EndDates_elm in EndDates)
                    {
                        hash ^= 397 * EndDates_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse : global::System.IEquatable<GlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse>, IGlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse
    {
        public GlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse(global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties, global::System.Boolean valid)
        {
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
            Valid = valid;
        }

        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MessageProperties, other.MessageProperties) && Valid == other.Valid;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (MessageProperties != null)
                {
                    foreach (var MessageProperties_elm in MessageProperties)
                    {
                        hash ^= 397 * MessageProperties_elm.GetHashCode();
                    }
                }

                hash ^= 397 * Valid.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// GL segment values as separate fields.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstring_GlValidateChartstring_Segments_GlSegments : global::System.IEquatable<GlValidateChartstring_GlValidateChartstring_Segments_GlSegments>, IGlValidateChartstring_GlValidateChartstring_Segments_GlSegments
    {
        public GlValidateChartstring_GlValidateChartstring_Segments_GlSegments(global::System.String? account, global::System.String? activity, global::System.String? department, global::System.String? entity, global::System.String? fund, global::System.String? program, global::System.String? project, global::System.String? purpose)
        {
            Account = account;
            Activity = activity;
            Department = department;
            Entity = entity;
            Fund = fund;
            Program = program;
            Project = project;
            Purpose = purpose;
        }

        /// <summary>
        /// Required: Nature of the transaction, expense, income, liability, etc...
        /// </summary>
        public global::System.String? Account { get; }

        /// <summary>
        /// Optional: 
        /// </summary>
        public global::System.String? Activity { get; }

        /// <summary>
        /// Required: Financial department to which to charge a transaction.
        /// </summary>
        public global::System.String? Department { get; }

        /// <summary>
        /// Required: Entity to which to charge a transaction.
        /// </summary>
        public global::System.String? Entity { get; }

        /// <summary>
        /// Required: Funding source to which to charge a transaction.
        /// </summary>
        public global::System.String? Fund { get; }

        /// <summary>
        /// Optional: 
        /// </summary>
        public global::System.String? Program { get; }

        /// <summary>
        /// Optional: 
        /// </summary>
        public global::System.String? Project { get; }

        /// <summary>
        /// Required for Expenses: Functional purpose of the expense.
        /// </summary>
        public global::System.String? Purpose { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstring_GlValidateChartstring_Segments_GlSegments? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Account is null && other.Account is null) || Account != null && Account.Equals(other.Account))) && ((Activity is null && other.Activity is null) || Activity != null && Activity.Equals(other.Activity)) && ((Department is null && other.Department is null) || Department != null && Department.Equals(other.Department)) && ((Entity is null && other.Entity is null) || Entity != null && Entity.Equals(other.Entity)) && ((Fund is null && other.Fund is null) || Fund != null && Fund.Equals(other.Fund)) && ((Program is null && other.Program is null) || Program != null && Program.Equals(other.Program)) && ((Project is null && other.Project is null) || Project != null && Project.Equals(other.Project)) && ((Purpose is null && other.Purpose is null) || Purpose != null && Purpose.Equals(other.Purpose));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstring_GlValidateChartstring_Segments_GlSegments)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Account != null)
                {
                    hash ^= 397 * Account.GetHashCode();
                }

                if (Activity != null)
                {
                    hash ^= 397 * Activity.GetHashCode();
                }

                if (Department != null)
                {
                    hash ^= 397 * Department.GetHashCode();
                }

                if (Entity != null)
                {
                    hash ^= 397 * Entity.GetHashCode();
                }

                if (Fund != null)
                {
                    hash ^= 397 * Fund.GetHashCode();
                }

                if (Program != null)
                {
                    hash ^= 397 * Program.GetHashCode();
                }

                if (Project != null)
                {
                    hash ^= 397 * Project.GetHashCode();
                }

                if (Purpose != null)
                {
                    hash ^= 397 * Purpose.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames : global::System.IEquatable<GlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames>, IGlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames
    {
        public GlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames(global::System.String? entityName, global::System.String? fundName, global::System.String? departmentName, global::System.String? accountName, global::System.String? purposeName, global::System.String? projectName, global::System.String? programName, global::System.String? activityName)
        {
            EntityName = entityName;
            FundName = fundName;
            DepartmentName = departmentName;
            AccountName = accountName;
            PurposeName = purposeName;
            ProjectName = projectName;
            ProgramName = programName;
            ActivityName = activityName;
        }

        public global::System.String? EntityName { get; }

        public global::System.String? FundName { get; }

        public global::System.String? DepartmentName { get; }

        public global::System.String? AccountName { get; }

        public global::System.String? PurposeName { get; }

        public global::System.String? ProjectName { get; }

        public global::System.String? ProgramName { get; }

        public global::System.String? ActivityName { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((EntityName is null && other.EntityName is null) || EntityName != null && EntityName.Equals(other.EntityName))) && ((FundName is null && other.FundName is null) || FundName != null && FundName.Equals(other.FundName)) && ((DepartmentName is null && other.DepartmentName is null) || DepartmentName != null && DepartmentName.Equals(other.DepartmentName)) && ((AccountName is null && other.AccountName is null) || AccountName != null && AccountName.Equals(other.AccountName)) && ((PurposeName is null && other.PurposeName is null) || PurposeName != null && PurposeName.Equals(other.PurposeName)) && ((ProjectName is null && other.ProjectName is null) || ProjectName != null && ProjectName.Equals(other.ProjectName)) && ((ProgramName is null && other.ProgramName is null) || ProgramName != null && ProgramName.Equals(other.ProgramName)) && ((ActivityName is null && other.ActivityName is null) || ActivityName != null && ActivityName.Equals(other.ActivityName));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (EntityName != null)
                {
                    hash ^= 397 * EntityName.GetHashCode();
                }

                if (FundName != null)
                {
                    hash ^= 397 * FundName.GetHashCode();
                }

                if (DepartmentName != null)
                {
                    hash ^= 397 * DepartmentName.GetHashCode();
                }

                if (AccountName != null)
                {
                    hash ^= 397 * AccountName.GetHashCode();
                }

                if (PurposeName != null)
                {
                    hash ^= 397 * PurposeName.GetHashCode();
                }

                if (ProjectName != null)
                {
                    hash ^= 397 * ProjectName.GetHashCode();
                }

                if (ProgramName != null)
                {
                    hash ^= 397 * ProgramName.GetHashCode();
                }

                if (ActivityName != null)
                {
                    hash ^= 397 * ActivityName.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Warning issued when validating a given segment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning : global::System.IEquatable<GlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning>, IGlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning
    {
        public GlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning(global::System.String segmentName, global::System.String warning)
        {
            SegmentName = segmentName;
            Warning = warning;
        }

        /// <summary>
        /// Name of the segment per the property name in the GlSegments or PpmSegments types.
        /// </summary>
        public global::System.String SegmentName { get; }

        /// <summary>
        /// Warning message associated with the use of the given segment.
        /// </summary>
        public global::System.String Warning { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SegmentName.Equals(other.SegmentName)) && Warning.Equals(other.Warning);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SegmentName.GetHashCode();
                hash ^= 397 * Warning.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Valid end date for a given segment in a GL or PPM chartstring.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate : global::System.IEquatable<GlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate>, IGlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate
    {
        public GlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate(global::System.String segmentName, global::System.String endDate)
        {
            SegmentName = segmentName;
            EndDate = endDate;
        }

        /// <summary>
        /// Name of the segment per the property name in the GlSegments or PpmSegments types.
        /// </summary>
        public global::System.String SegmentName { get; }

        /// <summary>
        /// End date of the given segment as defined in the associated table.
        /// </summary>
        public global::System.String EndDate { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SegmentName.Equals(other.SegmentName)) && EndDate.Equals(other.EndDate);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SegmentName.GetHashCode();
                hash ^= 397 * EndDate.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstringResult
    {
        /// <summary>
        /// Validates that the given GL chartstring is most likely valid for posting
        /// to the financial system general ledger.  The input string format is strongly typed
        /// and will reject the call if not structured properly.  Please see the definition of the
        /// [GlSegmentString]({{Types.GlSegmentString}}) for format information.
        /// 
        /// If validateCVRs is true, certain combinations of attributes will be sanity checked if the string format is accepted.
        /// 
        /// This operation will return the validation result and the segments as parsed out into their component fields.
        /// 
        /// If the combination was previously known/used in the financial system, its unique ID will be included.
        /// </summary>
        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring GlValidateChartstring { get; }
    }

    /// <summary>
    /// Return data structure when validating a set of GL segment values.
    /// 
    /// The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.
    /// 
    /// The operation will complete any missing segments with their defaults and return them populated in the "segments" property as well as the "completeChartstring" property.  Both of these are structured such that (if all properties requested) they could be included as accounting line or distribution data in other operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring
    {
        /// <summary>
        /// Validation result and error messages, if any.
        /// </summary>
        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_ValidationResponse ValidationResponse { get; }

        /// <summary>
        /// Fully populated object with the GL segments combination that was validated.
        /// </summary>
        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Segments Segments { get; }

        /// <summary>
        /// Full chartstring with the GL segments combination that was validated.
        /// </summary>
        public global::System.String? CompleteChartstring { get; }

        /// <summary>
        /// The "codeCombinationId" is an informational property only.  If populated, it
        /// indicates that the validated combination of segment values was previously
        /// known to the financial system.  Validity still needs to be checked, as
        /// chartstrings can be disabled or expire.  However, segments which match an
        /// existing valid combination can not fail validation when posted to the
        /// financial system.
        /// </summary>
        public global::System.Int64? CodeCombinationId { get; }

        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_SegmentNames SegmentNames { get; }

        /// <summary>
        /// Warnings, if any, related to segments validated during this operation.  The segmentName will be the same as the property name in the GlSegments object.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Warnings>? Warnings { get; }

        /// <summary>
        /// End Dates, if defined, after which a given segment will no longer be accepted for processing.  The segmentName will be the same as the property name in the GlSegments type.  Only segments which have defined end dates will be included in this list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_EndDates>? EndDates { get; }
    }

    /// <summary>
    /// Return data structure when validating a set of GL segment values.
    /// 
    /// The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.
    /// 
    /// The operation will complete any missing segments with their defaults and return them populated in the "segments" property as well as the "completeChartstring" property.  Both of these are structured such that (if all properties requested) they could be included as accounting line or distribution data in other operations.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput : IGlValidateChartstring_GlValidateChartstring
    {
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_ValidationResponse
    {
        /// <summary>
        /// Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        /// <summary>
        /// Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        /// <summary>
        /// Whether the overall validation succeeded or failed.
        /// </summary>
        public global::System.Boolean Valid { get; }
    }

    /// <summary>
    /// Contains the validation overall status and any error messages and the properties they belong to.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse : IGlValidateChartstring_GlValidateChartstring_ValidationResponse
    {
    }

    /// <summary>
    /// GL segment values as separate fields.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_Segments
    {
        /// <summary>
        /// Required: Nature of the transaction, expense, income, liability, etc...
        /// </summary>
        public global::System.String? Account { get; }

        /// <summary>
        /// Optional: 
        /// </summary>
        public global::System.String? Activity { get; }

        /// <summary>
        /// Required: Financial department to which to charge a transaction.
        /// </summary>
        public global::System.String? Department { get; }

        /// <summary>
        /// Required: Entity to which to charge a transaction.
        /// </summary>
        public global::System.String? Entity { get; }

        /// <summary>
        /// Required: Funding source to which to charge a transaction.
        /// </summary>
        public global::System.String? Fund { get; }

        /// <summary>
        /// Optional: 
        /// </summary>
        public global::System.String? Program { get; }

        /// <summary>
        /// Optional: 
        /// </summary>
        public global::System.String? Project { get; }

        /// <summary>
        /// Required for Expenses: Functional purpose of the expense.
        /// </summary>
        public global::System.String? Purpose { get; }
    }

    /// <summary>
    /// GL segment values as separate fields.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_Segments_GlSegments : IGlValidateChartstring_GlValidateChartstring_Segments
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_SegmentNames
    {
        public global::System.String? EntityName { get; }

        public global::System.String? FundName { get; }

        public global::System.String? DepartmentName { get; }

        public global::System.String? AccountName { get; }

        public global::System.String? PurposeName { get; }

        public global::System.String? ProjectName { get; }

        public global::System.String? ProgramName { get; }

        public global::System.String? ActivityName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames : IGlValidateChartstring_GlValidateChartstring_SegmentNames
    {
    }

    /// <summary>
    /// Warning issued when validating a given segment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_Warnings
    {
        /// <summary>
        /// Name of the segment per the property name in the GlSegments or PpmSegments types.
        /// </summary>
        public global::System.String SegmentName { get; }

        /// <summary>
        /// Warning message associated with the use of the given segment.
        /// </summary>
        public global::System.String Warning { get; }
    }

    /// <summary>
    /// Warning issued when validating a given segment.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning : IGlValidateChartstring_GlValidateChartstring_Warnings
    {
    }

    /// <summary>
    /// Valid end date for a given segment in a GL or PPM chartstring.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_EndDates
    {
        /// <summary>
        /// Name of the segment per the property name in the GlSegments or PpmSegments types.
        /// </summary>
        public global::System.String SegmentName { get; }

        /// <summary>
        /// End date of the given segment as defined in the associated table.
        /// </summary>
        public global::System.String EndDate { get; }
    }

    /// <summary>
    /// Valid end date for a given segment in a GL or PPM chartstring.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate : IGlValidateChartstring_GlValidateChartstring_EndDates
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpInstitutionLocationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _searchCommonInputsFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFilterInputFormatter = default !;
        public global::System.String TypeName => "ErpInstitutionLocationFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _searchCommonInputsFormatter = serializerResolver.GetInputValueFormatter("SearchCommonInputs");
            _stringFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringFilterInput");
            _booleanFilterInputFormatter = serializerResolver.GetInputValueFormatter("BooleanFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.ErpInstitutionLocationFilterInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IErpInstitutionLocationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsSearchCommonSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("searchCommon", FormatSearchCommon(input.SearchCommon)));
            }

            if (inputInfo.IsLocationCodeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("locationCode", FormatLocationCode(input.LocationCode)));
            }

            if (inputInfo.IsAddressLine1Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("addressLine1", FormatAddressLine1(input.AddressLine1)));
            }

            if (inputInfo.IsCitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("city", FormatCity(input.City)));
            }

            if (inputInfo.IsStateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("state", FormatState(input.State)));
            }

            if (inputInfo.IsPostalCodeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("postalCode", FormatPostalCode(input.PostalCode)));
            }

            if (inputInfo.IsCountryCodeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("countryCode", FormatCountryCode(input.CountryCode)));
            }

            if (inputInfo.IsDeliverySiteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("deliverySite", FormatDeliverySite(input.DeliverySite)));
            }

            if (inputInfo.IsReceivingSiteSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("receivingSite", FormatReceivingSite(input.ReceivingSite)));
            }

            if (inputInfo.IsEnabledSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("enabled", FormatEnabled(input.Enabled)));
            }

            return fields;
        }

        private global::System.Object? FormatSearchCommon(global::AggieEnterpriseApi.SearchCommonInputs? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _searchCommonInputsFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLocationCode(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAddressLine1(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCity(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatState(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPostalCode(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCountryCode(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDeliverySite(global::AggieEnterpriseApi.BooleanFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatReceivingSite(global::AggieEnterpriseApi.BooleanFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEnabled(global::AggieEnterpriseApi.BooleanFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFilterInputFormatter.Format(input);
            }
        }
    }

    ///<summary>Data object used to run searches on ErpInstitutionLocation</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpInstitutionLocationFilterInput : global::AggieEnterpriseApi.State.IErpInstitutionLocationFilterInputInfo, global::System.IEquatable<ErpInstitutionLocationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ErpInstitutionLocationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ErpInstitutionLocationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SearchCommon is null && other.SearchCommon is null) || SearchCommon != null && SearchCommon.Equals(other.SearchCommon))) && ((LocationCode is null && other.LocationCode is null) || LocationCode != null && LocationCode.Equals(other.LocationCode)) && ((AddressLine1 is null && other.AddressLine1 is null) || AddressLine1 != null && AddressLine1.Equals(other.AddressLine1)) && ((City is null && other.City is null) || City != null && City.Equals(other.City)) && ((State is null && other.State is null) || State != null && State.Equals(other.State)) && ((PostalCode is null && other.PostalCode is null) || PostalCode != null && PostalCode.Equals(other.PostalCode)) && ((CountryCode is null && other.CountryCode is null) || CountryCode != null && CountryCode.Equals(other.CountryCode)) && ((DeliverySite is null && other.DeliverySite is null) || DeliverySite != null && DeliverySite.Equals(other.DeliverySite)) && ((ReceivingSite is null && other.ReceivingSite is null) || ReceivingSite != null && ReceivingSite.Equals(other.ReceivingSite)) && ((Enabled is null && other.Enabled is null) || Enabled != null && Enabled.Equals(other.Enabled));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SearchCommon != null)
                {
                    hash ^= 397 * SearchCommon.GetHashCode();
                }

                if (LocationCode != null)
                {
                    hash ^= 397 * LocationCode.GetHashCode();
                }

                if (AddressLine1 != null)
                {
                    hash ^= 397 * AddressLine1.GetHashCode();
                }

                if (City != null)
                {
                    hash ^= 397 * City.GetHashCode();
                }

                if (State != null)
                {
                    hash ^= 397 * State.GetHashCode();
                }

                if (PostalCode != null)
                {
                    hash ^= 397 * PostalCode.GetHashCode();
                }

                if (CountryCode != null)
                {
                    hash ^= 397 * CountryCode.GetHashCode();
                }

                if (DeliverySite != null)
                {
                    hash ^= 397 * DeliverySite.GetHashCode();
                }

                if (ReceivingSite != null)
                {
                    hash ^= 397 * ReceivingSite.GetHashCode();
                }

                if (Enabled != null)
                {
                    hash ^= 397 * Enabled.GetHashCode();
                }

                return hash;
            }
        }

        private global::AggieEnterpriseApi.SearchCommonInputs? _value_searchCommon;
        private global::System.Boolean _set_searchCommon;
        private global::AggieEnterpriseApi.StringFilterInput? _value_locationCode;
        private global::System.Boolean _set_locationCode;
        private global::AggieEnterpriseApi.StringFilterInput? _value_addressLine1;
        private global::System.Boolean _set_addressLine1;
        private global::AggieEnterpriseApi.StringFilterInput? _value_city;
        private global::System.Boolean _set_city;
        private global::AggieEnterpriseApi.StringFilterInput? _value_state;
        private global::System.Boolean _set_state;
        private global::AggieEnterpriseApi.StringFilterInput? _value_postalCode;
        private global::System.Boolean _set_postalCode;
        private global::AggieEnterpriseApi.StringFilterInput? _value_countryCode;
        private global::System.Boolean _set_countryCode;
        private global::AggieEnterpriseApi.BooleanFilterInput? _value_deliverySite;
        private global::System.Boolean _set_deliverySite;
        private global::AggieEnterpriseApi.BooleanFilterInput? _value_receivingSite;
        private global::System.Boolean _set_receivingSite;
        private global::AggieEnterpriseApi.BooleanFilterInput? _value_enabled;
        private global::System.Boolean _set_enabled;
        public global::AggieEnterpriseApi.SearchCommonInputs? SearchCommon
        {
            get => _value_searchCommon;
            set
            {
                _set_searchCommon = true;
                _value_searchCommon = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpInstitutionLocationFilterInputInfo.IsSearchCommonSet => _set_searchCommon;
        public global::AggieEnterpriseApi.StringFilterInput? LocationCode
        {
            get => _value_locationCode;
            set
            {
                _set_locationCode = true;
                _value_locationCode = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpInstitutionLocationFilterInputInfo.IsLocationCodeSet => _set_locationCode;
        public global::AggieEnterpriseApi.StringFilterInput? AddressLine1
        {
            get => _value_addressLine1;
            set
            {
                _set_addressLine1 = true;
                _value_addressLine1 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpInstitutionLocationFilterInputInfo.IsAddressLine1Set => _set_addressLine1;
        public global::AggieEnterpriseApi.StringFilterInput? City
        {
            get => _value_city;
            set
            {
                _set_city = true;
                _value_city = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpInstitutionLocationFilterInputInfo.IsCitySet => _set_city;
        public global::AggieEnterpriseApi.StringFilterInput? State
        {
            get => _value_state;
            set
            {
                _set_state = true;
                _value_state = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpInstitutionLocationFilterInputInfo.IsStateSet => _set_state;
        public global::AggieEnterpriseApi.StringFilterInput? PostalCode
        {
            get => _value_postalCode;
            set
            {
                _set_postalCode = true;
                _value_postalCode = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpInstitutionLocationFilterInputInfo.IsPostalCodeSet => _set_postalCode;
        public global::AggieEnterpriseApi.StringFilterInput? CountryCode
        {
            get => _value_countryCode;
            set
            {
                _set_countryCode = true;
                _value_countryCode = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpInstitutionLocationFilterInputInfo.IsCountryCodeSet => _set_countryCode;
        public global::AggieEnterpriseApi.BooleanFilterInput? DeliverySite
        {
            get => _value_deliverySite;
            set
            {
                _set_deliverySite = true;
                _value_deliverySite = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpInstitutionLocationFilterInputInfo.IsDeliverySiteSet => _set_deliverySite;
        public global::AggieEnterpriseApi.BooleanFilterInput? ReceivingSite
        {
            get => _value_receivingSite;
            set
            {
                _set_receivingSite = true;
                _value_receivingSite = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpInstitutionLocationFilterInputInfo.IsReceivingSiteSet => _set_receivingSite;
        public global::AggieEnterpriseApi.BooleanFilterInput? Enabled
        {
            get => _value_enabled;
            set
            {
                _set_enabled = true;
                _value_enabled = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpInstitutionLocationFilterInputInfo.IsEnabledSet => _set_enabled;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class SearchCommonInputsInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _positiveIntFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonNegativeIntFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        public global::System.String TypeName => "SearchCommonInputs";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _positiveIntFormatter = serializerResolver.GetInputValueFormatter("PositiveInt");
            _nonNegativeIntFormatter = serializerResolver.GetInputValueFormatter("NonNegativeInt");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.SearchCommonInputs;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.ISearchCommonInputsInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsSortSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("sort", FormatSort(input.Sort)));
            }

            if (inputInfo.IsLimitSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("limit", FormatLimit(input.Limit)));
            }

            if (inputInfo.IsStartIndexSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("startIndex", FormatStartIndex(input.StartIndex)));
            }

            if (inputInfo.IsIncludeTotalResultCountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("includeTotalResultCount", FormatIncludeTotalResultCount(input.IncludeTotalResultCount)));
            }

            return fields;
        }

        private global::System.Object? FormatSort(global::System.Collections.Generic.IReadOnlyList<global::System.String>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatLimit(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _positiveIntFormatter.Format(input);
            }
        }

        private global::System.Object? FormatStartIndex(global::System.Int32? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonNegativeIntFormatter.Format(input);
            }
        }

        private global::System.Object? FormatIncludeTotalResultCount(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }
    }

    ///<summary>Special properties common to all common search operations.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class SearchCommonInputs : global::AggieEnterpriseApi.State.ISearchCommonInputsInfo, global::System.IEquatable<SearchCommonInputs>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((SearchCommonInputs)obj);
        }

        public virtual global::System.Boolean Equals(SearchCommonInputs? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Sort, other.Sort)) && Limit == other.Limit && StartIndex == other.StartIndex && IncludeTotalResultCount == other.IncludeTotalResultCount;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Sort != null)
                {
                    foreach (var Sort_elm in Sort)
                    {
                        hash ^= 397 * Sort_elm.GetHashCode();
                    }
                }

                if (Limit != null)
                {
                    hash ^= 397 * Limit.GetHashCode();
                }

                if (StartIndex != null)
                {
                    hash ^= 397 * StartIndex.GetHashCode();
                }

                if (IncludeTotalResultCount != null)
                {
                    hash ^= 397 * IncludeTotalResultCount.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? _value_sort;
        private global::System.Boolean _set_sort;
        private global::System.Int32? _value_limit;
        private global::System.Boolean _set_limit;
        private global::System.Int32? _value_startIndex;
        private global::System.Boolean _set_startIndex;
        private global::System.Boolean? _value_includeTotalResultCount;
        private global::System.Boolean _set_includeTotalResultCount;
        ///<summary>Array of property names to sort on</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Sort
        {
            get => _value_sort;
            set
            {
                _set_sort = true;
                _value_sort = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.ISearchCommonInputsInfo.IsSortSet => _set_sort;
        ///<summary>maximum number of records to retrieve</summary>
        public global::System.Int32? Limit
        {
            get => _value_limit;
            set
            {
                _set_limit = true;
                _value_limit = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.ISearchCommonInputsInfo.IsLimitSet => _set_limit;
        ///<summary>Record number to start with</summary>
        public global::System.Int32? StartIndex
        {
            get => _value_startIndex;
            set
            {
                _set_startIndex = true;
                _value_startIndex = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.ISearchCommonInputsInfo.IsStartIndexSet => _set_startIndex;
        ///<summary>Whether to include a count of all records to be returned by this search.  Will increase search time.</summary>
        public global::System.Boolean? IncludeTotalResultCount
        {
            get => _value_includeTotalResultCount;
            set
            {
                _set_includeTotalResultCount = true;
                _value_includeTotalResultCount = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.ISearchCommonInputsInfo.IsIncludeTotalResultCountSet => _set_includeTotalResultCount;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class StringFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        public global::System.String TypeName => "StringFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.StringFilterInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IStringFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ne", FormatNe(input.Ne)));
            }

            if (inputInfo.IsLeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("le", FormatLe(input.Le)));
            }

            if (inputInfo.IsLtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lt", FormatLt(input.Lt)));
            }

            if (inputInfo.IsGeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ge", FormatGe(input.Ge)));
            }

            if (inputInfo.IsGtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gt", FormatGt(input.Gt)));
            }

            if (inputInfo.IsBeginsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("beginsWith", FormatBeginsWith(input.BeginsWith)));
            }

            if (inputInfo.IsEndsWithSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("endsWith", FormatEndsWith(input.EndsWith)));
            }

            if (inputInfo.IsContainsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("contains", FormatContains(input.Contains)));
            }

            if (inputInfo.IsNotContainsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("notContains", FormatNotContains(input.NotContains)));
            }

            if (inputInfo.IsBetweenSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("between", FormatBetween(input.Between)));
            }

            if (inputInfo.IsInSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("in", FormatIn(input.In)));
            }

            return fields;
        }

        private global::System.Object? FormatEq(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNe(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLe(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLt(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGe(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGt(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatBeginsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEndsWith(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatContains(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNotContains(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatBetween(global::System.Collections.Generic.IReadOnlyList<global::System.String>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        throw new global::System.ArgumentNullException(nameof(input_elm));
                    }

                    input_list.Add(_stringFormatter.Format(input_elm));
                }

                return input_list;
            }
        }

        private global::System.Object? FormatIn(global::System.Collections.Generic.IReadOnlyList<global::System.String?>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    if (input_elm is null)
                    {
                        input_list.Add(input_elm);
                    }
                    else
                    {
                        input_list.Add(_stringFormatter.Format(input_elm));
                    }
                }

                return input_list;
            }
        }
    }

    ///<summary>String filter criteria object, only one of this object's properties should be set.  Except as noted in the properties below, all comparisons are case-sensitive.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class StringFilterInput : global::AggieEnterpriseApi.State.IStringFilterInputInfo, global::System.IEquatable<StringFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((StringFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(StringFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Eq is null && other.Eq is null) || Eq != null && Eq.Equals(other.Eq))) && ((Ne is null && other.Ne is null) || Ne != null && Ne.Equals(other.Ne)) && ((Le is null && other.Le is null) || Le != null && Le.Equals(other.Le)) && ((Lt is null && other.Lt is null) || Lt != null && Lt.Equals(other.Lt)) && ((Ge is null && other.Ge is null) || Ge != null && Ge.Equals(other.Ge)) && ((Gt is null && other.Gt is null) || Gt != null && Gt.Equals(other.Gt)) && ((BeginsWith is null && other.BeginsWith is null) || BeginsWith != null && BeginsWith.Equals(other.BeginsWith)) && ((EndsWith is null && other.EndsWith is null) || EndsWith != null && EndsWith.Equals(other.EndsWith)) && ((Contains is null && other.Contains is null) || Contains != null && Contains.Equals(other.Contains)) && ((NotContains is null && other.NotContains is null) || NotContains != null && NotContains.Equals(other.NotContains)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Between, other.Between) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(In, other.In);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Ne != null)
                {
                    hash ^= 397 * Ne.GetHashCode();
                }

                if (Le != null)
                {
                    hash ^= 397 * Le.GetHashCode();
                }

                if (Lt != null)
                {
                    hash ^= 397 * Lt.GetHashCode();
                }

                if (Ge != null)
                {
                    hash ^= 397 * Ge.GetHashCode();
                }

                if (Gt != null)
                {
                    hash ^= 397 * Gt.GetHashCode();
                }

                if (BeginsWith != null)
                {
                    hash ^= 397 * BeginsWith.GetHashCode();
                }

                if (EndsWith != null)
                {
                    hash ^= 397 * EndsWith.GetHashCode();
                }

                if (Contains != null)
                {
                    hash ^= 397 * Contains.GetHashCode();
                }

                if (NotContains != null)
                {
                    hash ^= 397 * NotContains.GetHashCode();
                }

                if (Between != null)
                {
                    foreach (var Between_elm in Between)
                    {
                        hash ^= 397 * Between_elm.GetHashCode();
                    }
                }

                if (In != null)
                {
                    foreach (var In_elm in In)
                    {
                        if (In_elm != null)
                        {
                            hash ^= 397 * In_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }

        private global::System.String? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.String? _value_ne;
        private global::System.Boolean _set_ne;
        private global::System.String? _value_le;
        private global::System.Boolean _set_le;
        private global::System.String? _value_lt;
        private global::System.Boolean _set_lt;
        private global::System.String? _value_ge;
        private global::System.Boolean _set_ge;
        private global::System.String? _value_gt;
        private global::System.Boolean _set_gt;
        private global::System.String? _value_beginsWith;
        private global::System.Boolean _set_beginsWith;
        private global::System.String? _value_endsWith;
        private global::System.Boolean _set_endsWith;
        private global::System.String? _value_contains;
        private global::System.Boolean _set_contains;
        private global::System.String? _value_notContains;
        private global::System.Boolean _set_notContains;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? _value_between;
        private global::System.Boolean _set_between;
        private global::System.Collections.Generic.IReadOnlyList<global::System.String?>? _value_in;
        private global::System.Boolean _set_in;
        ///<summary>Test if property is equal to the given value</summary>
        public global::System.String? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IStringFilterInputInfo.IsEqSet => _set_eq;
        ///<summary>Test if property is NOT equal to the given value</summary>
        public global::System.String? Ne
        {
            get => _value_ne;
            set
            {
                _set_ne = true;
                _value_ne = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IStringFilterInputInfo.IsNeSet => _set_ne;
        ///<summary>Test if property is less than or equal to the given value</summary>
        public global::System.String? Le
        {
            get => _value_le;
            set
            {
                _set_le = true;
                _value_le = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IStringFilterInputInfo.IsLeSet => _set_le;
        ///<summary>Test if property is less than the given value</summary>
        public global::System.String? Lt
        {
            get => _value_lt;
            set
            {
                _set_lt = true;
                _value_lt = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IStringFilterInputInfo.IsLtSet => _set_lt;
        ///<summary>Test if property is greater than or equal to the given value</summary>
        public global::System.String? Ge
        {
            get => _value_ge;
            set
            {
                _set_ge = true;
                _value_ge = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IStringFilterInputInfo.IsGeSet => _set_ge;
        ///<summary>Test if property is greater than the given value</summary>
        public global::System.String? Gt
        {
            get => _value_gt;
            set
            {
                _set_gt = true;
                _value_gt = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IStringFilterInputInfo.IsGtSet => _set_gt;
        ///<summary>Test if property begins with the given value.  Case-insensitive.</summary>
        public global::System.String? BeginsWith
        {
            get => _value_beginsWith;
            set
            {
                _set_beginsWith = true;
                _value_beginsWith = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IStringFilterInputInfo.IsBeginsWithSet => _set_beginsWith;
        ///<summary>Test if property ends with the given value.  Case-insensitive.</summary>
        public global::System.String? EndsWith
        {
            get => _value_endsWith;
            set
            {
                _set_endsWith = true;
                _value_endsWith = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IStringFilterInputInfo.IsEndsWithSet => _set_endsWith;
        ///<summary>Test if property contains the given value.  Case-insensitive.</summary>
        public global::System.String? Contains
        {
            get => _value_contains;
            set
            {
                _set_contains = true;
                _value_contains = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IStringFilterInputInfo.IsContainsSet => _set_contains;
        ///<summary>Test if property does not contain the given value.  Case-insensitive.</summary>
        public global::System.String? NotContains
        {
            get => _value_notContains;
            set
            {
                _set_notContains = true;
                _value_notContains = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IStringFilterInputInfo.IsNotContainsSet => _set_notContains;
        ///<summary>Test if property is between the first 2 elements in the array</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Between
        {
            get => _value_between;
            set
            {
                _set_between = true;
                _value_between = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IStringFilterInputInfo.IsBetweenSet => _set_between;
        ///<summary>Test if property is equal to one of the given values</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String?>? In
        {
            get => _value_in;
            set
            {
                _set_in = true;
                _value_in = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IStringFilterInputInfo.IsInSet => _set_in;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class BooleanFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        public global::System.String TypeName => "BooleanFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.BooleanFilterInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IBooleanFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ne", FormatNe(input.Ne)));
            }

            return fields;
        }

        private global::System.Object? FormatEq(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNe(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }
    }

    ///<summary>Generic boolean filter criteria object, only one of these properties should be set</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class BooleanFilterInput : global::AggieEnterpriseApi.State.IBooleanFilterInputInfo, global::System.IEquatable<BooleanFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((BooleanFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(BooleanFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Eq == other.Eq) && Ne == other.Ne;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Ne != null)
                {
                    hash ^= 397 * Ne.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Boolean? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.Boolean? _value_ne;
        private global::System.Boolean _set_ne;
        ///<summary>Test if property is equal to the given value</summary>
        public global::System.Boolean? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IBooleanFilterInputInfo.IsEqSet => _set_eq;
        ///<summary>Test if property is NOT equal to the given value</summary>
        public global::System.Boolean? Ne
        {
            get => _value_ne;
            set
            {
                _set_ne = true;
                _value_ne = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IBooleanFilterInputInfo.IsNeSet => _set_ne;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpUnitOfMeasureFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _searchCommonInputsFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFilterInputFormatter = default !;
        public global::System.String TypeName => "ErpUnitOfMeasureFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _searchCommonInputsFormatter = serializerResolver.GetInputValueFormatter("SearchCommonInputs");
            _stringFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.ErpUnitOfMeasureFilterInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IErpUnitOfMeasureFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsSearchCommonSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("searchCommon", FormatSearchCommon(input.SearchCommon)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsUnitOfMeasureIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("unitOfMeasureId", FormatUnitOfMeasureId(input.UnitOfMeasureId)));
            }

            if (inputInfo.IsUomCodeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("uomCode", FormatUomCode(input.UomCode)));
            }

            return fields;
        }

        private global::System.Object? FormatSearchCommon(global::AggieEnterpriseApi.SearchCommonInputs? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _searchCommonInputsFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUnitOfMeasureId(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUomCode(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }
    }

    ///<summary>Data object used to run searches on ErpUnitOfMeasure</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpUnitOfMeasureFilterInput : global::AggieEnterpriseApi.State.IErpUnitOfMeasureFilterInputInfo, global::System.IEquatable<ErpUnitOfMeasureFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ErpUnitOfMeasureFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ErpUnitOfMeasureFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SearchCommon is null && other.SearchCommon is null) || SearchCommon != null && SearchCommon.Equals(other.SearchCommon))) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((UnitOfMeasureId is null && other.UnitOfMeasureId is null) || UnitOfMeasureId != null && UnitOfMeasureId.Equals(other.UnitOfMeasureId)) && ((UomCode is null && other.UomCode is null) || UomCode != null && UomCode.Equals(other.UomCode));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SearchCommon != null)
                {
                    hash ^= 397 * SearchCommon.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (UnitOfMeasureId != null)
                {
                    hash ^= 397 * UnitOfMeasureId.GetHashCode();
                }

                if (UomCode != null)
                {
                    hash ^= 397 * UomCode.GetHashCode();
                }

                return hash;
            }
        }

        private global::AggieEnterpriseApi.SearchCommonInputs? _value_searchCommon;
        private global::System.Boolean _set_searchCommon;
        private global::AggieEnterpriseApi.StringFilterInput? _value_name;
        private global::System.Boolean _set_name;
        private global::AggieEnterpriseApi.StringFilterInput? _value_unitOfMeasureId;
        private global::System.Boolean _set_unitOfMeasureId;
        private global::AggieEnterpriseApi.StringFilterInput? _value_uomCode;
        private global::System.Boolean _set_uomCode;
        public global::AggieEnterpriseApi.SearchCommonInputs? SearchCommon
        {
            get => _value_searchCommon;
            set
            {
                _set_searchCommon = true;
                _value_searchCommon = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpUnitOfMeasureFilterInputInfo.IsSearchCommonSet => _set_searchCommon;
        public global::AggieEnterpriseApi.StringFilterInput? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpUnitOfMeasureFilterInputInfo.IsNameSet => _set_name;
        public global::AggieEnterpriseApi.StringFilterInput? UnitOfMeasureId
        {
            get => _value_unitOfMeasureId;
            set
            {
                _set_unitOfMeasureId = true;
                _value_unitOfMeasureId = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpUnitOfMeasureFilterInputInfo.IsUnitOfMeasureIdSet => _set_unitOfMeasureId;
        public global::AggieEnterpriseApi.StringFilterInput? UomCode
        {
            get => _value_uomCode;
            set
            {
                _set_uomCode = true;
                _value_uomCode = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IErpUnitOfMeasureFilterInputInfo.IsUomCodeSet => _set_uomCode;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _actionRequestHeaderInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glJournalInputFormatter = default !;
        public global::System.String TypeName => "GlJournalRequestInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _actionRequestHeaderInputFormatter = serializerResolver.GetInputValueFormatter("ActionRequestHeaderInput");
            _glJournalInputFormatter = serializerResolver.GetInputValueFormatter("GlJournalInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.GlJournalRequestInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IGlJournalRequestInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsHeaderSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("header", FormatHeader(input.Header)));
            }

            if (inputInfo.IsPayloadSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("payload", FormatPayload(input.Payload)));
            }

            return fields;
        }

        private global::System.Object? FormatHeader(global::AggieEnterpriseApi.ActionRequestHeaderInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _actionRequestHeaderInputFormatter.Format(input);
        }

        private global::System.Object? FormatPayload(global::AggieEnterpriseApi.GlJournalInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _glJournalInputFormatter.Format(input);
        }
    }

    ///<summary>GL/PPM Combined journal input type.  Contains the standard request header information and journal data payload for creating journal and/or PPM costs in Oracle Financials.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestInput : global::AggieEnterpriseApi.State.IGlJournalRequestInputInfo, global::System.IEquatable<GlJournalRequestInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestInput)obj);
        }

        public virtual global::System.Boolean Equals(GlJournalRequestInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Header.Equals(other.Header)) && Payload.Equals(other.Payload);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Header.GetHashCode();
                hash ^= 397 * Payload.GetHashCode();
                return hash;
            }
        }

        private global::AggieEnterpriseApi.ActionRequestHeaderInput _value_header = default !;
        private global::System.Boolean _set_header;
        private global::AggieEnterpriseApi.GlJournalInput _value_payload = default !;
        private global::System.Boolean _set_payload;
        ///<summary>Request-level header information common to all action requests.</summary>
        public global::AggieEnterpriseApi.ActionRequestHeaderInput Header
        {
            get => _value_header;
            set
            {
                _set_header = true;
                _value_header = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalRequestInputInfo.IsHeaderSet => _set_header;
        ///<summary>Main operation data.</summary>
        public global::AggieEnterpriseApi.GlJournalInput Payload
        {
            get => _value_payload;
            set
            {
                _set_payload = true;
                _value_payload = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalRequestInputInfo.IsPayloadSet => _set_payload;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ActionRequestHeaderInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString80Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString240Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        public global::System.String TypeName => "ActionRequestHeaderInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _nonEmptyTrimmedString80Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString80");
            _nonEmptyTrimmedString240Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString240");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.ActionRequestHeaderInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsConsumerTrackingIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("consumerTrackingId", FormatConsumerTrackingId(input.ConsumerTrackingId)));
            }

            if (inputInfo.IsConsumerReferenceIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("consumerReferenceId", FormatConsumerReferenceId(input.ConsumerReferenceId)));
            }

            if (inputInfo.IsConsumerNotesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("consumerNotes", FormatConsumerNotes(input.ConsumerNotes)));
            }

            if (inputInfo.IsBoundaryApplicationNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("boundaryApplicationName", FormatBoundaryApplicationName(input.BoundaryApplicationName)));
            }

            if (inputInfo.IsConsumerIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("consumerId", FormatConsumerId(input.ConsumerId)));
            }

            if (inputInfo.IsBatchRequestSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("batchRequest", FormatBatchRequest(input.BatchRequest)));
            }

            return fields;
        }

        private global::System.Object? FormatConsumerTrackingId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString80Formatter.Format(input);
        }

        private global::System.Object? FormatConsumerReferenceId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString80Formatter.Format(input);
        }

        private global::System.Object? FormatConsumerNotes(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonEmptyTrimmedString240Formatter.Format(input);
            }
        }

        private global::System.Object? FormatBoundaryApplicationName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString80Formatter.Format(input);
        }

        private global::System.Object? FormatConsumerId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonEmptyTrimmedString80Formatter.Format(input);
            }
        }

        private global::System.Object? FormatBatchRequest(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }
    }

    ///<summary>Fields common to all action requests.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ActionRequestHeaderInput : global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo, global::System.IEquatable<ActionRequestHeaderInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ActionRequestHeaderInput)obj);
        }

        public virtual global::System.Boolean Equals(ActionRequestHeaderInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ConsumerTrackingId.Equals(other.ConsumerTrackingId)) && ConsumerReferenceId.Equals(other.ConsumerReferenceId) && ((ConsumerNotes is null && other.ConsumerNotes is null) || ConsumerNotes != null && ConsumerNotes.Equals(other.ConsumerNotes)) && BoundaryApplicationName.Equals(other.BoundaryApplicationName) && ((ConsumerId is null && other.ConsumerId is null) || ConsumerId != null && ConsumerId.Equals(other.ConsumerId)) && BatchRequest == other.BatchRequest;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ConsumerTrackingId.GetHashCode();
                hash ^= 397 * ConsumerReferenceId.GetHashCode();
                if (ConsumerNotes != null)
                {
                    hash ^= 397 * ConsumerNotes.GetHashCode();
                }

                hash ^= 397 * BoundaryApplicationName.GetHashCode();
                if (ConsumerId != null)
                {
                    hash ^= 397 * ConsumerId.GetHashCode();
                }

                if (BatchRequest != null)
                {
                    hash ^= 397 * BatchRequest.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String _value_consumerTrackingId = default !;
        private global::System.Boolean _set_consumerTrackingId;
        private global::System.String _value_consumerReferenceId = default !;
        private global::System.Boolean _set_consumerReferenceId;
        private global::System.String? _value_consumerNotes;
        private global::System.Boolean _set_consumerNotes;
        private global::System.String _value_boundaryApplicationName = default !;
        private global::System.Boolean _set_boundaryApplicationName;
        private global::System.String? _value_consumerId;
        private global::System.Boolean _set_consumerId;
        private global::System.Boolean? _value_batchRequest;
        private global::System.Boolean _set_batchRequest;
        ///<summary>Identifier provided by the consumer to track requests internally.  It is recommended that this be a globally unique identfier tracked in their system.  Can be used to match up data in the caller's system.</summary>
        public global::System.String ConsumerTrackingId
        {
            get => _value_consumerTrackingId;
            set
            {
                _set_consumerTrackingId = true;
                _value_consumerTrackingId = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo.IsConsumerTrackingIdSet => _set_consumerTrackingId;
        ///<summary>Identifier provided by the consumer which usually references the source record within their system.  Does not need to be unique.</summary>
        public global::System.String ConsumerReferenceId
        {
            get => _value_consumerReferenceId;
            set
            {
                _set_consumerReferenceId = true;
                _value_consumerReferenceId = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo.IsConsumerReferenceIdSet => _set_consumerReferenceId;
        ///<summary>Any notes to include with the request, this is stored as metadata to provide context to the request.</summary>
        public global::System.String? ConsumerNotes
        {
            get => _value_consumerNotes;
            set
            {
                _set_consumerNotes = true;
                _value_consumerNotes = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo.IsConsumerNotesSet => _set_consumerNotes;
        ///<summary>Identifier for the boundary application originating the request.</summary>
        public global::System.String BoundaryApplicationName
        {
            get => _value_boundaryApplicationName;
            set
            {
                _set_boundaryApplicationName = true;
                _value_boundaryApplicationName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo.IsBoundaryApplicationNameSet => _set_boundaryApplicationName;
        ///<summary>ID of the consumer which must match the authentication data.  Not required for API calls as will be filled in by the server.</summary>
        public global::System.String? ConsumerId
        {
            get => _value_consumerId;
            set
            {
                _set_consumerId = true;
                _value_consumerId = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo.IsConsumerIdSet => _set_consumerId;
        ///<summary>If set to true, allows processing of this request to be delayed and combined with other compatible requests if supported by the request type.  It will be ignored if not supported.  Length of delay and pickup time is determined during integration processing.</summary>
        public global::System.Boolean? BatchRequest
        {
            get => _value_batchRequest;
            set
            {
                _set_batchRequest = true;
                _value_batchRequest = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo.IsBatchRequestSet => _set_batchRequest;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString80Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpNameField100Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpDescriptionField240Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glReferenceField25Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _localDateFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString15Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glJournalLineInputFormatter = default !;
        public global::System.String TypeName => "GlJournalInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _nonEmptyTrimmedString80Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString80");
            _erpNameField100Formatter = serializerResolver.GetInputValueFormatter("ErpNameField100");
            _erpDescriptionField240Formatter = serializerResolver.GetInputValueFormatter("ErpDescriptionField240");
            _glReferenceField25Formatter = serializerResolver.GetInputValueFormatter("GlReferenceField25");
            _localDateFormatter = serializerResolver.GetInputValueFormatter("LocalDate");
            _nonEmptyTrimmedString15Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString15");
            _glJournalLineInputFormatter = serializerResolver.GetInputValueFormatter("GlJournalLineInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.GlJournalInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IGlJournalInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsJournalSourceNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalSourceName", FormatJournalSourceName(input.JournalSourceName)));
            }

            if (inputInfo.IsJournalCategoryNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalCategoryName", FormatJournalCategoryName(input.JournalCategoryName)));
            }

            if (inputInfo.IsJournalNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalName", FormatJournalName(input.JournalName)));
            }

            if (inputInfo.IsJournalDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalDescription", FormatJournalDescription(input.JournalDescription)));
            }

            if (inputInfo.IsJournalReferenceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalReference", FormatJournalReference(input.JournalReference)));
            }

            if (inputInfo.IsAccountingDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("accountingDate", FormatAccountingDate(input.AccountingDate)));
            }

            if (inputInfo.IsAccountingPeriodNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("accountingPeriodName", FormatAccountingPeriodName(input.AccountingPeriodName)));
            }

            if (inputInfo.IsJournalLinesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalLines", FormatJournalLines(input.JournalLines)));
            }

            return fields;
        }

        private global::System.Object? FormatJournalSourceName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString80Formatter.Format(input);
        }

        private global::System.Object? FormatJournalCategoryName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString80Formatter.Format(input);
        }

        private global::System.Object? FormatJournalName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _erpNameField100Formatter.Format(input);
        }

        private global::System.Object? FormatJournalDescription(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpDescriptionField240Formatter.Format(input);
            }
        }

        private global::System.Object? FormatJournalReference(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _glReferenceField25Formatter.Format(input);
        }

        private global::System.Object? FormatAccountingDate(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _localDateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAccountingPeriodName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonEmptyTrimmedString15Formatter.Format(input);
            }
        }

        private global::System.Object? FormatJournalLines(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.GlJournalLineInput> input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                if (input_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(input_elm));
                }

                input_list.Add(_glJournalLineInputFormatter.Format(input_elm));
            }

            return input_list;
        }
    }

    ///<summary>Main payload object for a `glJournalRequest`.  See operation documentation for more info.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalInput : global::AggieEnterpriseApi.State.IGlJournalInputInfo, global::System.IEquatable<GlJournalInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalInput)obj);
        }

        public virtual global::System.Boolean Equals(GlJournalInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (JournalSourceName.Equals(other.JournalSourceName)) && JournalCategoryName.Equals(other.JournalCategoryName) && JournalName.Equals(other.JournalName) && ((JournalDescription is null && other.JournalDescription is null) || JournalDescription != null && JournalDescription.Equals(other.JournalDescription)) && JournalReference.Equals(other.JournalReference) && ((AccountingDate is null && other.AccountingDate is null) || AccountingDate != null && AccountingDate.Equals(other.AccountingDate)) && ((AccountingPeriodName is null && other.AccountingPeriodName is null) || AccountingPeriodName != null && AccountingPeriodName.Equals(other.AccountingPeriodName)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(JournalLines, other.JournalLines);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * JournalSourceName.GetHashCode();
                hash ^= 397 * JournalCategoryName.GetHashCode();
                hash ^= 397 * JournalName.GetHashCode();
                if (JournalDescription != null)
                {
                    hash ^= 397 * JournalDescription.GetHashCode();
                }

                hash ^= 397 * JournalReference.GetHashCode();
                if (AccountingDate != null)
                {
                    hash ^= 397 * AccountingDate.GetHashCode();
                }

                if (AccountingPeriodName != null)
                {
                    hash ^= 397 * AccountingPeriodName.GetHashCode();
                }

                foreach (var JournalLines_elm in JournalLines)
                {
                    hash ^= 397 * JournalLines_elm.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String _value_journalSourceName = default !;
        private global::System.Boolean _set_journalSourceName;
        private global::System.String _value_journalCategoryName = default !;
        private global::System.Boolean _set_journalCategoryName;
        private global::System.String _value_journalName = default !;
        private global::System.Boolean _set_journalName;
        private global::System.String? _value_journalDescription;
        private global::System.Boolean _set_journalDescription;
        private global::System.String _value_journalReference = default !;
        private global::System.Boolean _set_journalReference;
        private global::System.String? _value_accountingDate;
        private global::System.Boolean _set_accountingDate;
        private global::System.String? _value_accountingPeriodName;
        private global::System.Boolean _set_accountingPeriodName;
        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.GlJournalLineInput> _value_journalLines = default !;
        private global::System.Boolean _set_journalLines;
        ///<summary>Centrally assigned source name for your boundary application.</summary>
        public global::System.String JournalSourceName
        {
            get => _value_journalSourceName;
            set
            {
                _set_journalSourceName = true;
                _value_journalSourceName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsJournalSourceNameSet => _set_journalSourceName;
        ///<summary>Centrally assigned category name for your boundary application's feed.</summary>
        public global::System.String JournalCategoryName
        {
            get => _value_journalCategoryName;
            set
            {
                _set_journalCategoryName = true;
                _value_journalCategoryName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsJournalCategoryNameSet => _set_journalCategoryName;
        ///<summary>Name which will appear on the journal header.</summary>
        public global::System.String JournalName
        {
            get => _value_journalName;
            set
            {
                _set_journalName = true;
                _value_journalName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsJournalNameSet => _set_journalName;
        ///<summary>Longer description of the journal if needed.</summary>
        public global::System.String? JournalDescription
        {
            get => _value_journalDescription;
            set
            {
                _set_journalDescription = true;
                _value_journalDescription = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsJournalDescriptionSet => _set_journalDescription;
        ///<summary>Reference number for the journal.  Should be meaningful to the feeding system.</summary>
        public global::System.String JournalReference
        {
            get => _value_journalReference;
            set
            {
                _set_journalReference = true;
                _value_journalReference = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsJournalReferenceSet => _set_journalReference;
        ///<summary>Accounting Date: The accounting date of the journal.  Will be defaulted to today's date if not provided.</summary>
        public global::System.String? AccountingDate
        {
            get => _value_accountingDate;
            set
            {
                _set_accountingDate = true;
                _value_accountingDate = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsAccountingDateSet => _set_accountingDate;
        ///<summary>Accounting Period: The accounting period of the journal.  If not specified, the API will add the current open period.</summary>
        public global::System.String? AccountingPeriodName
        {
            get => _value_accountingPeriodName;
            set
            {
                _set_accountingPeriodName = true;
                _value_accountingPeriodName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsAccountingPeriodNameSet => _set_accountingPeriodName;
        ///<summary>List of journal lines to include.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.GlJournalLineInput> JournalLines
        {
            get => _value_journalLines;
            set
            {
                _set_journalLines = true;
                _value_journalLines = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsJournalLinesSet => _set_journalLines;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalLineInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _glSegmentInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glSegmentStringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmSegmentInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmSegmentStringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonNegativeFloatFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glReferenceField10Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glReferenceField25Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glDescriptionField40Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glideInputFormatter = default !;
        public global::System.String TypeName => "GlJournalLineInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _glSegmentInputFormatter = serializerResolver.GetInputValueFormatter("GlSegmentInput");
            _glSegmentStringFormatter = serializerResolver.GetInputValueFormatter("GlSegmentString");
            _ppmSegmentInputFormatter = serializerResolver.GetInputValueFormatter("PpmSegmentInput");
            _ppmSegmentStringFormatter = serializerResolver.GetInputValueFormatter("PpmSegmentString");
            _nonNegativeFloatFormatter = serializerResolver.GetInputValueFormatter("NonNegativeFloat");
            _glReferenceField10Formatter = serializerResolver.GetInputValueFormatter("GlReferenceField10");
            _glReferenceField25Formatter = serializerResolver.GetInputValueFormatter("GlReferenceField25");
            _glDescriptionField40Formatter = serializerResolver.GetInputValueFormatter("GlDescriptionField40");
            _glideInputFormatter = serializerResolver.GetInputValueFormatter("GlideInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.GlJournalLineInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IGlJournalLineInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsGlSegmentsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("glSegments", FormatGlSegments(input.GlSegments)));
            }

            if (inputInfo.IsGlSegmentStringSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("glSegmentString", FormatGlSegmentString(input.GlSegmentString)));
            }

            if (inputInfo.IsPpmSegmentsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ppmSegments", FormatPpmSegments(input.PpmSegments)));
            }

            if (inputInfo.IsPpmSegmentStringSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ppmSegmentString", FormatPpmSegmentString(input.PpmSegmentString)));
            }

            if (inputInfo.IsDebitAmountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("debitAmount", FormatDebitAmount(input.DebitAmount)));
            }

            if (inputInfo.IsCreditAmountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("creditAmount", FormatCreditAmount(input.CreditAmount)));
            }

            if (inputInfo.IsExternalSystemIdentifierSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("externalSystemIdentifier", FormatExternalSystemIdentifier(input.ExternalSystemIdentifier)));
            }

            if (inputInfo.IsExternalSystemReferenceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("externalSystemReference", FormatExternalSystemReference(input.ExternalSystemReference)));
            }

            if (inputInfo.IsPpmCommentSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ppmComment", FormatPpmComment(input.PpmComment)));
            }

            if (inputInfo.IsGlideSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("glide", FormatGlide(input.Glide)));
            }

            return fields;
        }

        private global::System.Object? FormatGlSegments(global::AggieEnterpriseApi.GlSegmentInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _glSegmentInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGlSegmentString(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _glSegmentStringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPpmSegments(global::AggieEnterpriseApi.PpmSegmentInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _ppmSegmentInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPpmSegmentString(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _ppmSegmentStringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDebitAmount(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonNegativeFloatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCreditAmount(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonNegativeFloatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatExternalSystemIdentifier(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _glReferenceField10Formatter.Format(input);
        }

        private global::System.Object? FormatExternalSystemReference(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _glReferenceField25Formatter.Format(input);
            }
        }

        private global::System.Object? FormatPpmComment(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _glDescriptionField40Formatter.Format(input);
            }
        }

        private global::System.Object? FormatGlide(global::AggieEnterpriseApi.GlideInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _glideInputFormatter.Format(input);
            }
        }
    }

    ///<summary>A single line representing a GL Journal Entry or PPM Cost.  A line must have only one of the two types of segments specified.* `ppmSegments`, when provided will override any `glXxxxxx` segment values.* For the GL segments, there are three options.  Only provide one of them.  Providing multiple will result in a rejection of the payload.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalLineInput : global::AggieEnterpriseApi.State.IGlJournalLineInputInfo, global::System.IEquatable<GlJournalLineInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalLineInput)obj);
        }

        public virtual global::System.Boolean Equals(GlJournalLineInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((GlSegments is null && other.GlSegments is null) || GlSegments != null && GlSegments.Equals(other.GlSegments))) && ((GlSegmentString is null && other.GlSegmentString is null) || GlSegmentString != null && GlSegmentString.Equals(other.GlSegmentString)) && ((PpmSegments is null && other.PpmSegments is null) || PpmSegments != null && PpmSegments.Equals(other.PpmSegments)) && ((PpmSegmentString is null && other.PpmSegmentString is null) || PpmSegmentString != null && PpmSegmentString.Equals(other.PpmSegmentString)) && DebitAmount == other.DebitAmount && CreditAmount == other.CreditAmount && ExternalSystemIdentifier.Equals(other.ExternalSystemIdentifier) && ((ExternalSystemReference is null && other.ExternalSystemReference is null) || ExternalSystemReference != null && ExternalSystemReference.Equals(other.ExternalSystemReference)) && ((PpmComment is null && other.PpmComment is null) || PpmComment != null && PpmComment.Equals(other.PpmComment)) && ((Glide is null && other.Glide is null) || Glide != null && Glide.Equals(other.Glide));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GlSegments != null)
                {
                    hash ^= 397 * GlSegments.GetHashCode();
                }

                if (GlSegmentString != null)
                {
                    hash ^= 397 * GlSegmentString.GetHashCode();
                }

                if (PpmSegments != null)
                {
                    hash ^= 397 * PpmSegments.GetHashCode();
                }

                if (PpmSegmentString != null)
                {
                    hash ^= 397 * PpmSegmentString.GetHashCode();
                }

                if (DebitAmount != null)
                {
                    hash ^= 397 * DebitAmount.GetHashCode();
                }

                if (CreditAmount != null)
                {
                    hash ^= 397 * CreditAmount.GetHashCode();
                }

                hash ^= 397 * ExternalSystemIdentifier.GetHashCode();
                if (ExternalSystemReference != null)
                {
                    hash ^= 397 * ExternalSystemReference.GetHashCode();
                }

                if (PpmComment != null)
                {
                    hash ^= 397 * PpmComment.GetHashCode();
                }

                if (Glide != null)
                {
                    hash ^= 397 * Glide.GetHashCode();
                }

                return hash;
            }
        }

        private global::AggieEnterpriseApi.GlSegmentInput? _value_glSegments;
        private global::System.Boolean _set_glSegments;
        private global::System.String? _value_glSegmentString;
        private global::System.Boolean _set_glSegmentString;
        private global::AggieEnterpriseApi.PpmSegmentInput? _value_ppmSegments;
        private global::System.Boolean _set_ppmSegments;
        private global::System.String? _value_ppmSegmentString;
        private global::System.Boolean _set_ppmSegmentString;
        private global::System.Decimal? _value_debitAmount;
        private global::System.Boolean _set_debitAmount;
        private global::System.Decimal? _value_creditAmount;
        private global::System.Boolean _set_creditAmount;
        private global::System.String _value_externalSystemIdentifier = default !;
        private global::System.Boolean _set_externalSystemIdentifier;
        private global::System.String? _value_externalSystemReference;
        private global::System.Boolean _set_externalSystemReference;
        private global::System.String? _value_ppmComment;
        private global::System.Boolean _set_ppmComment;
        private global::AggieEnterpriseApi.GlideInput? _value_glide;
        private global::System.Boolean _set_glide;
        ///<summary>GL Segment fields</summary>
        public global::AggieEnterpriseApi.GlSegmentInput? GlSegments
        {
            get => _value_glSegments;
            set
            {
                _set_glSegments = true;
                _value_glSegments = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsGlSegmentsSet => _set_glSegments;
        ///<summary>Delimited complete GL segment string.  All fields of the GL Accounting Key must be provided.</summary>
        public global::System.String? GlSegmentString
        {
            get => _value_glSegmentString;
            set
            {
                _set_glSegmentString = true;
                _value_glSegmentString = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsGlSegmentStringSet => _set_glSegmentString;
        ///<summary>PPM POET segment values.  If provided, this will override any provided GL segments.</summary>
        public global::AggieEnterpriseApi.PpmSegmentInput? PpmSegments
        {
            get => _value_ppmSegments;
            set
            {
                _set_ppmSegments = true;
                _value_ppmSegments = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsPpmSegmentsSet => _set_ppmSegments;
        ///<summary>Hyphen-Delimited PPM segment stringMust be populated with either the 4 required segments, or all 6 segments.  (Project-Task Number-Expense Organization-Expense Type-Award Number-Funding Source)* Format Pattern (Required Only): `SP00000001-0001-0000000-000000`* Format Pattern (Sponsored Projects): `CP00000001-0001-0000000-000000-0000000-00000`For more information, see the description of the [PpmSegmentString scalar]({{Types.PpmSegmentString}})</summary>
        public global::System.String? PpmSegmentString
        {
            get => _value_ppmSegmentString;
            set
            {
                _set_ppmSegmentString = true;
                _value_ppmSegmentString = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsPpmSegmentStringSet => _set_ppmSegmentString;
        ///<summary>Debit amount of the GL transaction or PPM Cost.  Only one of debitAmount and creditAmount may be specified on a line.</summary>
        public global::System.Decimal? DebitAmount
        {
            get => _value_debitAmount;
            set
            {
                _set_debitAmount = true;
                _value_debitAmount = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsDebitAmountSet => _set_debitAmount;
        ///<summary>Credit amount of the GL transaction or PPM Cost.  Only one of debitAmount and creditAmount may be specified on a line.</summary>
        public global::System.Decimal? CreditAmount
        {
            get => _value_creditAmount;
            set
            {
                _set_creditAmount = true;
                _value_creditAmount = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsCreditAmountSet => _set_creditAmount;
        ///<summary>This 10-character field is intended to aid with linking boundary systems transactions to Oracle Cloud summarized journal entries for the purposes of reconciliation.</summary>
        public global::System.String ExternalSystemIdentifier
        {
            get => _value_externalSystemIdentifier;
            set
            {
                _set_externalSystemIdentifier = true;
                _value_externalSystemIdentifier = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsExternalSystemIdentifierSet => _set_externalSystemIdentifier;
        ///<summary>This 25-character field is intended to aid in additional linking of boundary systems transactions, as needed, to Oracle Cloud summarized journal entries for the purposes of reconciliation.</summary>
        public global::System.String? ExternalSystemReference
        {
            get => _value_externalSystemReference;
            set
            {
                _set_externalSystemReference = true;
                _value_externalSystemReference = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsExternalSystemReferenceSet => _set_externalSystemReference;
        ///<summary>Expenditure comment for PPM transactions.  Will be ignored for GL transactions.</summary>
        public global::System.String? PpmComment
        {
            get => _value_ppmComment;
            set
            {
                _set_ppmComment = true;
                _value_ppmComment = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsPpmCommentSet => _set_ppmComment;
        ///<summary>GLIDe fields. These fields are optional.</summary>
        public global::AggieEnterpriseApi.GlideInput? Glide
        {
            get => _value_glide;
            set
            {
                _set_glide = true;
                _value_glide = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsGlideSet => _set_glide;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlSegmentInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpEntityCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpFundCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpDepartmentCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpAccountCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpPurposeCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpProjectCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpProgramCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpActivityCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpFlex1CodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpFlex2CodeFormatter = default !;
        public global::System.String TypeName => "GlSegmentInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _erpEntityCodeFormatter = serializerResolver.GetInputValueFormatter("ErpEntityCode");
            _erpFundCodeFormatter = serializerResolver.GetInputValueFormatter("ErpFundCode");
            _erpDepartmentCodeFormatter = serializerResolver.GetInputValueFormatter("ErpDepartmentCode");
            _erpAccountCodeFormatter = serializerResolver.GetInputValueFormatter("ErpAccountCode");
            _erpPurposeCodeFormatter = serializerResolver.GetInputValueFormatter("ErpPurposeCode");
            _erpProjectCodeFormatter = serializerResolver.GetInputValueFormatter("ErpProjectCode");
            _erpProgramCodeFormatter = serializerResolver.GetInputValueFormatter("ErpProgramCode");
            _erpActivityCodeFormatter = serializerResolver.GetInputValueFormatter("ErpActivityCode");
            _erpFlex1CodeFormatter = serializerResolver.GetInputValueFormatter("ErpFlex1Code");
            _erpFlex2CodeFormatter = serializerResolver.GetInputValueFormatter("ErpFlex2Code");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.GlSegmentInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IGlSegmentInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEntitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("entity", FormatEntity(input.Entity)));
            }

            if (inputInfo.IsFundSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("fund", FormatFund(input.Fund)));
            }

            if (inputInfo.IsDepartmentSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("department", FormatDepartment(input.Department)));
            }

            if (inputInfo.IsAccountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("account", FormatAccount(input.Account)));
            }

            if (inputInfo.IsPurposeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("purpose", FormatPurpose(input.Purpose)));
            }

            if (inputInfo.IsProjectSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("project", FormatProject(input.Project)));
            }

            if (inputInfo.IsProgramSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("program", FormatProgram(input.Program)));
            }

            if (inputInfo.IsActivitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("activity", FormatActivity(input.Activity)));
            }

            if (inputInfo.IsFlex1Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("flex1", FormatFlex1(input.Flex1)));
            }

            if (inputInfo.IsFlex2Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("flex2", FormatFlex2(input.Flex2)));
            }

            return fields;
        }

        private global::System.Object? FormatEntity(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _erpEntityCodeFormatter.Format(input);
        }

        private global::System.Object? FormatFund(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _erpFundCodeFormatter.Format(input);
        }

        private global::System.Object? FormatDepartment(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _erpDepartmentCodeFormatter.Format(input);
        }

        private global::System.Object? FormatAccount(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _erpAccountCodeFormatter.Format(input);
        }

        private global::System.Object? FormatPurpose(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpPurposeCodeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatProject(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpProjectCodeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatProgram(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpProgramCodeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatActivity(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpActivityCodeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFlex1(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpFlex1CodeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFlex2(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpFlex2CodeFormatter.Format(input);
            }
        }
    }

    ///<summary>Input structure for specifying GL segment values as separate fields.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlSegmentInput : global::AggieEnterpriseApi.State.IGlSegmentInputInfo, global::System.IEquatable<GlSegmentInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlSegmentInput)obj);
        }

        public virtual global::System.Boolean Equals(GlSegmentInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Entity.Equals(other.Entity)) && Fund.Equals(other.Fund) && Department.Equals(other.Department) && Account.Equals(other.Account) && ((Purpose is null && other.Purpose is null) || Purpose != null && Purpose.Equals(other.Purpose)) && ((Project is null && other.Project is null) || Project != null && Project.Equals(other.Project)) && ((Program is null && other.Program is null) || Program != null && Program.Equals(other.Program)) && ((Activity is null && other.Activity is null) || Activity != null && Activity.Equals(other.Activity)) && ((Flex1 is null && other.Flex1 is null) || Flex1 != null && Flex1.Equals(other.Flex1)) && ((Flex2 is null && other.Flex2 is null) || Flex2 != null && Flex2.Equals(other.Flex2));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Entity.GetHashCode();
                hash ^= 397 * Fund.GetHashCode();
                hash ^= 397 * Department.GetHashCode();
                hash ^= 397 * Account.GetHashCode();
                if (Purpose != null)
                {
                    hash ^= 397 * Purpose.GetHashCode();
                }

                if (Project != null)
                {
                    hash ^= 397 * Project.GetHashCode();
                }

                if (Program != null)
                {
                    hash ^= 397 * Program.GetHashCode();
                }

                if (Activity != null)
                {
                    hash ^= 397 * Activity.GetHashCode();
                }

                if (Flex1 != null)
                {
                    hash ^= 397 * Flex1.GetHashCode();
                }

                if (Flex2 != null)
                {
                    hash ^= 397 * Flex2.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String _value_entity = default !;
        private global::System.Boolean _set_entity;
        private global::System.String _value_fund = default !;
        private global::System.Boolean _set_fund;
        private global::System.String _value_department = default !;
        private global::System.Boolean _set_department;
        private global::System.String _value_account = default !;
        private global::System.Boolean _set_account;
        private global::System.String? _value_purpose;
        private global::System.Boolean _set_purpose;
        private global::System.String? _value_project;
        private global::System.Boolean _set_project;
        private global::System.String? _value_program;
        private global::System.Boolean _set_program;
        private global::System.String? _value_activity;
        private global::System.Boolean _set_activity;
        private global::System.String? _value_flex1;
        private global::System.Boolean _set_flex1;
        private global::System.String? _value_flex2;
        private global::System.Boolean _set_flex2;
        ///<summary>Required: Entity to which to charge a transaction.</summary>
        public global::System.String Entity
        {
            get => _value_entity;
            set
            {
                _set_entity = true;
                _value_entity = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsEntitySet => _set_entity;
        ///<summary>Required: Funding source to which to charge a transaction.</summary>
        public global::System.String Fund
        {
            get => _value_fund;
            set
            {
                _set_fund = true;
                _value_fund = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsFundSet => _set_fund;
        ///<summary>Required: Financial department to which to charge a transaction.</summary>
        public global::System.String Department
        {
            get => _value_department;
            set
            {
                _set_department = true;
                _value_department = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsDepartmentSet => _set_department;
        ///<summary>Required: Nature of the transaction, expense, income, liability, etc...</summary>
        public global::System.String Account
        {
            get => _value_account;
            set
            {
                _set_account = true;
                _value_account = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsAccountSet => _set_account;
        ///<summary>Required for Expenses: Functional purpose of the expense.</summary>
        public global::System.String? Purpose
        {
            get => _value_purpose;
            set
            {
                _set_purpose = true;
                _value_purpose = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsPurposeSet => _set_purpose;
        ///<summary>Optional: </summary>
        public global::System.String? Project
        {
            get => _value_project;
            set
            {
                _set_project = true;
                _value_project = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsProjectSet => _set_project;
        ///<summary>Optional: </summary>
        public global::System.String? Program
        {
            get => _value_program;
            set
            {
                _set_program = true;
                _value_program = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsProgramSet => _set_program;
        ///<summary>Optional: </summary>
        public global::System.String? Activity
        {
            get => _value_activity;
            set
            {
                _set_activity = true;
                _value_activity = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsActivitySet => _set_activity;
        ///<summary>Unused: For future UCOP Reporting Requirements.  Always 000000.</summary>
        public global::System.String? Flex1
        {
            get => _value_flex1;
            set
            {
                _set_flex1 = true;
                _value_flex1 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsFlex1Set => _set_flex1;
        ///<summary>Unused: For future UCOP Reporting Requirements.  Always 000000.</summary>
        public global::System.String? Flex2
        {
            get => _value_flex2;
            set
            {
                _set_flex2 = true;
                _value_flex2 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsFlex2Set => _set_flex2;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmProjectNumberFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmTaskNumberFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmExpenseOrganizationCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmExpenseTypeCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmAwardNumberFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmFundingSourceNumberFormatter = default !;
        public global::System.String TypeName => "PpmSegmentInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _ppmProjectNumberFormatter = serializerResolver.GetInputValueFormatter("PpmProjectNumber");
            _ppmTaskNumberFormatter = serializerResolver.GetInputValueFormatter("PpmTaskNumber");
            _ppmExpenseOrganizationCodeFormatter = serializerResolver.GetInputValueFormatter("PpmExpenseOrganizationCode");
            _ppmExpenseTypeCodeFormatter = serializerResolver.GetInputValueFormatter("PpmExpenseTypeCode");
            _ppmAwardNumberFormatter = serializerResolver.GetInputValueFormatter("PpmAwardNumber");
            _ppmFundingSourceNumberFormatter = serializerResolver.GetInputValueFormatter("PpmFundingSourceNumber");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.PpmSegmentInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IPpmSegmentInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsProjectSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("project", FormatProject(input.Project)));
            }

            if (inputInfo.IsTaskSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("task", FormatTask(input.Task)));
            }

            if (inputInfo.IsOrganizationSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("organization", FormatOrganization(input.Organization)));
            }

            if (inputInfo.IsExpenditureTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("expenditureType", FormatExpenditureType(input.ExpenditureType)));
            }

            if (inputInfo.IsAwardSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("award", FormatAward(input.Award)));
            }

            if (inputInfo.IsFundingSourceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("fundingSource", FormatFundingSource(input.FundingSource)));
            }

            return fields;
        }

        private global::System.Object? FormatProject(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _ppmProjectNumberFormatter.Format(input);
        }

        private global::System.Object? FormatTask(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _ppmTaskNumberFormatter.Format(input);
        }

        private global::System.Object? FormatOrganization(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _ppmExpenseOrganizationCodeFormatter.Format(input);
        }

        private global::System.Object? FormatExpenditureType(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _ppmExpenseTypeCodeFormatter.Format(input);
        }

        private global::System.Object? FormatAward(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _ppmAwardNumberFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFundingSource(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _ppmFundingSourceNumberFormatter.Format(input);
            }
        }
    }

    ///<summary>Input structure for specifying POET/PPM segment values.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentInput : global::AggieEnterpriseApi.State.IPpmSegmentInputInfo, global::System.IEquatable<PpmSegmentInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmSegmentInput)obj);
        }

        public virtual global::System.Boolean Equals(PpmSegmentInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Project.Equals(other.Project)) && Task.Equals(other.Task) && Organization.Equals(other.Organization) && ExpenditureType.Equals(other.ExpenditureType) && ((Award is null && other.Award is null) || Award != null && Award.Equals(other.Award)) && ((FundingSource is null && other.FundingSource is null) || FundingSource != null && FundingSource.Equals(other.FundingSource));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Project.GetHashCode();
                hash ^= 397 * Task.GetHashCode();
                hash ^= 397 * Organization.GetHashCode();
                hash ^= 397 * ExpenditureType.GetHashCode();
                if (Award != null)
                {
                    hash ^= 397 * Award.GetHashCode();
                }

                if (FundingSource != null)
                {
                    hash ^= 397 * FundingSource.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String _value_project = default !;
        private global::System.Boolean _set_project;
        private global::System.String _value_task = default !;
        private global::System.Boolean _set_task;
        private global::System.String _value_organization = default !;
        private global::System.Boolean _set_organization;
        private global::System.String _value_expenditureType = default !;
        private global::System.Boolean _set_expenditureType;
        private global::System.String? _value_award;
        private global::System.Boolean _set_award;
        private global::System.String? _value_fundingSource;
        private global::System.Boolean _set_fundingSource;
        ///<summary>Required: Managed Project Number</summary>
        public global::System.String Project
        {
            get => _value_project;
            set
            {
                _set_project = true;
                _value_project = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmSegmentInputInfo.IsProjectSet => _set_project;
        ///<summary>Required: Task ID.  Must belong to Project and be a chargeable task</summary>
        public global::System.String Task
        {
            get => _value_task;
            set
            {
                _set_task = true;
                _value_task = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmSegmentInputInfo.IsTaskSet => _set_task;
        ///<summary>Required: Organization for which the expense is being incurred.  Aligns with the GL Financial Department segment.</summary>
        public global::System.String Organization
        {
            get => _value_organization;
            set
            {
                _set_organization = true;
                _value_organization = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmSegmentInputInfo.IsOrganizationSet => _set_organization;
        ///<summary>Required: Type of expense being charged to the project.  Aligns with the GL Account segment.</summary>
        public global::System.String ExpenditureType
        {
            get => _value_expenditureType;
            set
            {
                _set_expenditureType = true;
                _value_expenditureType = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmSegmentInputInfo.IsExpenditureTypeSet => _set_expenditureType;
        ///<summary>Award for Sponsored projects only**API Users, do not provide.  The valid value will be derived from the project if necessary.**</summary>
        public global::System.String? Award
        {
            get => _value_award;
            set
            {
                _set_award = true;
                _value_award = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmSegmentInputInfo.IsAwardSet => _set_award;
        ///<summary>Award funding source for Sponsored projects only**API Users, do not provide.  The valid value will be derived from the project if necessary.**</summary>
        public global::System.String? FundingSource
        {
            get => _value_fundingSource;
            set
            {
                _set_fundingSource = true;
                _value_fundingSource = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmSegmentInputInfo.IsFundingSourceSet => _set_fundingSource;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlideInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateFormatter = default !;
        public global::System.String TypeName => "GlideInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
            _dateFormatter = serializerResolver.GetInputValueFormatter("Date");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.GlideInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IGlideInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsLineDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lineDescription", FormatLineDescription(input.LineDescription)));
            }

            if (inputInfo.IsJournalLineNumberSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalLineNumber", FormatJournalLineNumber(input.JournalLineNumber)));
            }

            if (inputInfo.IsTransactionDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("transactionDate", FormatTransactionDate(input.TransactionDate)));
            }

            if (inputInfo.IsUdfNumeric1Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfNumeric1", FormatUdfNumeric1(input.UdfNumeric1)));
            }

            if (inputInfo.IsUdfNumeric2Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfNumeric2", FormatUdfNumeric2(input.UdfNumeric2)));
            }

            if (inputInfo.IsUdfNumeric3Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfNumeric3", FormatUdfNumeric3(input.UdfNumeric3)));
            }

            if (inputInfo.IsUdfDate1Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfDate1", FormatUdfDate1(input.UdfDate1)));
            }

            if (inputInfo.IsUdfDate2Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfDate2", FormatUdfDate2(input.UdfDate2)));
            }

            if (inputInfo.IsUdfString1Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfString1", FormatUdfString1(input.UdfString1)));
            }

            if (inputInfo.IsUdfString2Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfString2", FormatUdfString2(input.UdfString2)));
            }

            if (inputInfo.IsUdfString3Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfString3", FormatUdfString3(input.UdfString3)));
            }

            if (inputInfo.IsUdfString4Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfString4", FormatUdfString4(input.UdfString4)));
            }

            if (inputInfo.IsUdfString5Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfString5", FormatUdfString5(input.UdfString5)));
            }

            return fields;
        }

        private global::System.Object? FormatLineDescription(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatJournalLineNumber(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTransactionDate(global::System.DateTime? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfNumeric1(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfNumeric2(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfNumeric3(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfDate1(global::System.DateTime? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfDate2(global::System.DateTime? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfString1(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfString2(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfString3(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfString4(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfString5(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    ///<summary>GLIDe fields are part of the GL/PPM Combined journal. These fields are optional.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlideInput : global::AggieEnterpriseApi.State.IGlideInputInfo, global::System.IEquatable<GlideInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlideInput)obj);
        }

        public virtual global::System.Boolean Equals(GlideInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((LineDescription is null && other.LineDescription is null) || LineDescription != null && LineDescription.Equals(other.LineDescription))) && JournalLineNumber == other.JournalLineNumber && ((TransactionDate is null && other.TransactionDate is null) || TransactionDate != null && TransactionDate.Equals(other.TransactionDate)) && UdfNumeric1 == other.UdfNumeric1 && UdfNumeric2 == other.UdfNumeric2 && UdfNumeric3 == other.UdfNumeric3 && ((UdfDate1 is null && other.UdfDate1 is null) || UdfDate1 != null && UdfDate1.Equals(other.UdfDate1)) && ((UdfDate2 is null && other.UdfDate2 is null) || UdfDate2 != null && UdfDate2.Equals(other.UdfDate2)) && ((UdfString1 is null && other.UdfString1 is null) || UdfString1 != null && UdfString1.Equals(other.UdfString1)) && ((UdfString2 is null && other.UdfString2 is null) || UdfString2 != null && UdfString2.Equals(other.UdfString2)) && ((UdfString3 is null && other.UdfString3 is null) || UdfString3 != null && UdfString3.Equals(other.UdfString3)) && ((UdfString4 is null && other.UdfString4 is null) || UdfString4 != null && UdfString4.Equals(other.UdfString4)) && ((UdfString5 is null && other.UdfString5 is null) || UdfString5 != null && UdfString5.Equals(other.UdfString5));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (LineDescription != null)
                {
                    hash ^= 397 * LineDescription.GetHashCode();
                }

                if (JournalLineNumber != null)
                {
                    hash ^= 397 * JournalLineNumber.GetHashCode();
                }

                if (TransactionDate != null)
                {
                    hash ^= 397 * TransactionDate.GetHashCode();
                }

                if (UdfNumeric1 != null)
                {
                    hash ^= 397 * UdfNumeric1.GetHashCode();
                }

                if (UdfNumeric2 != null)
                {
                    hash ^= 397 * UdfNumeric2.GetHashCode();
                }

                if (UdfNumeric3 != null)
                {
                    hash ^= 397 * UdfNumeric3.GetHashCode();
                }

                if (UdfDate1 != null)
                {
                    hash ^= 397 * UdfDate1.GetHashCode();
                }

                if (UdfDate2 != null)
                {
                    hash ^= 397 * UdfDate2.GetHashCode();
                }

                if (UdfString1 != null)
                {
                    hash ^= 397 * UdfString1.GetHashCode();
                }

                if (UdfString2 != null)
                {
                    hash ^= 397 * UdfString2.GetHashCode();
                }

                if (UdfString3 != null)
                {
                    hash ^= 397 * UdfString3.GetHashCode();
                }

                if (UdfString4 != null)
                {
                    hash ^= 397 * UdfString4.GetHashCode();
                }

                if (UdfString5 != null)
                {
                    hash ^= 397 * UdfString5.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_lineDescription;
        private global::System.Boolean _set_lineDescription;
        private global::System.Double? _value_journalLineNumber;
        private global::System.Boolean _set_journalLineNumber;
        private global::System.DateTime? _value_transactionDate;
        private global::System.Boolean _set_transactionDate;
        private global::System.Double? _value_udfNumeric1;
        private global::System.Boolean _set_udfNumeric1;
        private global::System.Double? _value_udfNumeric2;
        private global::System.Boolean _set_udfNumeric2;
        private global::System.Double? _value_udfNumeric3;
        private global::System.Boolean _set_udfNumeric3;
        private global::System.DateTime? _value_udfDate1;
        private global::System.Boolean _set_udfDate1;
        private global::System.DateTime? _value_udfDate2;
        private global::System.Boolean _set_udfDate2;
        private global::System.String? _value_udfString1;
        private global::System.Boolean _set_udfString1;
        private global::System.String? _value_udfString2;
        private global::System.Boolean _set_udfString2;
        private global::System.String? _value_udfString3;
        private global::System.Boolean _set_udfString3;
        private global::System.String? _value_udfString4;
        private global::System.Boolean _set_udfString4;
        private global::System.String? _value_udfString5;
        private global::System.Boolean _set_udfString5;
        public global::System.String? LineDescription
        {
            get => _value_lineDescription;
            set
            {
                _set_lineDescription = true;
                _value_lineDescription = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsLineDescriptionSet => _set_lineDescription;
        public global::System.Double? JournalLineNumber
        {
            get => _value_journalLineNumber;
            set
            {
                _set_journalLineNumber = true;
                _value_journalLineNumber = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsJournalLineNumberSet => _set_journalLineNumber;
        public global::System.DateTime? TransactionDate
        {
            get => _value_transactionDate;
            set
            {
                _set_transactionDate = true;
                _value_transactionDate = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsTransactionDateSet => _set_transactionDate;
        public global::System.Double? UdfNumeric1
        {
            get => _value_udfNumeric1;
            set
            {
                _set_udfNumeric1 = true;
                _value_udfNumeric1 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfNumeric1Set => _set_udfNumeric1;
        public global::System.Double? UdfNumeric2
        {
            get => _value_udfNumeric2;
            set
            {
                _set_udfNumeric2 = true;
                _value_udfNumeric2 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfNumeric2Set => _set_udfNumeric2;
        public global::System.Double? UdfNumeric3
        {
            get => _value_udfNumeric3;
            set
            {
                _set_udfNumeric3 = true;
                _value_udfNumeric3 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfNumeric3Set => _set_udfNumeric3;
        public global::System.DateTime? UdfDate1
        {
            get => _value_udfDate1;
            set
            {
                _set_udfDate1 = true;
                _value_udfDate1 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfDate1Set => _set_udfDate1;
        public global::System.DateTime? UdfDate2
        {
            get => _value_udfDate2;
            set
            {
                _set_udfDate2 = true;
                _value_udfDate2 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfDate2Set => _set_udfDate2;
        public global::System.String? UdfString1
        {
            get => _value_udfString1;
            set
            {
                _set_udfString1 = true;
                _value_udfString1 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfString1Set => _set_udfString1;
        public global::System.String? UdfString2
        {
            get => _value_udfString2;
            set
            {
                _set_udfString2 = true;
                _value_udfString2 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfString2Set => _set_udfString2;
        public global::System.String? UdfString3
        {
            get => _value_udfString3;
            set
            {
                _set_udfString3 = true;
                _value_udfString3 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfString3Set => _set_udfString3;
        public global::System.String? UdfString4
        {
            get => _value_udfString4;
            set
            {
                _set_udfString4 = true;
                _value_udfString4 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfString4Set => _set_udfString4;
        public global::System.String? UdfString5
        {
            get => _value_udfString5;
            set
            {
                _set_udfString5 = true;
                _value_udfString5 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfString5Set => _set_udfString5;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionRequestInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _actionRequestHeaderInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _scmPurchaseRequisitionInputFormatter = default !;
        public global::System.String TypeName => "ScmPurchaseRequisitionRequestInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _actionRequestHeaderInputFormatter = serializerResolver.GetInputValueFormatter("ActionRequestHeaderInput");
            _scmPurchaseRequisitionInputFormatter = serializerResolver.GetInputValueFormatter("ScmPurchaseRequisitionInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.ScmPurchaseRequisitionRequestInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IScmPurchaseRequisitionRequestInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsHeaderSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("header", FormatHeader(input.Header)));
            }

            if (inputInfo.IsPayloadSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("payload", FormatPayload(input.Payload)));
            }

            return fields;
        }

        private global::System.Object? FormatHeader(global::AggieEnterpriseApi.ActionRequestHeaderInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _actionRequestHeaderInputFormatter.Format(input);
        }

        private global::System.Object? FormatPayload(global::AggieEnterpriseApi.ScmPurchaseRequisitionInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _scmPurchaseRequisitionInputFormatter.Format(input);
        }
    }

    ///<summary>scm Purchase Requisition input type.  Contains the standard request header information and requisition data payload for creating requisition in Oracle Financials.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionRequestInput : global::AggieEnterpriseApi.State.IScmPurchaseRequisitionRequestInputInfo, global::System.IEquatable<ScmPurchaseRequisitionRequestInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchaseRequisitionRequestInput)obj);
        }

        public virtual global::System.Boolean Equals(ScmPurchaseRequisitionRequestInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Header.Equals(other.Header)) && Payload.Equals(other.Payload);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Header.GetHashCode();
                hash ^= 397 * Payload.GetHashCode();
                return hash;
            }
        }

        private global::AggieEnterpriseApi.ActionRequestHeaderInput _value_header = default !;
        private global::System.Boolean _set_header;
        private global::AggieEnterpriseApi.ScmPurchaseRequisitionInput _value_payload = default !;
        private global::System.Boolean _set_payload;
        ///<summary>Request-level header information common to all action requests.</summary>
        public global::AggieEnterpriseApi.ActionRequestHeaderInput Header
        {
            get => _value_header;
            set
            {
                _set_header = true;
                _value_header = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionRequestInputInfo.IsHeaderSet => _set_header;
        ///<summary>ScmInvoicePayment data</summary>
        public global::AggieEnterpriseApi.ScmPurchaseRequisitionInput Payload
        {
            get => _value_payload;
            set
            {
                _set_payload = true;
                _value_payload = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionRequestInputInfo.IsPayloadSet => _set_payload;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString30Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _emailAddressFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString240Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString1000Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _localDateFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _scmPurchaseRequisitionLineInputFormatter = default !;
        public global::System.String TypeName => "ScmPurchaseRequisitionInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _nonEmptyTrimmedString30Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString30");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _emailAddressFormatter = serializerResolver.GetInputValueFormatter("EmailAddress");
            _nonEmptyTrimmedString240Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString240");
            _nonEmptyTrimmedString1000Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString1000");
            _localDateFormatter = serializerResolver.GetInputValueFormatter("LocalDate");
            _scmPurchaseRequisitionLineInputFormatter = serializerResolver.GetInputValueFormatter("ScmPurchaseRequisitionLineInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.ScmPurchaseRequisitionInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IScmPurchaseRequisitionInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsRequisitionSourceNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("requisitionSourceName", FormatRequisitionSourceName(input.RequisitionSourceName)));
            }

            if (inputInfo.IsSupplierNumberSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("supplierNumber", FormatSupplierNumber(input.SupplierNumber)));
            }

            if (inputInfo.IsSupplierSiteCodeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("supplierSiteCode", FormatSupplierSiteCode(input.SupplierSiteCode)));
            }

            if (inputInfo.IsRequesterEmailAddressSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("requesterEmailAddress", FormatRequesterEmailAddress(input.RequesterEmailAddress)));
            }

            if (inputInfo.IsDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("description", FormatDescription(input.Description)));
            }

            if (inputInfo.IsJustificationSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("justification", FormatJustification(input.Justification)));
            }

            if (inputInfo.IsTransactionDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("transactionDate", FormatTransactionDate(input.TransactionDate)));
            }

            if (inputInfo.IsLinesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lines", FormatLines(input.Lines)));
            }

            return fields;
        }

        private global::System.Object? FormatRequisitionSourceName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString30Formatter.Format(input);
        }

        private global::System.Object? FormatSupplierNumber(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString30Formatter.Format(input);
        }

        private global::System.Object? FormatSupplierSiteCode(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatRequesterEmailAddress(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _emailAddressFormatter.Format(input);
        }

        private global::System.Object? FormatDescription(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString240Formatter.Format(input);
        }

        private global::System.Object? FormatJustification(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString1000Formatter.Format(input);
        }

        private global::System.Object? FormatTransactionDate(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _localDateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLines(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.ScmPurchaseRequisitionLineInput> input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                if (input_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(input_elm));
                }

                input_list.Add(_scmPurchaseRequisitionLineInputFormatter.Format(input_elm));
            }

            return input_list;
        }
    }

    ///<summary>Main payload object for a `scmPurchaseRequisitionRequest`.  See operation documentation for more info.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionInput : global::AggieEnterpriseApi.State.IScmPurchaseRequisitionInputInfo, global::System.IEquatable<ScmPurchaseRequisitionInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchaseRequisitionInput)obj);
        }

        public virtual global::System.Boolean Equals(ScmPurchaseRequisitionInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RequisitionSourceName.Equals(other.RequisitionSourceName)) && SupplierNumber.Equals(other.SupplierNumber) && SupplierSiteCode.Equals(other.SupplierSiteCode) && RequesterEmailAddress.Equals(other.RequesterEmailAddress) && Description.Equals(other.Description) && Justification.Equals(other.Justification) && ((TransactionDate is null && other.TransactionDate is null) || TransactionDate != null && TransactionDate.Equals(other.TransactionDate)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Lines, other.Lines);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RequisitionSourceName.GetHashCode();
                hash ^= 397 * SupplierNumber.GetHashCode();
                hash ^= 397 * SupplierSiteCode.GetHashCode();
                hash ^= 397 * RequesterEmailAddress.GetHashCode();
                hash ^= 397 * Description.GetHashCode();
                hash ^= 397 * Justification.GetHashCode();
                if (TransactionDate != null)
                {
                    hash ^= 397 * TransactionDate.GetHashCode();
                }

                foreach (var Lines_elm in Lines)
                {
                    hash ^= 397 * Lines_elm.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String _value_requisitionSourceName = default !;
        private global::System.Boolean _set_requisitionSourceName;
        private global::System.String _value_supplierNumber = default !;
        private global::System.Boolean _set_supplierNumber;
        private global::System.String _value_supplierSiteCode = default !;
        private global::System.Boolean _set_supplierSiteCode;
        private global::System.String _value_requesterEmailAddress = default !;
        private global::System.Boolean _set_requesterEmailAddress;
        private global::System.String _value_description = default !;
        private global::System.Boolean _set_description;
        private global::System.String _value_justification = default !;
        private global::System.Boolean _set_justification;
        private global::System.String? _value_transactionDate;
        private global::System.Boolean _set_transactionDate;
        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.ScmPurchaseRequisitionLineInput> _value_lines = default !;
        private global::System.Boolean _set_lines;
        ///<summary>Centrally assigned source name for your boundary application.</summary>
        public global::System.String RequisitionSourceName
        {
            get => _value_requisitionSourceName;
            set
            {
                _set_requisitionSourceName = true;
                _value_requisitionSourceName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionInputInfo.IsRequisitionSourceNameSet => _set_requisitionSourceName;
        public global::System.String SupplierNumber
        {
            get => _value_supplierNumber;
            set
            {
                _set_supplierNumber = true;
                _value_supplierNumber = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionInputInfo.IsSupplierNumberSet => _set_supplierNumber;
        ///<summary>Value that uniquely identifies the supplier site.</summary>
        public global::System.String SupplierSiteCode
        {
            get => _value_supplierSiteCode;
            set
            {
                _set_supplierSiteCode = true;
                _value_supplierSiteCode = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionInputInfo.IsSupplierSiteCodeSet => _set_supplierSiteCode;
        ///<summary>Email address of the person to whom questions should be directed if needed by Supply Chain Management.  Must be the email address of a valid user in Oracle Financials.</summary>
        public global::System.String RequesterEmailAddress
        {
            get => _value_requesterEmailAddress;
            set
            {
                _set_requesterEmailAddress = true;
                _value_requesterEmailAddress = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionInputInfo.IsRequesterEmailAddressSet => _set_requesterEmailAddress;
        ///<summary>Description of the requisition</summary>
        public global::System.String Description
        {
            get => _value_description;
            set
            {
                _set_description = true;
                _value_description = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionInputInfo.IsDescriptionSet => _set_description;
        ///<summary>Reason for creating the requisition.</summary>
        public global::System.String Justification
        {
            get => _value_justification;
            set
            {
                _set_justification = true;
                _value_justification = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionInputInfo.IsJustificationSet => _set_justification;
        public global::System.String? TransactionDate
        {
            get => _value_transactionDate;
            set
            {
                _set_transactionDate = true;
                _value_transactionDate = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionInputInfo.IsTransactionDateSet => _set_transactionDate;
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.ScmPurchaseRequisitionLineInput> Lines
        {
            get => _value_lines;
            set
            {
                _set_lines = true;
                _value_lines = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionInputInfo.IsLinesSet => _set_lines;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionLineInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonNegativeFloatFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString25Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString240Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString1000Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString60Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _localDateFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _scmPurchaseRequisitionDistributionInputFormatter = default !;
        public global::System.String TypeName => "ScmPurchaseRequisitionLineInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _nonNegativeFloatFormatter = serializerResolver.GetInputValueFormatter("NonNegativeFloat");
            _nonEmptyTrimmedString25Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString25");
            _nonEmptyTrimmedString240Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString240");
            _nonEmptyTrimmedString1000Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString1000");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _nonEmptyTrimmedString60Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString60");
            _localDateFormatter = serializerResolver.GetInputValueFormatter("LocalDate");
            _scmPurchaseRequisitionDistributionInputFormatter = serializerResolver.GetInputValueFormatter("ScmPurchaseRequisitionDistributionInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.ScmPurchaseRequisitionLineInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IScmPurchaseRequisitionLineInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAmountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("amount", FormatAmount(input.Amount)));
            }

            if (inputInfo.IsQuantitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("quantity", FormatQuantity(input.Quantity)));
            }

            if (inputInfo.IsUnitOfMeasureSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("unitOfMeasure", FormatUnitOfMeasure(input.UnitOfMeasure)));
            }

            if (inputInfo.IsItemDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("itemDescription", FormatItemDescription(input.ItemDescription)));
            }

            if (inputInfo.IsNoteToBuyerSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("noteToBuyer", FormatNoteToBuyer(input.NoteToBuyer)));
            }

            if (inputInfo.IsPurchasingCategoryNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("purchasingCategoryName", FormatPurchasingCategoryName(input.PurchasingCategoryName)));
            }

            if (inputInfo.IsUnitPriceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("unitPrice", FormatUnitPrice(input.UnitPrice)));
            }

            if (inputInfo.IsDeliveryToLocationCodeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("deliveryToLocationCode", FormatDeliveryToLocationCode(input.DeliveryToLocationCode)));
            }

            if (inputInfo.IsRequestedDeliveryDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("requestedDeliveryDate", FormatRequestedDeliveryDate(input.RequestedDeliveryDate)));
            }

            if (inputInfo.IsDistributionsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("distributions", FormatDistributions(input.Distributions)));
            }

            return fields;
        }

        private global::System.Object? FormatAmount(global::System.Decimal input)
        {
            return _nonNegativeFloatFormatter.Format(input);
        }

        private global::System.Object? FormatQuantity(global::System.Decimal input)
        {
            return _nonNegativeFloatFormatter.Format(input);
        }

        private global::System.Object? FormatUnitOfMeasure(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString25Formatter.Format(input);
        }

        private global::System.Object? FormatItemDescription(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString240Formatter.Format(input);
        }

        private global::System.Object? FormatNoteToBuyer(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonEmptyTrimmedString1000Formatter.Format(input);
            }
        }

        private global::System.Object? FormatPurchasingCategoryName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _stringFormatter.Format(input);
        }

        private global::System.Object? FormatUnitPrice(global::System.Decimal input)
        {
            return _nonNegativeFloatFormatter.Format(input);
        }

        private global::System.Object? FormatDeliveryToLocationCode(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonEmptyTrimmedString60Formatter.Format(input);
            }
        }

        private global::System.Object? FormatRequestedDeliveryDate(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _localDateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDistributions(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.ScmPurchaseRequisitionDistributionInput> input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                if (input_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(input_elm));
                }

                input_list.Add(_scmPurchaseRequisitionDistributionInputFormatter.Format(input_elm));
            }

            return input_list;
        }
    }

    ///<summary>A single line representing a Requisition Line Item.  A line must have only one of the two types of segments specified.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionLineInput : global::AggieEnterpriseApi.State.IScmPurchaseRequisitionLineInputInfo, global::System.IEquatable<ScmPurchaseRequisitionLineInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchaseRequisitionLineInput)obj);
        }

        public virtual global::System.Boolean Equals(ScmPurchaseRequisitionLineInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Amount == other.Amount) && Quantity == other.Quantity && UnitOfMeasure.Equals(other.UnitOfMeasure) && ItemDescription.Equals(other.ItemDescription) && ((NoteToBuyer is null && other.NoteToBuyer is null) || NoteToBuyer != null && NoteToBuyer.Equals(other.NoteToBuyer)) && PurchasingCategoryName.Equals(other.PurchasingCategoryName) && UnitPrice == other.UnitPrice && ((DeliveryToLocationCode is null && other.DeliveryToLocationCode is null) || DeliveryToLocationCode != null && DeliveryToLocationCode.Equals(other.DeliveryToLocationCode)) && ((RequestedDeliveryDate is null && other.RequestedDeliveryDate is null) || RequestedDeliveryDate != null && RequestedDeliveryDate.Equals(other.RequestedDeliveryDate)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Distributions, other.Distributions);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Amount.GetHashCode();
                hash ^= 397 * Quantity.GetHashCode();
                hash ^= 397 * UnitOfMeasure.GetHashCode();
                hash ^= 397 * ItemDescription.GetHashCode();
                if (NoteToBuyer != null)
                {
                    hash ^= 397 * NoteToBuyer.GetHashCode();
                }

                hash ^= 397 * PurchasingCategoryName.GetHashCode();
                hash ^= 397 * UnitPrice.GetHashCode();
                if (DeliveryToLocationCode != null)
                {
                    hash ^= 397 * DeliveryToLocationCode.GetHashCode();
                }

                if (RequestedDeliveryDate != null)
                {
                    hash ^= 397 * RequestedDeliveryDate.GetHashCode();
                }

                foreach (var Distributions_elm in Distributions)
                {
                    hash ^= 397 * Distributions_elm.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Decimal _value_amount;
        private global::System.Boolean _set_amount;
        private global::System.Decimal _value_quantity;
        private global::System.Boolean _set_quantity;
        private global::System.String _value_unitOfMeasure = default !;
        private global::System.Boolean _set_unitOfMeasure;
        private global::System.String _value_itemDescription = default !;
        private global::System.Boolean _set_itemDescription;
        private global::System.String? _value_noteToBuyer;
        private global::System.Boolean _set_noteToBuyer;
        private global::System.String _value_purchasingCategoryName = default !;
        private global::System.Boolean _set_purchasingCategoryName;
        private global::System.Decimal _value_unitPrice;
        private global::System.Boolean _set_unitPrice;
        private global::System.String? _value_deliveryToLocationCode;
        private global::System.Boolean _set_deliveryToLocationCode;
        private global::System.String? _value_requestedDeliveryDate;
        private global::System.Boolean _set_requestedDeliveryDate;
        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.ScmPurchaseRequisitionDistributionInput> _value_distributions = default !;
        private global::System.Boolean _set_distributions;
        ///<summary>Total amount of the requested items in USD.</summary>
        public global::System.Decimal Amount
        {
            get => _value_amount;
            set
            {
                _set_amount = true;
                _value_amount = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionLineInputInfo.IsAmountSet => _set_amount;
        ///<summary>Quantity of the goods being purchased.</summary>
        public global::System.Decimal Quantity
        {
            get => _value_quantity;
            set
            {
                _set_quantity = true;
                _value_quantity = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionLineInputInfo.IsQuantitySet => _set_quantity;
        ///<summary>The unit of measure name for the quantity.</summary>
        public global::System.String UnitOfMeasure
        {
            get => _value_unitOfMeasure;
            set
            {
                _set_unitOfMeasure = true;
                _value_unitOfMeasure = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionLineInputInfo.IsUnitOfMeasureSet => _set_unitOfMeasure;
        ///<summary>Description of the goods or services being purchased.</summary>
        public global::System.String ItemDescription
        {
            get => _value_itemDescription;
            set
            {
                _set_itemDescription = true;
                _value_itemDescription = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionLineInputInfo.IsItemDescriptionSet => _set_itemDescription;
        ///<summary>Note to the buyer who will be processing the request.</summary>
        public global::System.String? NoteToBuyer
        {
            get => _value_noteToBuyer;
            set
            {
                _set_noteToBuyer = true;
                _value_noteToBuyer = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionLineInputInfo.IsNoteToBuyerSet => _set_noteToBuyer;
        ///<summary>Name of the purchasing category that is used for classifying the purchase being made by using this order line.</summary>
        public global::System.String PurchasingCategoryName
        {
            get => _value_purchasingCategoryName;
            set
            {
                _set_purchasingCategoryName = true;
                _value_purchasingCategoryName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionLineInputInfo.IsPurchasingCategoryNameSet => _set_purchasingCategoryName;
        ///<summary>Price of the requested item in USD.</summary>
        public global::System.Decimal UnitPrice
        {
            get => _value_unitPrice;
            set
            {
                _set_unitPrice = true;
                _value_unitPrice = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionLineInputInfo.IsUnitPriceSet => _set_unitPrice;
        ///<summary>Abbreviation that identifies the final location where the buying company should deliver the goods previously received from a supplier.</summary>
        public global::System.String? DeliveryToLocationCode
        {
            get => _value_deliveryToLocationCode;
            set
            {
                _set_deliveryToLocationCode = true;
                _value_deliveryToLocationCode = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionLineInputInfo.IsDeliveryToLocationCodeSet => _set_deliveryToLocationCode;
        public global::System.String? RequestedDeliveryDate
        {
            get => _value_requestedDeliveryDate;
            set
            {
                _set_requestedDeliveryDate = true;
                _value_requestedDeliveryDate = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionLineInputInfo.IsRequestedDeliveryDateSet => _set_requestedDeliveryDate;
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.ScmPurchaseRequisitionDistributionInput> Distributions
        {
            get => _value_distributions;
            set
            {
                _set_distributions = true;
                _value_distributions = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionLineInputInfo.IsDistributionsSet => _set_distributions;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionDistributionInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonNegativeFloatFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glSegmentInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glSegmentStringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmSegmentInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmSegmentStringFormatter = default !;
        public global::System.String TypeName => "ScmPurchaseRequisitionDistributionInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _nonNegativeFloatFormatter = serializerResolver.GetInputValueFormatter("NonNegativeFloat");
            _glSegmentInputFormatter = serializerResolver.GetInputValueFormatter("GlSegmentInput");
            _glSegmentStringFormatter = serializerResolver.GetInputValueFormatter("GlSegmentString");
            _ppmSegmentInputFormatter = serializerResolver.GetInputValueFormatter("PpmSegmentInput");
            _ppmSegmentStringFormatter = serializerResolver.GetInputValueFormatter("PpmSegmentString");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.ScmPurchaseRequisitionDistributionInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IScmPurchaseRequisitionDistributionInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsAmountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("amount", FormatAmount(input.Amount)));
            }

            if (inputInfo.IsPercentSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("percent", FormatPercent(input.Percent)));
            }

            if (inputInfo.IsQuantitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("quantity", FormatQuantity(input.Quantity)));
            }

            if (inputInfo.IsGlSegmentsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("glSegments", FormatGlSegments(input.GlSegments)));
            }

            if (inputInfo.IsGlSegmentStringSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("glSegmentString", FormatGlSegmentString(input.GlSegmentString)));
            }

            if (inputInfo.IsPpmSegmentsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ppmSegments", FormatPpmSegments(input.PpmSegments)));
            }

            if (inputInfo.IsPpmSegmentStringSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ppmSegmentString", FormatPpmSegmentString(input.PpmSegmentString)));
            }

            return fields;
        }

        private global::System.Object? FormatAmount(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonNegativeFloatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPercent(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonNegativeFloatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatQuantity(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonNegativeFloatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGlSegments(global::AggieEnterpriseApi.GlSegmentInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _glSegmentInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGlSegmentString(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _glSegmentStringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPpmSegments(global::AggieEnterpriseApi.PpmSegmentInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _ppmSegmentInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPpmSegmentString(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _ppmSegmentStringFormatter.Format(input);
            }
        }
    }

    ///<summary>A single line representing a GL Journal Entry or PPM Cost.  A line must have only one of the two types of expense location specified.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionDistributionInput : global::AggieEnterpriseApi.State.IScmPurchaseRequisitionDistributionInputInfo, global::System.IEquatable<ScmPurchaseRequisitionDistributionInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchaseRequisitionDistributionInput)obj);
        }

        public virtual global::System.Boolean Equals(ScmPurchaseRequisitionDistributionInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Amount == other.Amount) && Percent == other.Percent && Quantity == other.Quantity && ((GlSegments is null && other.GlSegments is null) || GlSegments != null && GlSegments.Equals(other.GlSegments)) && ((GlSegmentString is null && other.GlSegmentString is null) || GlSegmentString != null && GlSegmentString.Equals(other.GlSegmentString)) && ((PpmSegments is null && other.PpmSegments is null) || PpmSegments != null && PpmSegments.Equals(other.PpmSegments)) && ((PpmSegmentString is null && other.PpmSegmentString is null) || PpmSegmentString != null && PpmSegmentString.Equals(other.PpmSegmentString));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Amount != null)
                {
                    hash ^= 397 * Amount.GetHashCode();
                }

                if (Percent != null)
                {
                    hash ^= 397 * Percent.GetHashCode();
                }

                if (Quantity != null)
                {
                    hash ^= 397 * Quantity.GetHashCode();
                }

                if (GlSegments != null)
                {
                    hash ^= 397 * GlSegments.GetHashCode();
                }

                if (GlSegmentString != null)
                {
                    hash ^= 397 * GlSegmentString.GetHashCode();
                }

                if (PpmSegments != null)
                {
                    hash ^= 397 * PpmSegments.GetHashCode();
                }

                if (PpmSegmentString != null)
                {
                    hash ^= 397 * PpmSegmentString.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.Decimal? _value_amount;
        private global::System.Boolean _set_amount;
        private global::System.Decimal? _value_percent;
        private global::System.Boolean _set_percent;
        private global::System.Decimal? _value_quantity;
        private global::System.Boolean _set_quantity;
        private global::AggieEnterpriseApi.GlSegmentInput? _value_glSegments;
        private global::System.Boolean _set_glSegments;
        private global::System.String? _value_glSegmentString;
        private global::System.Boolean _set_glSegmentString;
        private global::AggieEnterpriseApi.PpmSegmentInput? _value_ppmSegments;
        private global::System.Boolean _set_ppmSegments;
        private global::System.String? _value_ppmSegmentString;
        private global::System.Boolean _set_ppmSegmentString;
        public global::System.Decimal? Amount
        {
            get => _value_amount;
            set
            {
                _set_amount = true;
                _value_amount = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionDistributionInputInfo.IsAmountSet => _set_amount;
        public global::System.Decimal? Percent
        {
            get => _value_percent;
            set
            {
                _set_percent = true;
                _value_percent = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionDistributionInputInfo.IsPercentSet => _set_percent;
        public global::System.Decimal? Quantity
        {
            get => _value_quantity;
            set
            {
                _set_quantity = true;
                _value_quantity = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionDistributionInputInfo.IsQuantitySet => _set_quantity;
        public global::AggieEnterpriseApi.GlSegmentInput? GlSegments
        {
            get => _value_glSegments;
            set
            {
                _set_glSegments = true;
                _value_glSegments = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionDistributionInputInfo.IsGlSegmentsSet => _set_glSegments;
        ///<summary>Delimited complete GL segment string.  All fields of the GL Accounting Key must be provided.</summary>
        public global::System.String? GlSegmentString
        {
            get => _value_glSegmentString;
            set
            {
                _set_glSegmentString = true;
                _value_glSegmentString = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionDistributionInputInfo.IsGlSegmentStringSet => _set_glSegmentString;
        ///<summary>PPM POET segment values.  If provided, this will override any provided or default GL segments.</summary>
        public global::AggieEnterpriseApi.PpmSegmentInput? PpmSegments
        {
            get => _value_ppmSegments;
            set
            {
                _set_ppmSegments = true;
                _value_ppmSegments = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionDistributionInputInfo.IsPpmSegmentsSet => _set_ppmSegments;
        ///<summary>PPM POET segment values.  If provided, this will override any provided or default GL segments.</summary>
        public global::System.String? PpmSegmentString
        {
            get => _value_ppmSegmentString;
            set
            {
                _set_ppmSegmentString = true;
                _value_ppmSegmentString = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchaseRequisitionDistributionInputInfo.IsPpmSegmentStringSet => _set_ppmSegmentString;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategoryFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _searchCommonInputsFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateFilterInputFormatter = default !;
        public global::System.String TypeName => "ScmPurchasingCategoryFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _searchCommonInputsFormatter = serializerResolver.GetInputValueFormatter("SearchCommonInputs");
            _stringFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringFilterInput");
            _booleanFilterInputFormatter = serializerResolver.GetInputValueFormatter("BooleanFilterInput");
            _dateFilterInputFormatter = serializerResolver.GetInputValueFormatter("DateFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.ScmPurchasingCategoryFilterInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IScmPurchasingCategoryFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsSearchCommonSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("searchCommon", FormatSearchCommon(input.SearchCommon)));
            }

            if (inputInfo.IsCodeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("code", FormatCode(input.Code)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("description", FormatDescription(input.Description)));
            }

            if (inputInfo.IsEnabledSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("enabled", FormatEnabled(input.Enabled)));
            }

            if (inputInfo.IsLastUpdateDateTimeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lastUpdateDateTime", FormatLastUpdateDateTime(input.LastUpdateDateTime)));
            }

            return fields;
        }

        private global::System.Object? FormatSearchCommon(global::AggieEnterpriseApi.SearchCommonInputs? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _searchCommonInputsFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCode(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDescription(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEnabled(global::AggieEnterpriseApi.BooleanFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLastUpdateDateTime(global::AggieEnterpriseApi.DateFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFilterInputFormatter.Format(input);
            }
        }
    }

    ///<summary>Data object used to run searches on ScmPurchasingCategory</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategoryFilterInput : global::AggieEnterpriseApi.State.IScmPurchasingCategoryFilterInputInfo, global::System.IEquatable<ScmPurchasingCategoryFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmPurchasingCategoryFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ScmPurchasingCategoryFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SearchCommon is null && other.SearchCommon is null) || SearchCommon != null && SearchCommon.Equals(other.SearchCommon))) && ((Code is null && other.Code is null) || Code != null && Code.Equals(other.Code)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && ((Enabled is null && other.Enabled is null) || Enabled != null && Enabled.Equals(other.Enabled)) && ((LastUpdateDateTime is null && other.LastUpdateDateTime is null) || LastUpdateDateTime != null && LastUpdateDateTime.Equals(other.LastUpdateDateTime));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SearchCommon != null)
                {
                    hash ^= 397 * SearchCommon.GetHashCode();
                }

                if (Code != null)
                {
                    hash ^= 397 * Code.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                if (Enabled != null)
                {
                    hash ^= 397 * Enabled.GetHashCode();
                }

                if (LastUpdateDateTime != null)
                {
                    hash ^= 397 * LastUpdateDateTime.GetHashCode();
                }

                return hash;
            }
        }

        private global::AggieEnterpriseApi.SearchCommonInputs? _value_searchCommon;
        private global::System.Boolean _set_searchCommon;
        private global::AggieEnterpriseApi.StringFilterInput? _value_code;
        private global::System.Boolean _set_code;
        private global::AggieEnterpriseApi.StringFilterInput? _value_name;
        private global::System.Boolean _set_name;
        private global::AggieEnterpriseApi.StringFilterInput? _value_description;
        private global::System.Boolean _set_description;
        private global::AggieEnterpriseApi.BooleanFilterInput? _value_enabled;
        private global::System.Boolean _set_enabled;
        private global::AggieEnterpriseApi.DateFilterInput? _value_lastUpdateDateTime;
        private global::System.Boolean _set_lastUpdateDateTime;
        public global::AggieEnterpriseApi.SearchCommonInputs? SearchCommon
        {
            get => _value_searchCommon;
            set
            {
                _set_searchCommon = true;
                _value_searchCommon = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchasingCategoryFilterInputInfo.IsSearchCommonSet => _set_searchCommon;
        public global::AggieEnterpriseApi.StringFilterInput? Code
        {
            get => _value_code;
            set
            {
                _set_code = true;
                _value_code = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchasingCategoryFilterInputInfo.IsCodeSet => _set_code;
        public global::AggieEnterpriseApi.StringFilterInput? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchasingCategoryFilterInputInfo.IsNameSet => _set_name;
        public global::AggieEnterpriseApi.StringFilterInput? Description
        {
            get => _value_description;
            set
            {
                _set_description = true;
                _value_description = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchasingCategoryFilterInputInfo.IsDescriptionSet => _set_description;
        public global::AggieEnterpriseApi.BooleanFilterInput? Enabled
        {
            get => _value_enabled;
            set
            {
                _set_enabled = true;
                _value_enabled = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchasingCategoryFilterInputInfo.IsEnabledSet => _set_enabled;
        public global::AggieEnterpriseApi.DateFilterInput? LastUpdateDateTime
        {
            get => _value_lastUpdateDateTime;
            set
            {
                _set_lastUpdateDateTime = true;
                _value_lastUpdateDateTime = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmPurchasingCategoryFilterInputInfo.IsLastUpdateDateTimeSet => _set_lastUpdateDateTime;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DateFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateFormatter = default !;
        public global::System.String TypeName => "DateFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _dateFormatter = serializerResolver.GetInputValueFormatter("Date");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.DateFilterInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IDateFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEqSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("eq", FormatEq(input.Eq)));
            }

            if (inputInfo.IsNeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ne", FormatNe(input.Ne)));
            }

            if (inputInfo.IsLeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("le", FormatLe(input.Le)));
            }

            if (inputInfo.IsLtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lt", FormatLt(input.Lt)));
            }

            if (inputInfo.IsGeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ge", FormatGe(input.Ge)));
            }

            if (inputInfo.IsGtSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("gt", FormatGt(input.Gt)));
            }

            if (inputInfo.IsBetweenSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("between", FormatBetween(input.Between)));
            }

            return fields;
        }

        private global::System.Object? FormatEq(global::System.DateTime? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatNe(global::System.DateTime? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLe(global::System.DateTime? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLt(global::System.DateTime? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGe(global::System.DateTime? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGt(global::System.DateTime? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatBetween(global::System.Collections.Generic.IReadOnlyList<global::System.DateTime>? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
                foreach (var input_elm in input)
                {
                    input_list.Add(_dateFormatter.Format(input_elm));
                }

                return input_list;
            }
        }
    }

    ///<summary>Generic date filter criteria object, only one of these properties should be set</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DateFilterInput : global::AggieEnterpriseApi.State.IDateFilterInputInfo, global::System.IEquatable<DateFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DateFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(DateFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Eq is null && other.Eq is null) || Eq != null && Eq.Equals(other.Eq))) && ((Ne is null && other.Ne is null) || Ne != null && Ne.Equals(other.Ne)) && ((Le is null && other.Le is null) || Le != null && Le.Equals(other.Le)) && ((Lt is null && other.Lt is null) || Lt != null && Lt.Equals(other.Lt)) && ((Ge is null && other.Ge is null) || Ge != null && Ge.Equals(other.Ge)) && ((Gt is null && other.Gt is null) || Gt != null && Gt.Equals(other.Gt)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Between, other.Between);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Eq != null)
                {
                    hash ^= 397 * Eq.GetHashCode();
                }

                if (Ne != null)
                {
                    hash ^= 397 * Ne.GetHashCode();
                }

                if (Le != null)
                {
                    hash ^= 397 * Le.GetHashCode();
                }

                if (Lt != null)
                {
                    hash ^= 397 * Lt.GetHashCode();
                }

                if (Ge != null)
                {
                    hash ^= 397 * Ge.GetHashCode();
                }

                if (Gt != null)
                {
                    hash ^= 397 * Gt.GetHashCode();
                }

                if (Between != null)
                {
                    foreach (var Between_elm in Between)
                    {
                        hash ^= 397 * Between_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }

        private global::System.DateTime? _value_eq;
        private global::System.Boolean _set_eq;
        private global::System.DateTime? _value_ne;
        private global::System.Boolean _set_ne;
        private global::System.DateTime? _value_le;
        private global::System.Boolean _set_le;
        private global::System.DateTime? _value_lt;
        private global::System.Boolean _set_lt;
        private global::System.DateTime? _value_ge;
        private global::System.Boolean _set_ge;
        private global::System.DateTime? _value_gt;
        private global::System.Boolean _set_gt;
        private global::System.Collections.Generic.IReadOnlyList<global::System.DateTime>? _value_between;
        private global::System.Boolean _set_between;
        ///<summary>Test if property is equal to the given value</summary>
        public global::System.DateTime? Eq
        {
            get => _value_eq;
            set
            {
                _set_eq = true;
                _value_eq = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IDateFilterInputInfo.IsEqSet => _set_eq;
        ///<summary>Test if property is NOT equal to the given value</summary>
        public global::System.DateTime? Ne
        {
            get => _value_ne;
            set
            {
                _set_ne = true;
                _value_ne = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IDateFilterInputInfo.IsNeSet => _set_ne;
        ///<summary>Test if property is less than or equal to the given value</summary>
        public global::System.DateTime? Le
        {
            get => _value_le;
            set
            {
                _set_le = true;
                _value_le = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IDateFilterInputInfo.IsLeSet => _set_le;
        ///<summary>Test if property is less than the given value</summary>
        public global::System.DateTime? Lt
        {
            get => _value_lt;
            set
            {
                _set_lt = true;
                _value_lt = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IDateFilterInputInfo.IsLtSet => _set_lt;
        ///<summary>Test if property is greater than or equal to the given value</summary>
        public global::System.DateTime? Ge
        {
            get => _value_ge;
            set
            {
                _set_ge = true;
                _value_ge = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IDateFilterInputInfo.IsGeSet => _set_ge;
        ///<summary>Test if property is greater than the given value</summary>
        public global::System.DateTime? Gt
        {
            get => _value_gt;
            set
            {
                _set_gt = true;
                _value_gt = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IDateFilterInputInfo.IsGtSet => _set_gt;
        ///<summary>Test if property is between the first 2 elements in the array</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.DateTime>? Between
        {
            get => _value_between;
            set
            {
                _set_between = true;
                _value_between = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IDateFilterInputInfo.IsBetweenSet => _set_between;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _searchCommonInputsFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateFilterInputFormatter = default !;
        public global::System.String TypeName => "ScmSupplierFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _searchCommonInputsFormatter = serializerResolver.GetInputValueFormatter("SearchCommonInputs");
            _stringFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringFilterInput");
            _dateFilterInputFormatter = serializerResolver.GetInputValueFormatter("DateFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.ScmSupplierFilterInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IScmSupplierFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsSearchCommonSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("searchCommon", FormatSearchCommon(input.SearchCommon)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsAliasNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("aliasName", FormatAliasName(input.AliasName)));
            }

            if (inputInfo.IsAlternateNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("alternateName", FormatAlternateName(input.AlternateName)));
            }

            if (inputInfo.IsSupplierIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("supplierId", FormatSupplierId(input.SupplierId)));
            }

            if (inputInfo.IsSupplierNumberSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("supplierNumber", FormatSupplierNumber(input.SupplierNumber)));
            }

            if (inputInfo.IsLastUpdateDateTimeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lastUpdateDateTime", FormatLastUpdateDateTime(input.LastUpdateDateTime)));
            }

            return fields;
        }

        private global::System.Object? FormatSearchCommon(global::AggieEnterpriseApi.SearchCommonInputs? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _searchCommonInputsFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAliasName(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAlternateName(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSupplierId(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSupplierNumber(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLastUpdateDateTime(global::AggieEnterpriseApi.DateFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFilterInputFormatter.Format(input);
            }
        }
    }

    ///<summary>Input object used to run searches on ScmSupplier</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierFilterInput : global::AggieEnterpriseApi.State.IScmSupplierFilterInputInfo, global::System.IEquatable<ScmSupplierFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ScmSupplierFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(ScmSupplierFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SearchCommon is null && other.SearchCommon is null) || SearchCommon != null && SearchCommon.Equals(other.SearchCommon))) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((AliasName is null && other.AliasName is null) || AliasName != null && AliasName.Equals(other.AliasName)) && ((AlternateName is null && other.AlternateName is null) || AlternateName != null && AlternateName.Equals(other.AlternateName)) && ((SupplierId is null && other.SupplierId is null) || SupplierId != null && SupplierId.Equals(other.SupplierId)) && ((SupplierNumber is null && other.SupplierNumber is null) || SupplierNumber != null && SupplierNumber.Equals(other.SupplierNumber)) && ((LastUpdateDateTime is null && other.LastUpdateDateTime is null) || LastUpdateDateTime != null && LastUpdateDateTime.Equals(other.LastUpdateDateTime));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SearchCommon != null)
                {
                    hash ^= 397 * SearchCommon.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (AliasName != null)
                {
                    hash ^= 397 * AliasName.GetHashCode();
                }

                if (AlternateName != null)
                {
                    hash ^= 397 * AlternateName.GetHashCode();
                }

                if (SupplierId != null)
                {
                    hash ^= 397 * SupplierId.GetHashCode();
                }

                if (SupplierNumber != null)
                {
                    hash ^= 397 * SupplierNumber.GetHashCode();
                }

                if (LastUpdateDateTime != null)
                {
                    hash ^= 397 * LastUpdateDateTime.GetHashCode();
                }

                return hash;
            }
        }

        private global::AggieEnterpriseApi.SearchCommonInputs? _value_searchCommon;
        private global::System.Boolean _set_searchCommon;
        private global::AggieEnterpriseApi.StringFilterInput? _value_name;
        private global::System.Boolean _set_name;
        private global::AggieEnterpriseApi.StringFilterInput? _value_aliasName;
        private global::System.Boolean _set_aliasName;
        private global::AggieEnterpriseApi.StringFilterInput? _value_alternateName;
        private global::System.Boolean _set_alternateName;
        private global::AggieEnterpriseApi.StringFilterInput? _value_supplierId;
        private global::System.Boolean _set_supplierId;
        private global::AggieEnterpriseApi.StringFilterInput? _value_supplierNumber;
        private global::System.Boolean _set_supplierNumber;
        private global::AggieEnterpriseApi.DateFilterInput? _value_lastUpdateDateTime;
        private global::System.Boolean _set_lastUpdateDateTime;
        public global::AggieEnterpriseApi.SearchCommonInputs? SearchCommon
        {
            get => _value_searchCommon;
            set
            {
                _set_searchCommon = true;
                _value_searchCommon = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmSupplierFilterInputInfo.IsSearchCommonSet => _set_searchCommon;
        public global::AggieEnterpriseApi.StringFilterInput? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmSupplierFilterInputInfo.IsNameSet => _set_name;
        public global::AggieEnterpriseApi.StringFilterInput? AliasName
        {
            get => _value_aliasName;
            set
            {
                _set_aliasName = true;
                _value_aliasName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmSupplierFilterInputInfo.IsAliasNameSet => _set_aliasName;
        public global::AggieEnterpriseApi.StringFilterInput? AlternateName
        {
            get => _value_alternateName;
            set
            {
                _set_alternateName = true;
                _value_alternateName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmSupplierFilterInputInfo.IsAlternateNameSet => _set_alternateName;
        public global::AggieEnterpriseApi.StringFilterInput? SupplierId
        {
            get => _value_supplierId;
            set
            {
                _set_supplierId = true;
                _value_supplierId = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmSupplierFilterInputInfo.IsSupplierIdSet => _set_supplierId;
        public global::AggieEnterpriseApi.StringFilterInput? SupplierNumber
        {
            get => _value_supplierNumber;
            set
            {
                _set_supplierNumber = true;
                _value_supplierNumber = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmSupplierFilterInputInfo.IsSupplierNumberSet => _set_supplierNumber;
        public global::AggieEnterpriseApi.DateFilterInput? LastUpdateDateTime
        {
            get => _value_lastUpdateDateTime;
            set
            {
                _set_lastUpdateDateTime = true;
                _value_lastUpdateDateTime = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IScmSupplierFilterInputInfo.IsLastUpdateDateTimeSet => _set_lastUpdateDateTime;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _searchCommonInputsFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateFilterInputFormatter = default !;
        public global::System.String TypeName => "PpmExpenditureTypeFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _searchCommonInputsFormatter = serializerResolver.GetInputValueFormatter("SearchCommonInputs");
            _stringFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringFilterInput");
            _dateFilterInputFormatter = serializerResolver.GetInputValueFormatter("DateFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.PpmExpenditureTypeFilterInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IPpmExpenditureTypeFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsSearchCommonSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("searchCommon", FormatSearchCommon(input.SearchCommon)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsLastUpdateDateTimeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lastUpdateDateTime", FormatLastUpdateDateTime(input.LastUpdateDateTime)));
            }

            return fields;
        }

        private global::System.Object? FormatSearchCommon(global::AggieEnterpriseApi.SearchCommonInputs? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _searchCommonInputsFormatter.Format(input);
            }
        }

        private global::System.Object? FormatId(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLastUpdateDateTime(global::AggieEnterpriseApi.DateFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFilterInputFormatter.Format(input);
            }
        }
    }

    ///<summary>Data object used to run searches on PpmExpenditureType</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeFilterInput : global::AggieEnterpriseApi.State.IPpmExpenditureTypeFilterInputInfo, global::System.IEquatable<PpmExpenditureTypeFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmExpenditureTypeFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(PpmExpenditureTypeFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SearchCommon is null && other.SearchCommon is null) || SearchCommon != null && SearchCommon.Equals(other.SearchCommon))) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((LastUpdateDateTime is null && other.LastUpdateDateTime is null) || LastUpdateDateTime != null && LastUpdateDateTime.Equals(other.LastUpdateDateTime));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SearchCommon != null)
                {
                    hash ^= 397 * SearchCommon.GetHashCode();
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (LastUpdateDateTime != null)
                {
                    hash ^= 397 * LastUpdateDateTime.GetHashCode();
                }

                return hash;
            }
        }

        private global::AggieEnterpriseApi.SearchCommonInputs? _value_searchCommon;
        private global::System.Boolean _set_searchCommon;
        private global::AggieEnterpriseApi.StringFilterInput? _value_id;
        private global::System.Boolean _set_id;
        private global::AggieEnterpriseApi.StringFilterInput? _value_name;
        private global::System.Boolean _set_name;
        private global::AggieEnterpriseApi.DateFilterInput? _value_lastUpdateDateTime;
        private global::System.Boolean _set_lastUpdateDateTime;
        public global::AggieEnterpriseApi.SearchCommonInputs? SearchCommon
        {
            get => _value_searchCommon;
            set
            {
                _set_searchCommon = true;
                _value_searchCommon = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmExpenditureTypeFilterInputInfo.IsSearchCommonSet => _set_searchCommon;
        public global::AggieEnterpriseApi.StringFilterInput? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmExpenditureTypeFilterInputInfo.IsIdSet => _set_id;
        public global::AggieEnterpriseApi.StringFilterInput? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmExpenditureTypeFilterInputInfo.IsNameSet => _set_name;
        public global::AggieEnterpriseApi.DateFilterInput? LastUpdateDateTime
        {
            get => _value_lastUpdateDateTime;
            set
            {
                _set_lastUpdateDateTime = true;
                _value_lastUpdateDateTime = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmExpenditureTypeFilterInputInfo.IsLastUpdateDateTimeSet => _set_lastUpdateDateTime;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _searchCommonInputsFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFilterInputFormatter = default !;
        public global::System.String TypeName => "PpmOrganizationFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _searchCommonInputsFormatter = serializerResolver.GetInputValueFormatter("SearchCommonInputs");
            _stringFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringFilterInput");
            _booleanFilterInputFormatter = serializerResolver.GetInputValueFormatter("BooleanFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.PpmOrganizationFilterInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IPpmOrganizationFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsSearchCommonSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("searchCommon", FormatSearchCommon(input.SearchCommon)));
            }

            if (inputInfo.IsCodeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("code", FormatCode(input.Code)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsEnabledSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("enabled", FormatEnabled(input.Enabled)));
            }

            return fields;
        }

        private global::System.Object? FormatSearchCommon(global::AggieEnterpriseApi.SearchCommonInputs? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _searchCommonInputsFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCode(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatEnabled(global::AggieEnterpriseApi.BooleanFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFilterInputFormatter.Format(input);
            }
        }
    }

    ///<summary>Data object used to run searches on PpmOrganization</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationFilterInput : global::AggieEnterpriseApi.State.IPpmOrganizationFilterInputInfo, global::System.IEquatable<PpmOrganizationFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmOrganizationFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(PpmOrganizationFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SearchCommon is null && other.SearchCommon is null) || SearchCommon != null && SearchCommon.Equals(other.SearchCommon))) && ((Code is null && other.Code is null) || Code != null && Code.Equals(other.Code)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((Enabled is null && other.Enabled is null) || Enabled != null && Enabled.Equals(other.Enabled));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SearchCommon != null)
                {
                    hash ^= 397 * SearchCommon.GetHashCode();
                }

                if (Code != null)
                {
                    hash ^= 397 * Code.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (Enabled != null)
                {
                    hash ^= 397 * Enabled.GetHashCode();
                }

                return hash;
            }
        }

        private global::AggieEnterpriseApi.SearchCommonInputs? _value_searchCommon;
        private global::System.Boolean _set_searchCommon;
        private global::AggieEnterpriseApi.StringFilterInput? _value_code;
        private global::System.Boolean _set_code;
        private global::AggieEnterpriseApi.StringFilterInput? _value_name;
        private global::System.Boolean _set_name;
        private global::AggieEnterpriseApi.BooleanFilterInput? _value_enabled;
        private global::System.Boolean _set_enabled;
        public global::AggieEnterpriseApi.SearchCommonInputs? SearchCommon
        {
            get => _value_searchCommon;
            set
            {
                _set_searchCommon = true;
                _value_searchCommon = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmOrganizationFilterInputInfo.IsSearchCommonSet => _set_searchCommon;
        public global::AggieEnterpriseApi.StringFilterInput? Code
        {
            get => _value_code;
            set
            {
                _set_code = true;
                _value_code = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmOrganizationFilterInputInfo.IsCodeSet => _set_code;
        public global::AggieEnterpriseApi.StringFilterInput? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmOrganizationFilterInputInfo.IsNameSet => _set_name;
        public global::AggieEnterpriseApi.BooleanFilterInput? Enabled
        {
            get => _value_enabled;
            set
            {
                _set_enabled = true;
                _value_enabled = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmOrganizationFilterInputInfo.IsEnabledSet => _set_enabled;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _searchCommonInputsFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFilterInputFormatter = default !;
        public global::System.String TypeName => "PpmProjectFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _searchCommonInputsFormatter = serializerResolver.GetInputValueFormatter("SearchCommonInputs");
            _stringFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringFilterInput");
            _dateFilterInputFormatter = serializerResolver.GetInputValueFormatter("DateFilterInput");
            _booleanFilterInputFormatter = serializerResolver.GetInputValueFormatter("BooleanFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.PpmProjectFilterInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsSearchCommonSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("searchCommon", FormatSearchCommon(input.SearchCommon)));
            }

            if (inputInfo.IsProjectNumberSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("projectNumber", FormatProjectNumber(input.ProjectNumber)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsProjectStartDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("projectStartDate", FormatProjectStartDate(input.ProjectStartDate)));
            }

            if (inputInfo.IsProjectCompletionDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("projectCompletionDate", FormatProjectCompletionDate(input.ProjectCompletionDate)));
            }

            if (inputInfo.IsProjectStatusCodeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("projectStatusCode", FormatProjectStatusCode(input.ProjectStatusCode)));
            }

            if (inputInfo.IsPrimaryProjectManagerEmailSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("primaryProjectManagerEmail", FormatPrimaryProjectManagerEmail(input.PrimaryProjectManagerEmail)));
            }

            if (inputInfo.IsSponsoredProjectSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("sponsoredProject", FormatSponsoredProject(input.SponsoredProject)));
            }

            if (inputInfo.IsBillingEnabledSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("billingEnabled", FormatBillingEnabled(input.BillingEnabled)));
            }

            if (inputInfo.IsCapitalizationEnabledSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("capitalizationEnabled", FormatCapitalizationEnabled(input.CapitalizationEnabled)));
            }

            if (inputInfo.IsTemplateProjectSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("templateProject", FormatTemplateProject(input.TemplateProject)));
            }

            if (inputInfo.IsLastUpdateDateTimeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lastUpdateDateTime", FormatLastUpdateDateTime(input.LastUpdateDateTime)));
            }

            return fields;
        }

        private global::System.Object? FormatSearchCommon(global::AggieEnterpriseApi.SearchCommonInputs? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _searchCommonInputsFormatter.Format(input);
            }
        }

        private global::System.Object? FormatProjectNumber(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatProjectStartDate(global::AggieEnterpriseApi.DateFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatProjectCompletionDate(global::AggieEnterpriseApi.DateFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatProjectStatusCode(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPrimaryProjectManagerEmail(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatSponsoredProject(global::AggieEnterpriseApi.BooleanFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatBillingEnabled(global::AggieEnterpriseApi.BooleanFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCapitalizationEnabled(global::AggieEnterpriseApi.BooleanFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTemplateProject(global::AggieEnterpriseApi.BooleanFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLastUpdateDateTime(global::AggieEnterpriseApi.DateFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFilterInputFormatter.Format(input);
            }
        }
    }

    ///<summary>Data object used to run searches on PpmProject</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectFilterInput : global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo, global::System.IEquatable<PpmProjectFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmProjectFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(PpmProjectFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SearchCommon is null && other.SearchCommon is null) || SearchCommon != null && SearchCommon.Equals(other.SearchCommon))) && ((ProjectNumber is null && other.ProjectNumber is null) || ProjectNumber != null && ProjectNumber.Equals(other.ProjectNumber)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((ProjectStartDate is null && other.ProjectStartDate is null) || ProjectStartDate != null && ProjectStartDate.Equals(other.ProjectStartDate)) && ((ProjectCompletionDate is null && other.ProjectCompletionDate is null) || ProjectCompletionDate != null && ProjectCompletionDate.Equals(other.ProjectCompletionDate)) && ((ProjectStatusCode is null && other.ProjectStatusCode is null) || ProjectStatusCode != null && ProjectStatusCode.Equals(other.ProjectStatusCode)) && ((PrimaryProjectManagerEmail is null && other.PrimaryProjectManagerEmail is null) || PrimaryProjectManagerEmail != null && PrimaryProjectManagerEmail.Equals(other.PrimaryProjectManagerEmail)) && ((SponsoredProject is null && other.SponsoredProject is null) || SponsoredProject != null && SponsoredProject.Equals(other.SponsoredProject)) && ((BillingEnabled is null && other.BillingEnabled is null) || BillingEnabled != null && BillingEnabled.Equals(other.BillingEnabled)) && ((CapitalizationEnabled is null && other.CapitalizationEnabled is null) || CapitalizationEnabled != null && CapitalizationEnabled.Equals(other.CapitalizationEnabled)) && ((TemplateProject is null && other.TemplateProject is null) || TemplateProject != null && TemplateProject.Equals(other.TemplateProject)) && ((LastUpdateDateTime is null && other.LastUpdateDateTime is null) || LastUpdateDateTime != null && LastUpdateDateTime.Equals(other.LastUpdateDateTime));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SearchCommon != null)
                {
                    hash ^= 397 * SearchCommon.GetHashCode();
                }

                if (ProjectNumber != null)
                {
                    hash ^= 397 * ProjectNumber.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (ProjectStartDate != null)
                {
                    hash ^= 397 * ProjectStartDate.GetHashCode();
                }

                if (ProjectCompletionDate != null)
                {
                    hash ^= 397 * ProjectCompletionDate.GetHashCode();
                }

                if (ProjectStatusCode != null)
                {
                    hash ^= 397 * ProjectStatusCode.GetHashCode();
                }

                if (PrimaryProjectManagerEmail != null)
                {
                    hash ^= 397 * PrimaryProjectManagerEmail.GetHashCode();
                }

                if (SponsoredProject != null)
                {
                    hash ^= 397 * SponsoredProject.GetHashCode();
                }

                if (BillingEnabled != null)
                {
                    hash ^= 397 * BillingEnabled.GetHashCode();
                }

                if (CapitalizationEnabled != null)
                {
                    hash ^= 397 * CapitalizationEnabled.GetHashCode();
                }

                if (TemplateProject != null)
                {
                    hash ^= 397 * TemplateProject.GetHashCode();
                }

                if (LastUpdateDateTime != null)
                {
                    hash ^= 397 * LastUpdateDateTime.GetHashCode();
                }

                return hash;
            }
        }

        private global::AggieEnterpriseApi.SearchCommonInputs? _value_searchCommon;
        private global::System.Boolean _set_searchCommon;
        private global::AggieEnterpriseApi.StringFilterInput? _value_projectNumber;
        private global::System.Boolean _set_projectNumber;
        private global::AggieEnterpriseApi.StringFilterInput? _value_name;
        private global::System.Boolean _set_name;
        private global::AggieEnterpriseApi.DateFilterInput? _value_projectStartDate;
        private global::System.Boolean _set_projectStartDate;
        private global::AggieEnterpriseApi.DateFilterInput? _value_projectCompletionDate;
        private global::System.Boolean _set_projectCompletionDate;
        private global::AggieEnterpriseApi.StringFilterInput? _value_projectStatusCode;
        private global::System.Boolean _set_projectStatusCode;
        private global::AggieEnterpriseApi.StringFilterInput? _value_primaryProjectManagerEmail;
        private global::System.Boolean _set_primaryProjectManagerEmail;
        private global::AggieEnterpriseApi.BooleanFilterInput? _value_sponsoredProject;
        private global::System.Boolean _set_sponsoredProject;
        private global::AggieEnterpriseApi.BooleanFilterInput? _value_billingEnabled;
        private global::System.Boolean _set_billingEnabled;
        private global::AggieEnterpriseApi.BooleanFilterInput? _value_capitalizationEnabled;
        private global::System.Boolean _set_capitalizationEnabled;
        private global::AggieEnterpriseApi.BooleanFilterInput? _value_templateProject;
        private global::System.Boolean _set_templateProject;
        private global::AggieEnterpriseApi.DateFilterInput? _value_lastUpdateDateTime;
        private global::System.Boolean _set_lastUpdateDateTime;
        public global::AggieEnterpriseApi.SearchCommonInputs? SearchCommon
        {
            get => _value_searchCommon;
            set
            {
                _set_searchCommon = true;
                _value_searchCommon = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo.IsSearchCommonSet => _set_searchCommon;
        public global::AggieEnterpriseApi.StringFilterInput? ProjectNumber
        {
            get => _value_projectNumber;
            set
            {
                _set_projectNumber = true;
                _value_projectNumber = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo.IsProjectNumberSet => _set_projectNumber;
        public global::AggieEnterpriseApi.StringFilterInput? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo.IsNameSet => _set_name;
        public global::AggieEnterpriseApi.DateFilterInput? ProjectStartDate
        {
            get => _value_projectStartDate;
            set
            {
                _set_projectStartDate = true;
                _value_projectStartDate = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo.IsProjectStartDateSet => _set_projectStartDate;
        public global::AggieEnterpriseApi.DateFilterInput? ProjectCompletionDate
        {
            get => _value_projectCompletionDate;
            set
            {
                _set_projectCompletionDate = true;
                _value_projectCompletionDate = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo.IsProjectCompletionDateSet => _set_projectCompletionDate;
        public global::AggieEnterpriseApi.StringFilterInput? ProjectStatusCode
        {
            get => _value_projectStatusCode;
            set
            {
                _set_projectStatusCode = true;
                _value_projectStatusCode = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo.IsProjectStatusCodeSet => _set_projectStatusCode;
        public global::AggieEnterpriseApi.StringFilterInput? PrimaryProjectManagerEmail
        {
            get => _value_primaryProjectManagerEmail;
            set
            {
                _set_primaryProjectManagerEmail = true;
                _value_primaryProjectManagerEmail = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo.IsPrimaryProjectManagerEmailSet => _set_primaryProjectManagerEmail;
        public global::AggieEnterpriseApi.BooleanFilterInput? SponsoredProject
        {
            get => _value_sponsoredProject;
            set
            {
                _set_sponsoredProject = true;
                _value_sponsoredProject = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo.IsSponsoredProjectSet => _set_sponsoredProject;
        public global::AggieEnterpriseApi.BooleanFilterInput? BillingEnabled
        {
            get => _value_billingEnabled;
            set
            {
                _set_billingEnabled = true;
                _value_billingEnabled = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo.IsBillingEnabledSet => _set_billingEnabled;
        public global::AggieEnterpriseApi.BooleanFilterInput? CapitalizationEnabled
        {
            get => _value_capitalizationEnabled;
            set
            {
                _set_capitalizationEnabled = true;
                _value_capitalizationEnabled = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo.IsCapitalizationEnabledSet => _set_capitalizationEnabled;
        public global::AggieEnterpriseApi.BooleanFilterInput? TemplateProject
        {
            get => _value_templateProject;
            set
            {
                _set_templateProject = true;
                _value_templateProject = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo.IsTemplateProjectSet => _set_templateProject;
        public global::AggieEnterpriseApi.DateFilterInput? LastUpdateDateTime
        {
            get => _value_lastUpdateDateTime;
            set
            {
                _set_lastUpdateDateTime = true;
                _value_lastUpdateDateTime = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmProjectFilterInputInfo.IsLastUpdateDateTimeSet => _set_lastUpdateDateTime;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskFilterInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _searchCommonInputsFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFilterInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateFilterInputFormatter = default !;
        public global::System.String TypeName => "PpmTaskFilterInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _searchCommonInputsFormatter = serializerResolver.GetInputValueFormatter("SearchCommonInputs");
            _stringFilterInputFormatter = serializerResolver.GetInputValueFormatter("StringFilterInput");
            _booleanFilterInputFormatter = serializerResolver.GetInputValueFormatter("BooleanFilterInput");
            _dateFilterInputFormatter = serializerResolver.GetInputValueFormatter("DateFilterInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.PpmTaskFilterInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IPpmTaskFilterInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsSearchCommonSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("searchCommon", FormatSearchCommon(input.SearchCommon)));
            }

            if (inputInfo.IsIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("id", FormatId(input.Id)));
            }

            if (inputInfo.IsProjectIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("projectId", FormatProjectId(input.ProjectId)));
            }

            if (inputInfo.IsNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("name", FormatName(input.Name)));
            }

            if (inputInfo.IsTaskNumberSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("taskNumber", FormatTaskNumber(input.TaskNumber)));
            }

            if (inputInfo.IsChargeableSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("chargeable", FormatChargeable(input.Chargeable)));
            }

            if (inputInfo.IsBillableSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("billable", FormatBillable(input.Billable)));
            }

            if (inputInfo.IsLastUpdateDateTimeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lastUpdateDateTime", FormatLastUpdateDateTime(input.LastUpdateDateTime)));
            }

            return fields;
        }

        private global::System.Object? FormatSearchCommon(global::AggieEnterpriseApi.SearchCommonInputs? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _searchCommonInputsFormatter.Format(input);
            }
        }

        private global::System.Object? FormatId(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatProjectId(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatName(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTaskNumber(global::AggieEnterpriseApi.StringFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatChargeable(global::AggieEnterpriseApi.BooleanFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatBillable(global::AggieEnterpriseApi.BooleanFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFilterInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatLastUpdateDateTime(global::AggieEnterpriseApi.DateFilterInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFilterInputFormatter.Format(input);
            }
        }
    }

    ///<summary>Data object used to run searches on PpmTask</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskFilterInput : global::AggieEnterpriseApi.State.IPpmTaskFilterInputInfo, global::System.IEquatable<PpmTaskFilterInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmTaskFilterInput)obj);
        }

        public virtual global::System.Boolean Equals(PpmTaskFilterInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((SearchCommon is null && other.SearchCommon is null) || SearchCommon != null && SearchCommon.Equals(other.SearchCommon))) && ((Id is null && other.Id is null) || Id != null && Id.Equals(other.Id)) && ((ProjectId is null && other.ProjectId is null) || ProjectId != null && ProjectId.Equals(other.ProjectId)) && ((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name)) && ((TaskNumber is null && other.TaskNumber is null) || TaskNumber != null && TaskNumber.Equals(other.TaskNumber)) && ((Chargeable is null && other.Chargeable is null) || Chargeable != null && Chargeable.Equals(other.Chargeable)) && ((Billable is null && other.Billable is null) || Billable != null && Billable.Equals(other.Billable)) && ((LastUpdateDateTime is null && other.LastUpdateDateTime is null) || LastUpdateDateTime != null && LastUpdateDateTime.Equals(other.LastUpdateDateTime));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (SearchCommon != null)
                {
                    hash ^= 397 * SearchCommon.GetHashCode();
                }

                if (Id != null)
                {
                    hash ^= 397 * Id.GetHashCode();
                }

                if (ProjectId != null)
                {
                    hash ^= 397 * ProjectId.GetHashCode();
                }

                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                if (TaskNumber != null)
                {
                    hash ^= 397 * TaskNumber.GetHashCode();
                }

                if (Chargeable != null)
                {
                    hash ^= 397 * Chargeable.GetHashCode();
                }

                if (Billable != null)
                {
                    hash ^= 397 * Billable.GetHashCode();
                }

                if (LastUpdateDateTime != null)
                {
                    hash ^= 397 * LastUpdateDateTime.GetHashCode();
                }

                return hash;
            }
        }

        private global::AggieEnterpriseApi.SearchCommonInputs? _value_searchCommon;
        private global::System.Boolean _set_searchCommon;
        private global::AggieEnterpriseApi.StringFilterInput? _value_id;
        private global::System.Boolean _set_id;
        private global::AggieEnterpriseApi.StringFilterInput? _value_projectId;
        private global::System.Boolean _set_projectId;
        private global::AggieEnterpriseApi.StringFilterInput? _value_name;
        private global::System.Boolean _set_name;
        private global::AggieEnterpriseApi.StringFilterInput? _value_taskNumber;
        private global::System.Boolean _set_taskNumber;
        private global::AggieEnterpriseApi.BooleanFilterInput? _value_chargeable;
        private global::System.Boolean _set_chargeable;
        private global::AggieEnterpriseApi.BooleanFilterInput? _value_billable;
        private global::System.Boolean _set_billable;
        private global::AggieEnterpriseApi.DateFilterInput? _value_lastUpdateDateTime;
        private global::System.Boolean _set_lastUpdateDateTime;
        public global::AggieEnterpriseApi.SearchCommonInputs? SearchCommon
        {
            get => _value_searchCommon;
            set
            {
                _set_searchCommon = true;
                _value_searchCommon = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmTaskFilterInputInfo.IsSearchCommonSet => _set_searchCommon;
        public global::AggieEnterpriseApi.StringFilterInput? Id
        {
            get => _value_id;
            set
            {
                _set_id = true;
                _value_id = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmTaskFilterInputInfo.IsIdSet => _set_id;
        public global::AggieEnterpriseApi.StringFilterInput? ProjectId
        {
            get => _value_projectId;
            set
            {
                _set_projectId = true;
                _value_projectId = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmTaskFilterInputInfo.IsProjectIdSet => _set_projectId;
        public global::AggieEnterpriseApi.StringFilterInput? Name
        {
            get => _value_name;
            set
            {
                _set_name = true;
                _value_name = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmTaskFilterInputInfo.IsNameSet => _set_name;
        public global::AggieEnterpriseApi.StringFilterInput? TaskNumber
        {
            get => _value_taskNumber;
            set
            {
                _set_taskNumber = true;
                _value_taskNumber = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmTaskFilterInputInfo.IsTaskNumberSet => _set_taskNumber;
        public global::AggieEnterpriseApi.BooleanFilterInput? Chargeable
        {
            get => _value_chargeable;
            set
            {
                _set_chargeable = true;
                _value_chargeable = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmTaskFilterInputInfo.IsChargeableSet => _set_chargeable;
        public global::AggieEnterpriseApi.BooleanFilterInput? Billable
        {
            get => _value_billable;
            set
            {
                _set_billable = true;
                _value_billable = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmTaskFilterInputInfo.IsBillableSet => _set_billable;
        public global::AggieEnterpriseApi.DateFilterInput? LastUpdateDateTime
        {
            get => _value_lastUpdateDateTime;
            set
            {
                _set_lastUpdateDateTime = true;
                _value_lastUpdateDateTime = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmTaskFilterInputInfo.IsLastUpdateDateTimeSet => _set_lastUpdateDateTime;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public enum RequestStatus
    {
        /// <summary>
        /// Request has been submitted to the server, but not validated or processed.
        /// </summary>
        Pending,
        /// <summary>
        /// Request has been picked up for processing.
        /// </summary>
        Inprocess,
        /// <summary>
        /// There was an error processing the request after it was picked up.
        /// </summary>
        Error,
        /// <summary>
        /// Request has been processed, but the callback has not been completed.
        /// </summary>
        Processed,
        /// <summary>
        /// If Callback URL Provided: Request has been processed, and the callback was successfully contacted.  Or, request has been processed, and no callback URL was provided.
        /// </summary>
        Complete,
        /// <summary>
        /// If Callback URL Provided: Request has been processed, but repeated attempts to contact the callback have failed and no more will be tried.
        /// </summary>
        Stale,
        /// <summary>
        /// There was a validation error in the request payload data.
        /// </summary>
        Rejected
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class RequestStatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, RequestStatus>
    {
        public global::System.String TypeName => "RequestStatus";
        public RequestStatus Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "PENDING" => RequestStatus.Pending,
                "INPROCESS" => RequestStatus.Inprocess,
                "ERROR" => RequestStatus.Error,
                "PROCESSED" => RequestStatus.Processed,
                "COMPLETE" => RequestStatus.Complete,
                "STALE" => RequestStatus.Stale,
                "REJECTED" => RequestStatus.Rejected,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                RequestStatus.Pending => "PENDING",
                RequestStatus.Inprocess => "INPROCESS",
                RequestStatus.Error => "ERROR",
                RequestStatus.Processed => "PROCESSED",
                RequestStatus.Complete => "COMPLETE",
                RequestStatus.Stale => "STALE",
                RequestStatus.Rejected => "REJECTED",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the DeptParents GraphQL operation
    /// <code>
    /// query DeptParents($code: String!) {
    ///   erpFinancialDepartment(code: $code) {
    ///     __typename
    ///     code
    ///     name
    ///     enabled
    ///     parent {
    ///       __typename
    ///       code
    ///       name
    ///       parent {
    ///         __typename
    ///         code
    ///         name
    ///         parent {
    ///           __typename
    ///           code
    ///           name
    ///           parent {
    ///             __typename
    ///             code
    ///             name
    ///             parent {
    ///               __typename
    ///               code
    ///               name
    ///               parent {
    ///                 __typename
    ///                 code
    ///                 name
    ///                 parent {
    ///                   __typename
    ///                   code
    ///                   name
    ///                   ... on ErpFinancialDepartment {
    ///                     id
    ///                   }
    ///                 }
    ///                 ... on ErpFinancialDepartment {
    ///                   id
    ///                 }
    ///               }
    ///               ... on ErpFinancialDepartment {
    ///                 id
    ///               }
    ///             }
    ///             ... on ErpFinancialDepartment {
    ///               id
    ///             }
    ///           }
    ///           ... on ErpFinancialDepartment {
    ///             id
    ///           }
    ///         }
    ///         ... on ErpFinancialDepartment {
    ///           id
    ///         }
    ///       }
    ///       ... on ErpFinancialDepartment {
    ///         id
    ///       }
    ///     }
    ///     ... on ErpFinancialDepartment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParentsQueryDocument : global::StrawberryShake.IDocument
    {
        private DeptParentsQueryDocument()
        {
        }

        public static DeptParentsQueryDocument Instance { get; } = new DeptParentsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x44, 0x65, 0x70, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4229b7d040fbb92b69f4f29e451bca68");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeptParents GraphQL operation
    /// <code>
    /// query DeptParents($code: String!) {
    ///   erpFinancialDepartment(code: $code) {
    ///     __typename
    ///     code
    ///     name
    ///     enabled
    ///     parent {
    ///       __typename
    ///       code
    ///       name
    ///       parent {
    ///         __typename
    ///         code
    ///         name
    ///         parent {
    ///           __typename
    ///           code
    ///           name
    ///           parent {
    ///             __typename
    ///             code
    ///             name
    ///             parent {
    ///               __typename
    ///               code
    ///               name
    ///               parent {
    ///                 __typename
    ///                 code
    ///                 name
    ///                 parent {
    ///                   __typename
    ///                   code
    ///                   name
    ///                   ... on ErpFinancialDepartment {
    ///                     id
    ///                   }
    ///                 }
    ///                 ... on ErpFinancialDepartment {
    ///                   id
    ///                 }
    ///               }
    ///               ... on ErpFinancialDepartment {
    ///                 id
    ///               }
    ///             }
    ///             ... on ErpFinancialDepartment {
    ///               id
    ///             }
    ///           }
    ///           ... on ErpFinancialDepartment {
    ///             id
    ///           }
    ///         }
    ///         ... on ErpFinancialDepartment {
    ///           id
    ///         }
    ///       }
    ///       ... on ErpFinancialDepartment {
    ///         id
    ///       }
    ///     }
    ///     ... on ErpFinancialDepartment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParentsQuery : global::AggieEnterpriseApi.IDeptParentsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeptParentsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public DeptParentsQuery(global::StrawberryShake.IOperationExecutor<IDeptParentsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeptParentsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeptParentsResult>> ExecuteAsync(global::System.String code, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(code);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeptParentsResult>> Watch(global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(code);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String code)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("code", FormatCode(code));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeptParentsQueryDocument.Instance.Hash.Value, name: "DeptParents", document: DeptParentsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCode(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeptParents GraphQL operation
    /// <code>
    /// query DeptParents($code: String!) {
    ///   erpFinancialDepartment(code: $code) {
    ///     __typename
    ///     code
    ///     name
    ///     enabled
    ///     parent {
    ///       __typename
    ///       code
    ///       name
    ///       parent {
    ///         __typename
    ///         code
    ///         name
    ///         parent {
    ///           __typename
    ///           code
    ///           name
    ///           parent {
    ///             __typename
    ///             code
    ///             name
    ///             parent {
    ///               __typename
    ///               code
    ///               name
    ///               parent {
    ///                 __typename
    ///                 code
    ///                 name
    ///                 parent {
    ///                   __typename
    ///                   code
    ///                   name
    ///                   ... on ErpFinancialDepartment {
    ///                     id
    ///                   }
    ///                 }
    ///                 ... on ErpFinancialDepartment {
    ///                   id
    ///                 }
    ///               }
    ///               ... on ErpFinancialDepartment {
    ///                 id
    ///               }
    ///             }
    ///             ... on ErpFinancialDepartment {
    ///               id
    ///             }
    ///           }
    ///           ... on ErpFinancialDepartment {
    ///             id
    ///           }
    ///         }
    ///         ... on ErpFinancialDepartment {
    ///           id
    ///         }
    ///       }
    ///       ... on ErpFinancialDepartment {
    ///         id
    ///       }
    ///     }
    ///     ... on ErpFinancialDepartment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParentsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeptParentsResult>> ExecuteAsync(global::System.String code, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeptParentsResult>> Watch(global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ErpInstitutionLocationSearch GraphQL operation
    /// <code>
    /// query ErpInstitutionLocationSearch($filter: ErpInstitutionLocationFilterInput!) {
    ///   erpInstitutionLocationSearch(filter: $filter) {
    ///     __typename
    ///     metadata {
    ///       __typename
    ///       sort
    ///       limit
    ///       returnedResultCount
    ///       startIndex
    ///       nextStartIndex
    ///       totalResultCount
    ///     }
    ///     data {
    ///       __typename
    ///       locationId
    ///       locationCode
    ///       addressLine1
    ///       addressLine2
    ///       addressLine3
    ///       addressLine4
    ///       city
    ///       state
    ///       postalCode
    ///       receivingSite
    ///       deliverySite
    ///       enabled
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpInstitutionLocationSearchQueryDocument : global::StrawberryShake.IDocument
    {
        private ErpInstitutionLocationSearchQueryDocument()
        {
        }

        public static ErpInstitutionLocationSearchQueryDocument Instance { get; } = new ErpInstitutionLocationSearchQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x45, 0x72, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x45, 0x72, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x72, 0x70, 0x49, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x6f, 0x72, 0x74, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x33, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x34, 0x20, 0x63, 0x69, 0x74, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x74, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x69, 0x74, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "755557f91a4a6ac04ca3c974f36b3d2b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ErpInstitutionLocationSearch GraphQL operation
    /// <code>
    /// query ErpInstitutionLocationSearch($filter: ErpInstitutionLocationFilterInput!) {
    ///   erpInstitutionLocationSearch(filter: $filter) {
    ///     __typename
    ///     metadata {
    ///       __typename
    ///       sort
    ///       limit
    ///       returnedResultCount
    ///       startIndex
    ///       nextStartIndex
    ///       totalResultCount
    ///     }
    ///     data {
    ///       __typename
    ///       locationId
    ///       locationCode
    ///       addressLine1
    ///       addressLine2
    ///       addressLine3
    ///       addressLine4
    ///       city
    ///       state
    ///       postalCode
    ///       receivingSite
    ///       deliverySite
    ///       enabled
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpInstitutionLocationSearchQuery : global::AggieEnterpriseApi.IErpInstitutionLocationSearchQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IErpInstitutionLocationSearchResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _erpInstitutionLocationFilterInputFormatter;
        public ErpInstitutionLocationSearchQuery(global::StrawberryShake.IOperationExecutor<IErpInstitutionLocationSearchResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _erpInstitutionLocationFilterInputFormatter = serializerResolver.GetInputValueFormatter("ErpInstitutionLocationFilterInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IErpInstitutionLocationSearchResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IErpInstitutionLocationSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.ErpInstitutionLocationFilterInput filter, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filter);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IErpInstitutionLocationSearchResult>> Watch(global::AggieEnterpriseApi.ErpInstitutionLocationFilterInput filter, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filter);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.ErpInstitutionLocationFilterInput filter)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filter", FormatFilter(filter));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ErpInstitutionLocationSearchQueryDocument.Instance.Hash.Value, name: "ErpInstitutionLocationSearch", document: ErpInstitutionLocationSearchQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFilter(global::AggieEnterpriseApi.ErpInstitutionLocationFilterInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _erpInstitutionLocationFilterInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ErpInstitutionLocationSearch GraphQL operation
    /// <code>
    /// query ErpInstitutionLocationSearch($filter: ErpInstitutionLocationFilterInput!) {
    ///   erpInstitutionLocationSearch(filter: $filter) {
    ///     __typename
    ///     metadata {
    ///       __typename
    ///       sort
    ///       limit
    ///       returnedResultCount
    ///       startIndex
    ///       nextStartIndex
    ///       totalResultCount
    ///     }
    ///     data {
    ///       __typename
    ///       locationId
    ///       locationCode
    ///       addressLine1
    ///       addressLine2
    ///       addressLine3
    ///       addressLine4
    ///       city
    ///       state
    ///       postalCode
    ///       receivingSite
    ///       deliverySite
    ///       enabled
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpInstitutionLocationSearchQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IErpInstitutionLocationSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.ErpInstitutionLocationFilterInput filter, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IErpInstitutionLocationSearchResult>> Watch(global::AggieEnterpriseApi.ErpInstitutionLocationFilterInput filter, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ErpUnitOfMeasureSearch GraphQL operation
    /// <code>
    /// query ErpUnitOfMeasureSearch($filter: ErpUnitOfMeasureFilterInput!) {
    ///   erpUnitOfMeasureSearch(filter: $filter) {
    ///     __typename
    ///     metadata {
    ///       __typename
    ///       sort
    ///       limit
    ///       returnedResultCount
    ///       startIndex
    ///       nextStartIndex
    ///       totalResultCount
    ///     }
    ///     data {
    ///       __typename
    ///       uomCode
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpUnitOfMeasureSearchQueryDocument : global::StrawberryShake.IDocument
    {
        private ErpUnitOfMeasureSearchQueryDocument()
        {
        }

        public static ErpUnitOfMeasureSearchQueryDocument Instance { get; } = new ErpUnitOfMeasureSearchQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x45, 0x72, 0x70, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x45, 0x72, 0x70, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x72, 0x70, 0x55, 0x6e, 0x69, 0x74, 0x4f, 0x66, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x6f, 0x72, 0x74, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "23d71447cf1e24b9a0bc5b4fd5dfe43b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ErpUnitOfMeasureSearch GraphQL operation
    /// <code>
    /// query ErpUnitOfMeasureSearch($filter: ErpUnitOfMeasureFilterInput!) {
    ///   erpUnitOfMeasureSearch(filter: $filter) {
    ///     __typename
    ///     metadata {
    ///       __typename
    ///       sort
    ///       limit
    ///       returnedResultCount
    ///       startIndex
    ///       nextStartIndex
    ///       totalResultCount
    ///     }
    ///     data {
    ///       __typename
    ///       uomCode
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpUnitOfMeasureSearchQuery : global::AggieEnterpriseApi.IErpUnitOfMeasureSearchQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IErpUnitOfMeasureSearchResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _erpUnitOfMeasureFilterInputFormatter;
        public ErpUnitOfMeasureSearchQuery(global::StrawberryShake.IOperationExecutor<IErpUnitOfMeasureSearchResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _erpUnitOfMeasureFilterInputFormatter = serializerResolver.GetInputValueFormatter("ErpUnitOfMeasureFilterInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IErpUnitOfMeasureSearchResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IErpUnitOfMeasureSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.ErpUnitOfMeasureFilterInput filter, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filter);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IErpUnitOfMeasureSearchResult>> Watch(global::AggieEnterpriseApi.ErpUnitOfMeasureFilterInput filter, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filter);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.ErpUnitOfMeasureFilterInput filter)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filter", FormatFilter(filter));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ErpUnitOfMeasureSearchQueryDocument.Instance.Hash.Value, name: "ErpUnitOfMeasureSearch", document: ErpUnitOfMeasureSearchQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFilter(global::AggieEnterpriseApi.ErpUnitOfMeasureFilterInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _erpUnitOfMeasureFilterInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ErpUnitOfMeasureSearch GraphQL operation
    /// <code>
    /// query ErpUnitOfMeasureSearch($filter: ErpUnitOfMeasureFilterInput!) {
    ///   erpUnitOfMeasureSearch(filter: $filter) {
    ///     __typename
    ///     metadata {
    ///       __typename
    ///       sort
    ///       limit
    ///       returnedResultCount
    ///       startIndex
    ///       nextStartIndex
    ///       totalResultCount
    ///     }
    ///     data {
    ///       __typename
    ///       uomCode
    ///       name
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IErpUnitOfMeasureSearchQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IErpUnitOfMeasureSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.ErpUnitOfMeasureFilterInput filter, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IErpUnitOfMeasureSearchResult>> Watch(global::AggieEnterpriseApi.ErpUnitOfMeasureFilterInput filter, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FundParents GraphQL operation
    /// <code>
    /// query FundParents($code: String!) {
    ///   erpFund(code: $code) {
    ///     __typename
    ///     code
    ///     name
    ///     budgeted
    ///     eligibleForUse
    ///     enabled
    ///     endDate
    ///     id
    ///     startDate
    ///     hierarchyDepth
    ///     parent {
    ///       __typename
    ///       code
    ///       name
    ///       hierarchyDepth
    ///       parent {
    ///         __typename
    ///         code
    ///         name
    ///         hierarchyDepth
    ///         parent {
    ///           __typename
    ///           code
    ///           name
    ///           hierarchyDepth
    ///           parent {
    ///             __typename
    ///             code
    ///             name
    ///             hierarchyDepth
    ///             parent {
    ///               __typename
    ///               code
    ///               name
    ///               hierarchyDepth
    ///               parent {
    ///                 __typename
    ///                 code
    ///                 name
    ///                 hierarchyDepth
    ///                 parent {
    ///                   __typename
    ///                   code
    ///                   name
    ///                   hierarchyDepth
    ///                   ... on ErpFund {
    ///                     id
    ///                   }
    ///                 }
    ///                 ... on ErpFund {
    ///                   id
    ///                 }
    ///               }
    ///               ... on ErpFund {
    ///                 id
    ///               }
    ///             }
    ///             ... on ErpFund {
    ///               id
    ///             }
    ///           }
    ///           ... on ErpFund {
    ///             id
    ///           }
    ///         }
    ///         ... on ErpFund {
    ///           id
    ///         }
    ///       }
    ///       ... on ErpFund {
    ///         id
    ///       }
    ///     }
    ///     ... on ErpFund {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParentsQueryDocument : global::StrawberryShake.IDocument
    {
        private FundParentsQueryDocument()
        {
        }

        public static FundParentsQueryDocument Instance { get; } = new FundParentsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x46, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x65, 0x64, 0x20, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "31dec67c3b41b2d5e93f100ea6984e2d");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FundParents GraphQL operation
    /// <code>
    /// query FundParents($code: String!) {
    ///   erpFund(code: $code) {
    ///     __typename
    ///     code
    ///     name
    ///     budgeted
    ///     eligibleForUse
    ///     enabled
    ///     endDate
    ///     id
    ///     startDate
    ///     hierarchyDepth
    ///     parent {
    ///       __typename
    ///       code
    ///       name
    ///       hierarchyDepth
    ///       parent {
    ///         __typename
    ///         code
    ///         name
    ///         hierarchyDepth
    ///         parent {
    ///           __typename
    ///           code
    ///           name
    ///           hierarchyDepth
    ///           parent {
    ///             __typename
    ///             code
    ///             name
    ///             hierarchyDepth
    ///             parent {
    ///               __typename
    ///               code
    ///               name
    ///               hierarchyDepth
    ///               parent {
    ///                 __typename
    ///                 code
    ///                 name
    ///                 hierarchyDepth
    ///                 parent {
    ///                   __typename
    ///                   code
    ///                   name
    ///                   hierarchyDepth
    ///                   ... on ErpFund {
    ///                     id
    ///                   }
    ///                 }
    ///                 ... on ErpFund {
    ///                   id
    ///                 }
    ///               }
    ///               ... on ErpFund {
    ///                 id
    ///               }
    ///             }
    ///             ... on ErpFund {
    ///               id
    ///             }
    ///           }
    ///           ... on ErpFund {
    ///             id
    ///           }
    ///         }
    ///         ... on ErpFund {
    ///           id
    ///         }
    ///       }
    ///       ... on ErpFund {
    ///         id
    ///       }
    ///     }
    ///     ... on ErpFund {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParentsQuery : global::AggieEnterpriseApi.IFundParentsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFundParentsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public FundParentsQuery(global::StrawberryShake.IOperationExecutor<IFundParentsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFundParentsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFundParentsResult>> ExecuteAsync(global::System.String code, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(code);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFundParentsResult>> Watch(global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(code);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String code)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("code", FormatCode(code));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FundParentsQueryDocument.Instance.Hash.Value, name: "FundParents", document: FundParentsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCode(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the FundParents GraphQL operation
    /// <code>
    /// query FundParents($code: String!) {
    ///   erpFund(code: $code) {
    ///     __typename
    ///     code
    ///     name
    ///     budgeted
    ///     eligibleForUse
    ///     enabled
    ///     endDate
    ///     id
    ///     startDate
    ///     hierarchyDepth
    ///     parent {
    ///       __typename
    ///       code
    ///       name
    ///       hierarchyDepth
    ///       parent {
    ///         __typename
    ///         code
    ///         name
    ///         hierarchyDepth
    ///         parent {
    ///           __typename
    ///           code
    ///           name
    ///           hierarchyDepth
    ///           parent {
    ///             __typename
    ///             code
    ///             name
    ///             hierarchyDepth
    ///             parent {
    ///               __typename
    ///               code
    ///               name
    ///               hierarchyDepth
    ///               parent {
    ///                 __typename
    ///                 code
    ///                 name
    ///                 hierarchyDepth
    ///                 parent {
    ///                   __typename
    ///                   code
    ///                   name
    ///                   hierarchyDepth
    ///                   ... on ErpFund {
    ///                     id
    ///                   }
    ///                 }
    ///                 ... on ErpFund {
    ///                   id
    ///                 }
    ///               }
    ///               ... on ErpFund {
    ///                 id
    ///               }
    ///             }
    ///             ... on ErpFund {
    ///               id
    ///             }
    ///           }
    ///           ... on ErpFund {
    ///             id
    ///           }
    ///         }
    ///         ... on ErpFund {
    ///           id
    ///         }
    ///       }
    ///       ... on ErpFund {
    ///         id
    ///       }
    ///     }
    ///     ... on ErpFund {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParentsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFundParentsResult>> ExecuteAsync(global::System.String code, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFundParentsResult>> Watch(global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GlJournalRequest GraphQL operation
    /// <code>
    /// mutation GlJournalRequest($data: GlJournalRequestInput!) {
    ///   glJournalRequest(data: $data) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       requestId
    ///       consumerId
    ///       requestDateTime
    ///       requestStatus
    ///       operationName
    ///     }
    ///     validationResults {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestMutationDocument : global::StrawberryShake.IDocument
    {
        private GlJournalRequestMutationDocument()
        {
        }

        public static GlJournalRequestMutationDocument Instance { get; } = new GlJournalRequestMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x6c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x47, 0x6c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x6c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x28, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "da96ac9c70d3e53b31bae883ff24eafb");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GlJournalRequest GraphQL operation
    /// <code>
    /// mutation GlJournalRequest($data: GlJournalRequestInput!) {
    ///   glJournalRequest(data: $data) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       requestId
    ///       consumerId
    ///       requestDateTime
    ///       requestStatus
    ///       operationName
    ///     }
    ///     validationResults {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestMutation : global::AggieEnterpriseApi.IGlJournalRequestMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGlJournalRequestResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _glJournalRequestInputFormatter;
        public GlJournalRequestMutation(global::StrawberryShake.IOperationExecutor<IGlJournalRequestResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _glJournalRequestInputFormatter = serializerResolver.GetInputValueFormatter("GlJournalRequestInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGlJournalRequestResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlJournalRequestResult>> ExecuteAsync(global::AggieEnterpriseApi.GlJournalRequestInput data, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(data);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGlJournalRequestResult>> Watch(global::AggieEnterpriseApi.GlJournalRequestInput data, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(data);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.GlJournalRequestInput data)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("data", FormatData(data));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GlJournalRequestMutationDocument.Instance.Hash.Value, name: "GlJournalRequest", document: GlJournalRequestMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatData(global::AggieEnterpriseApi.GlJournalRequestInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _glJournalRequestInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GlJournalRequest GraphQL operation
    /// <code>
    /// mutation GlJournalRequest($data: GlJournalRequestInput!) {
    ///   glJournalRequest(data: $data) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       requestId
    ///       consumerId
    ///       requestDateTime
    ///       requestStatus
    ///       operationName
    ///     }
    ///     validationResults {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlJournalRequestResult>> ExecuteAsync(global::AggieEnterpriseApi.GlJournalRequestInput data, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGlJournalRequestResult>> Watch(global::AggieEnterpriseApi.GlJournalRequestInput data, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GlJournalRequestStatus GraphQL operation
    /// <code>
    /// query GlJournalRequestStatus($requestId: String!) {
    ///   glJournalRequestStatus(requestId: $requestId) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       statusRequestPayload
    ///       operationName
    ///       requestStatus
    ///       requestDateTime
    ///       lastStatusDateTime
    ///       errorMessages
    ///       processedDateTime
    ///       boundaryApplicationName
    ///       consumerId
    ///       consumerNotes
    ///       consumerReferenceId
    ///     }
    ///     processingResult {
    ///       __typename
    ///       status
    ///       processedDateTime
    ///     }
    ///     validationResults {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusQueryDocument : global::StrawberryShake.IDocument
    {
        private GlJournalRequestStatusQueryDocument()
        {
        }

        public static GlJournalRequestStatusQueryDocument Instance { get; } = new GlJournalRequestStatusQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x6c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x24, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x6c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "73bdb48f69fb0e8238bcb26a5d7a47ac");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GlJournalRequestStatus GraphQL operation
    /// <code>
    /// query GlJournalRequestStatus($requestId: String!) {
    ///   glJournalRequestStatus(requestId: $requestId) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       statusRequestPayload
    ///       operationName
    ///       requestStatus
    ///       requestDateTime
    ///       lastStatusDateTime
    ///       errorMessages
    ///       processedDateTime
    ///       boundaryApplicationName
    ///       consumerId
    ///       consumerNotes
    ///       consumerReferenceId
    ///     }
    ///     processingResult {
    ///       __typename
    ///       status
    ///       processedDateTime
    ///     }
    ///     validationResults {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusQuery : global::AggieEnterpriseApi.IGlJournalRequestStatusQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGlJournalRequestStatusResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GlJournalRequestStatusQuery(global::StrawberryShake.IOperationExecutor<IGlJournalRequestStatusResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGlJournalRequestStatusResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlJournalRequestStatusResult>> ExecuteAsync(global::System.String requestId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(requestId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGlJournalRequestStatusResult>> Watch(global::System.String requestId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(requestId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String requestId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("requestId", FormatRequestId(requestId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GlJournalRequestStatusQueryDocument.Instance.Hash.Value, name: "GlJournalRequestStatus", document: GlJournalRequestStatusQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatRequestId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GlJournalRequestStatus GraphQL operation
    /// <code>
    /// query GlJournalRequestStatus($requestId: String!) {
    ///   glJournalRequestStatus(requestId: $requestId) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       statusRequestPayload
    ///       operationName
    ///       requestStatus
    ///       requestDateTime
    ///       lastStatusDateTime
    ///       errorMessages
    ///       processedDateTime
    ///       boundaryApplicationName
    ///       consumerId
    ///       consumerNotes
    ///       consumerReferenceId
    ///     }
    ///     processingResult {
    ///       __typename
    ///       status
    ///       processedDateTime
    ///     }
    ///     validationResults {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatusQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlJournalRequestStatusResult>> ExecuteAsync(global::System.String requestId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGlJournalRequestStatusResult>> Watch(global::System.String requestId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CoaDetails GraphQL operation
    /// <code>
    /// query CoaDetails($entity: String!, $fund: String!, $dept: String!, $account: String!, $purpose: String!) {
    ///   erpEntity(code: $entity) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpEntity {
    ///       id
    ///     }
    ///   }
    ///   erpFund(code: $fund) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpFund {
    ///       id
    ///     }
    ///   }
    ///   erpFinancialDepartment(code: $dept) {
    ///     __typename
    ///     code
    ///     name
    ///     eligibleForUse
    ///     ... on ErpFinancialDepartment {
    ///       id
    ///     }
    ///   }
    ///   erpAccount(code: $account) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpAccount {
    ///       id
    ///     }
    ///   }
    ///   erpPurpose(code: $purpose) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpPurpose {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetailsQueryDocument : global::StrawberryShake.IDocument
    {
        private CoaDetailsQueryDocument()
        {
        }

        public static CoaDetailsQueryDocument Instance { get; } = new CoaDetailsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x43, 0x6f, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x28, 0x24, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x66, 0x75, 0x6e, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x64, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x72, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x65, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x75, 0x6e, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x65, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x70, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x65, 0x72, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x65, 0x72, 0x70, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "165d58f4436bea811ce2209fa9b64dc6");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CoaDetails GraphQL operation
    /// <code>
    /// query CoaDetails($entity: String!, $fund: String!, $dept: String!, $account: String!, $purpose: String!) {
    ///   erpEntity(code: $entity) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpEntity {
    ///       id
    ///     }
    ///   }
    ///   erpFund(code: $fund) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpFund {
    ///       id
    ///     }
    ///   }
    ///   erpFinancialDepartment(code: $dept) {
    ///     __typename
    ///     code
    ///     name
    ///     eligibleForUse
    ///     ... on ErpFinancialDepartment {
    ///       id
    ///     }
    ///   }
    ///   erpAccount(code: $account) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpAccount {
    ///       id
    ///     }
    ///   }
    ///   erpPurpose(code: $purpose) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpPurpose {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetailsQuery : global::AggieEnterpriseApi.ICoaDetailsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICoaDetailsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public CoaDetailsQuery(global::StrawberryShake.IOperationExecutor<ICoaDetailsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICoaDetailsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICoaDetailsResult>> ExecuteAsync(global::System.String entity, global::System.String fund, global::System.String dept, global::System.String account, global::System.String purpose, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(entity, fund, dept, account, purpose);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICoaDetailsResult>> Watch(global::System.String entity, global::System.String fund, global::System.String dept, global::System.String account, global::System.String purpose, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(entity, fund, dept, account, purpose);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String entity, global::System.String fund, global::System.String dept, global::System.String account, global::System.String purpose)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("entity", FormatEntity(entity));
            variables.Add("fund", FormatFund(fund));
            variables.Add("dept", FormatDept(dept));
            variables.Add("account", FormatAccount(account));
            variables.Add("purpose", FormatPurpose(purpose));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CoaDetailsQueryDocument.Instance.Hash.Value, name: "CoaDetails", document: CoaDetailsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatEntity(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatFund(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatDept(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatAccount(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatPurpose(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CoaDetails GraphQL operation
    /// <code>
    /// query CoaDetails($entity: String!, $fund: String!, $dept: String!, $account: String!, $purpose: String!) {
    ///   erpEntity(code: $entity) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpEntity {
    ///       id
    ///     }
    ///   }
    ///   erpFund(code: $fund) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpFund {
    ///       id
    ///     }
    ///   }
    ///   erpFinancialDepartment(code: $dept) {
    ///     __typename
    ///     code
    ///     name
    ///     eligibleForUse
    ///     ... on ErpFinancialDepartment {
    ///       id
    ///     }
    ///   }
    ///   erpAccount(code: $account) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpAccount {
    ///       id
    ///     }
    ///   }
    ///   erpPurpose(code: $purpose) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpPurpose {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetailsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICoaDetailsResult>> ExecuteAsync(global::System.String entity, global::System.String fund, global::System.String dept, global::System.String account, global::System.String purpose, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICoaDetailsResult>> Watch(global::System.String entity, global::System.String fund, global::System.String dept, global::System.String account, global::System.String purpose, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the KfsConvertAccount GraphQL operation
    /// <code>
    /// query KfsConvertAccount($chart: KfsChartCode!, $account: KfsAccountNumber!, $subAccount: KfsSubAccountNumber) {
    ///   kfsConvertAccount(chart: $chart, account: $account, subAccount: $subAccount) {
    ///     __typename
    ///     mappingFound
    ///     glSegments {
    ///       __typename
    ///       entity
    ///       fund
    ///       department
    ///       purpose
    ///       project
    ///       program
    ///       activity
    ///     }
    ///     ppmSegments {
    ///       __typename
    ///       project
    ///       organization
    ///       task
    ///       award
    ///       fundingSource
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class KfsConvertAccountQueryDocument : global::StrawberryShake.IDocument
    {
        private KfsConvertAccountQueryDocument()
        {
        }

        public static KfsConvertAccountQueryDocument Instance { get; } = new KfsConvertAccountQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x4b, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x24, 0x63, 0x68, 0x61, 0x72, 0x74, 0x3a, 0x20, 0x4b, 0x66, 0x73, 0x43, 0x68, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x20, 0x4b, 0x66, 0x73, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x21, 0x2c, 0x20, 0x24, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x20, 0x4b, 0x66, 0x73, 0x53, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x6b, 0x66, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x63, 0x68, 0x61, 0x72, 0x74, 0x3a, 0x20, 0x24, 0x63, 0x68, 0x61, 0x72, 0x74, 0x2c, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x20, 0x24, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x20, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x20, 0x24, 0x73, 0x75, 0x62, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x20, 0x67, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x7d, 0x20, 0x70, 0x70, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x20, 0x61, 0x77, 0x61, 0x72, 0x64, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "9d3668c9b48b934d72c301e5c176ecec");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the KfsConvertAccount GraphQL operation
    /// <code>
    /// query KfsConvertAccount($chart: KfsChartCode!, $account: KfsAccountNumber!, $subAccount: KfsSubAccountNumber) {
    ///   kfsConvertAccount(chart: $chart, account: $account, subAccount: $subAccount) {
    ///     __typename
    ///     mappingFound
    ///     glSegments {
    ///       __typename
    ///       entity
    ///       fund
    ///       department
    ///       purpose
    ///       project
    ///       program
    ///       activity
    ///     }
    ///     ppmSegments {
    ///       __typename
    ///       project
    ///       organization
    ///       task
    ///       award
    ///       fundingSource
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class KfsConvertAccountQuery : global::AggieEnterpriseApi.IKfsConvertAccountQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IKfsConvertAccountResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _kfsChartCodeFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _kfsAccountNumberFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _kfsSubAccountNumberFormatter;
        public KfsConvertAccountQuery(global::StrawberryShake.IOperationExecutor<IKfsConvertAccountResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _kfsChartCodeFormatter = serializerResolver.GetInputValueFormatter("KfsChartCode");
            _kfsAccountNumberFormatter = serializerResolver.GetInputValueFormatter("KfsAccountNumber");
            _kfsSubAccountNumberFormatter = serializerResolver.GetInputValueFormatter("KfsSubAccountNumber");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IKfsConvertAccountResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IKfsConvertAccountResult>> ExecuteAsync(global::System.String chart, global::System.String account, global::System.String? subAccount, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(chart, account, subAccount);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IKfsConvertAccountResult>> Watch(global::System.String chart, global::System.String account, global::System.String? subAccount, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(chart, account, subAccount);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String chart, global::System.String account, global::System.String? subAccount)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("chart", FormatChart(chart));
            variables.Add("account", FormatAccount(account));
            variables.Add("subAccount", FormatSubAccount(subAccount));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: KfsConvertAccountQueryDocument.Instance.Hash.Value, name: "KfsConvertAccount", document: KfsConvertAccountQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatChart(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _kfsChartCodeFormatter.Format(value);
        }

        private global::System.Object? FormatAccount(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _kfsAccountNumberFormatter.Format(value);
        }

        private global::System.Object? FormatSubAccount(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _kfsSubAccountNumberFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the KfsConvertAccount GraphQL operation
    /// <code>
    /// query KfsConvertAccount($chart: KfsChartCode!, $account: KfsAccountNumber!, $subAccount: KfsSubAccountNumber) {
    ///   kfsConvertAccount(chart: $chart, account: $account, subAccount: $subAccount) {
    ///     __typename
    ///     mappingFound
    ///     glSegments {
    ///       __typename
    ///       entity
    ///       fund
    ///       department
    ///       purpose
    ///       project
    ///       program
    ///       activity
    ///     }
    ///     ppmSegments {
    ///       __typename
    ///       project
    ///       organization
    ///       task
    ///       award
    ///       fundingSource
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IKfsConvertAccountQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IKfsConvertAccountResult>> ExecuteAsync(global::System.String chart, global::System.String account, global::System.String? subAccount, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IKfsConvertAccountResult>> Watch(global::System.String chart, global::System.String account, global::System.String? subAccount, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PpmStringSegmentsValidate GraphQL operation
    /// <code>
    /// query PpmStringSegmentsValidate($segmentString: PpmSegmentString!) {
    ///   ppmStringSegmentsValidate(segmentString: $segmentString) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///     segmentString
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidateQueryDocument : global::StrawberryShake.IDocument
    {
        private PpmStringSegmentsValidateQueryDocument()
        {
        }

        public static PpmStringSegmentsValidateQueryDocument Instance { get; } = new PpmStringSegmentsValidateQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x70, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x28, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x50, 0x70, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x70, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x28, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x7d, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "3489db9235f7c8cb89eac3cac1eaf42f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmStringSegmentsValidate GraphQL operation
    /// <code>
    /// query PpmStringSegmentsValidate($segmentString: PpmSegmentString!) {
    ///   ppmStringSegmentsValidate(segmentString: $segmentString) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///     segmentString
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidateQuery : global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPpmStringSegmentsValidateResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _ppmSegmentStringFormatter;
        public PpmStringSegmentsValidateQuery(global::StrawberryShake.IOperationExecutor<IPpmStringSegmentsValidateResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _ppmSegmentStringFormatter = serializerResolver.GetInputValueFormatter("PpmSegmentString");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPpmStringSegmentsValidateResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmStringSegmentsValidateResult>> ExecuteAsync(global::System.String segmentString, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(segmentString);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmStringSegmentsValidateResult>> Watch(global::System.String segmentString, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(segmentString);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String segmentString)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("segmentString", FormatSegmentString(segmentString));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PpmStringSegmentsValidateQueryDocument.Instance.Hash.Value, name: "PpmStringSegmentsValidate", document: PpmStringSegmentsValidateQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSegmentString(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _ppmSegmentStringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmStringSegmentsValidate GraphQL operation
    /// <code>
    /// query PpmStringSegmentsValidate($segmentString: PpmSegmentString!) {
    ///   ppmStringSegmentsValidate(segmentString: $segmentString) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///     segmentString
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmStringSegmentsValidateQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmStringSegmentsValidateResult>> ExecuteAsync(global::System.String segmentString, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmStringSegmentsValidateResult>> Watch(global::System.String segmentString, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PpmSegmentsValidate GraphQL operation
    /// <code>
    /// query PpmSegmentsValidate($segments: PpmSegmentInput!) {
    ///   ppmSegmentsValidate(segments: $segments) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segmentString
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateQueryDocument : global::StrawberryShake.IDocument
    {
        private PpmSegmentsValidateQueryDocument()
        {
        }

        public static PpmSegmentsValidateQueryDocument Instance { get; } = new PpmSegmentsValidateQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x70, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x28, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x50, 0x70, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x70, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x28, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "fe9fe1ba86f6eaa1e5afdc79fb13ddd9");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmSegmentsValidate GraphQL operation
    /// <code>
    /// query PpmSegmentsValidate($segments: PpmSegmentInput!) {
    ///   ppmSegmentsValidate(segments: $segments) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segmentString
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateQuery : global::AggieEnterpriseApi.IPpmSegmentsValidateQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPpmSegmentsValidateResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _ppmSegmentInputFormatter;
        public PpmSegmentsValidateQuery(global::StrawberryShake.IOperationExecutor<IPpmSegmentsValidateResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _ppmSegmentInputFormatter = serializerResolver.GetInputValueFormatter("PpmSegmentInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPpmSegmentsValidateResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmSegmentsValidateResult>> ExecuteAsync(global::AggieEnterpriseApi.PpmSegmentInput segments, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(segments);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmSegmentsValidateResult>> Watch(global::AggieEnterpriseApi.PpmSegmentInput segments, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(segments);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.PpmSegmentInput segments)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("segments", FormatSegments(segments));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PpmSegmentsValidateQueryDocument.Instance.Hash.Value, name: "PpmSegmentsValidate", document: PpmSegmentsValidateQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSegments(global::AggieEnterpriseApi.PpmSegmentInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _ppmSegmentInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmSegmentsValidate GraphQL operation
    /// <code>
    /// query PpmSegmentsValidate($segments: PpmSegmentInput!) {
    ///   ppmSegmentsValidate(segments: $segments) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segmentString
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmSegmentsValidateQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmSegmentsValidateResult>> ExecuteAsync(global::AggieEnterpriseApi.PpmSegmentInput segments, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmSegmentsValidateResult>> Watch(global::AggieEnterpriseApi.PpmSegmentInput segments, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PpmTaskByProjectNumberAndTaskNumber GraphQL operation
    /// <code>
    /// query PpmTaskByProjectNumberAndTaskNumber($projectNumber: PpmProjectNumber!, $taskNumber: PpmTaskNumber!) {
    ///   ppmTaskByProjectNumberAndTaskNumber(projectNumber: $projectNumber, taskNumber: $taskNumber) {
    ///     __typename
    ///     taskNumber
    ///     name
    ///     billable
    ///     chargeable
    ///     eligibleForUse
    ///     glPostingProgramCode
    ///     glPostingPurposeCode
    ///     glPostingFundCode
    ///     glPostingActivityCode
    ///     ... on PpmTask {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskByProjectNumberAndTaskNumberQueryDocument : global::StrawberryShake.IDocument
    {
        private PpmTaskByProjectNumberAndTaskNumberQueryDocument()
        {
        }

        public static PpmTaskByProjectNumberAndTaskNumberQueryDocument Instance { get; } = new PpmTaskByProjectNumberAndTaskNumberQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x70, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x28, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x20, 0x50, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x21, 0x2c, 0x20, 0x24, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x20, 0x50, 0x70, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x70, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x28, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x2c, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x69, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x20, 0x67, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x67, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x70, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b0b8122421b71d7062c2928cd443b4eb");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmTaskByProjectNumberAndTaskNumber GraphQL operation
    /// <code>
    /// query PpmTaskByProjectNumberAndTaskNumber($projectNumber: PpmProjectNumber!, $taskNumber: PpmTaskNumber!) {
    ///   ppmTaskByProjectNumberAndTaskNumber(projectNumber: $projectNumber, taskNumber: $taskNumber) {
    ///     __typename
    ///     taskNumber
    ///     name
    ///     billable
    ///     chargeable
    ///     eligibleForUse
    ///     glPostingProgramCode
    ///     glPostingPurposeCode
    ///     glPostingFundCode
    ///     glPostingActivityCode
    ///     ... on PpmTask {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskByProjectNumberAndTaskNumberQuery : global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPpmTaskByProjectNumberAndTaskNumberResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _ppmProjectNumberFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _ppmTaskNumberFormatter;
        public PpmTaskByProjectNumberAndTaskNumberQuery(global::StrawberryShake.IOperationExecutor<IPpmTaskByProjectNumberAndTaskNumberResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _ppmProjectNumberFormatter = serializerResolver.GetInputValueFormatter("PpmProjectNumber");
            _ppmTaskNumberFormatter = serializerResolver.GetInputValueFormatter("PpmTaskNumber");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPpmTaskByProjectNumberAndTaskNumberResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmTaskByProjectNumberAndTaskNumberResult>> ExecuteAsync(global::System.String projectNumber, global::System.String taskNumber, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(projectNumber, taskNumber);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmTaskByProjectNumberAndTaskNumberResult>> Watch(global::System.String projectNumber, global::System.String taskNumber, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(projectNumber, taskNumber);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String projectNumber, global::System.String taskNumber)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("projectNumber", FormatProjectNumber(projectNumber));
            variables.Add("taskNumber", FormatTaskNumber(taskNumber));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PpmTaskByProjectNumberAndTaskNumberQueryDocument.Instance.Hash.Value, name: "PpmTaskByProjectNumberAndTaskNumber", document: PpmTaskByProjectNumberAndTaskNumberQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatProjectNumber(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _ppmProjectNumberFormatter.Format(value);
        }

        private global::System.Object? FormatTaskNumber(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _ppmTaskNumberFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmTaskByProjectNumberAndTaskNumber GraphQL operation
    /// <code>
    /// query PpmTaskByProjectNumberAndTaskNumber($projectNumber: PpmProjectNumber!, $taskNumber: PpmTaskNumber!) {
    ///   ppmTaskByProjectNumberAndTaskNumber(projectNumber: $projectNumber, taskNumber: $taskNumber) {
    ///     __typename
    ///     taskNumber
    ///     name
    ///     billable
    ///     chargeable
    ///     eligibleForUse
    ///     glPostingProgramCode
    ///     glPostingPurposeCode
    ///     glPostingFundCode
    ///     glPostingActivityCode
    ///     ... on PpmTask {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmTaskByProjectNumberAndTaskNumberQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmTaskByProjectNumberAndTaskNumberResult>> ExecuteAsync(global::System.String projectNumber, global::System.String taskNumber, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmTaskByProjectNumberAndTaskNumberResult>> Watch(global::System.String projectNumber, global::System.String taskNumber, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ScmPurchaseRequisitionCreate GraphQL operation
    /// <code>
    /// mutation ScmPurchaseRequisitionCreate($data: ScmPurchaseRequisitionRequestInput!) {
    ///   scmPurchaseRequisitionCreate(data: $data) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       requestId
    ///       requestStatus
    ///       processedDateTime
    ///       errorMessages
    ///     }
    ///     validationResults {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionCreateMutationDocument : global::StrawberryShake.IDocument
    {
        private ScmPurchaseRequisitionCreateMutationDocument()
        {
        }

        public static ScmPurchaseRequisitionCreateMutationDocument Instance { get; } = new ScmPurchaseRequisitionCreateMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x63, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x53, 0x63, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x63, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x28, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x7d, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "1d051002f2d08841a74789e46dd187e8");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ScmPurchaseRequisitionCreate GraphQL operation
    /// <code>
    /// mutation ScmPurchaseRequisitionCreate($data: ScmPurchaseRequisitionRequestInput!) {
    ///   scmPurchaseRequisitionCreate(data: $data) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       requestId
    ///       requestStatus
    ///       processedDateTime
    ///       errorMessages
    ///     }
    ///     validationResults {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionCreateMutation : global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IScmPurchaseRequisitionCreateResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _scmPurchaseRequisitionRequestInputFormatter;
        public ScmPurchaseRequisitionCreateMutation(global::StrawberryShake.IOperationExecutor<IScmPurchaseRequisitionCreateResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _scmPurchaseRequisitionRequestInputFormatter = serializerResolver.GetInputValueFormatter("ScmPurchaseRequisitionRequestInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IScmPurchaseRequisitionCreateResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IScmPurchaseRequisitionCreateResult>> ExecuteAsync(global::AggieEnterpriseApi.ScmPurchaseRequisitionRequestInput data, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(data);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IScmPurchaseRequisitionCreateResult>> Watch(global::AggieEnterpriseApi.ScmPurchaseRequisitionRequestInput data, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(data);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.ScmPurchaseRequisitionRequestInput data)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("data", FormatData(data));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ScmPurchaseRequisitionCreateMutationDocument.Instance.Hash.Value, name: "ScmPurchaseRequisitionCreate", document: ScmPurchaseRequisitionCreateMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatData(global::AggieEnterpriseApi.ScmPurchaseRequisitionRequestInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _scmPurchaseRequisitionRequestInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ScmPurchaseRequisitionCreate GraphQL operation
    /// <code>
    /// mutation ScmPurchaseRequisitionCreate($data: ScmPurchaseRequisitionRequestInput!) {
    ///   scmPurchaseRequisitionCreate(data: $data) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       requestId
    ///       requestStatus
    ///       processedDateTime
    ///       errorMessages
    ///     }
    ///     validationResults {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionCreateMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IScmPurchaseRequisitionCreateResult>> ExecuteAsync(global::AggieEnterpriseApi.ScmPurchaseRequisitionRequestInput data, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IScmPurchaseRequisitionCreateResult>> Watch(global::AggieEnterpriseApi.ScmPurchaseRequisitionRequestInput data, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ScmPurchaseRequisitionRequestStatus GraphQL operation
    /// <code>
    /// query ScmPurchaseRequisitionRequestStatus($requestId: String!) {
    ///   scmPurchaseRequisitionRequestStatus(requestId: $requestId) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       requestId
    ///       consumerTrackingId
    ///       consumerReferenceId
    ///       consumerNotes
    ///       requestDateTime
    ///       requestStatus
    ///       lastStatusDateTime
    ///       processedDateTime
    ///       errorMessages
    ///     }
    ///     validationResults {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionRequestStatusQueryDocument : global::StrawberryShake.IDocument
    {
        private ScmPurchaseRequisitionRequestStatusQueryDocument()
        {
        }

        public static ScmPurchaseRequisitionRequestStatusQueryDocument Instance { get; } = new ScmPurchaseRequisitionRequestStatusQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x53, 0x63, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x24, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x63, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x7d, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "665aed3e12f24acc73bc300ed37269a8");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ScmPurchaseRequisitionRequestStatus GraphQL operation
    /// <code>
    /// query ScmPurchaseRequisitionRequestStatus($requestId: String!) {
    ///   scmPurchaseRequisitionRequestStatus(requestId: $requestId) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       requestId
    ///       consumerTrackingId
    ///       consumerReferenceId
    ///       consumerNotes
    ///       requestDateTime
    ///       requestStatus
    ///       lastStatusDateTime
    ///       processedDateTime
    ///       errorMessages
    ///     }
    ///     validationResults {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionRequestStatusQuery : global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IScmPurchaseRequisitionRequestStatusResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public ScmPurchaseRequisitionRequestStatusQuery(global::StrawberryShake.IOperationExecutor<IScmPurchaseRequisitionRequestStatusResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IScmPurchaseRequisitionRequestStatusResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IScmPurchaseRequisitionRequestStatusResult>> ExecuteAsync(global::System.String requestId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(requestId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IScmPurchaseRequisitionRequestStatusResult>> Watch(global::System.String requestId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(requestId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String requestId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("requestId", FormatRequestId(requestId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ScmPurchaseRequisitionRequestStatusQueryDocument.Instance.Hash.Value, name: "ScmPurchaseRequisitionRequestStatus", document: ScmPurchaseRequisitionRequestStatusQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatRequestId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ScmPurchaseRequisitionRequestStatus GraphQL operation
    /// <code>
    /// query ScmPurchaseRequisitionRequestStatus($requestId: String!) {
    ///   scmPurchaseRequisitionRequestStatus(requestId: $requestId) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       requestId
    ///       consumerTrackingId
    ///       consumerReferenceId
    ///       consumerNotes
    ///       requestDateTime
    ///       requestStatus
    ///       lastStatusDateTime
    ///       processedDateTime
    ///       errorMessages
    ///     }
    ///     validationResults {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchaseRequisitionRequestStatusQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IScmPurchaseRequisitionRequestStatusResult>> ExecuteAsync(global::System.String requestId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IScmPurchaseRequisitionRequestStatusResult>> Watch(global::System.String requestId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ScmPurchasingCategoryByCode GraphQL operation
    /// <code>
    /// query ScmPurchasingCategoryByCode($code: String!) {
    ///   scmPurchasingCategoryByCode(code: $code) {
    ///     __typename
    ///     id
    ///     code
    ///     name
    ///     description
    ///     categoryContentCode
    ///     startDateActive
    ///     endDateActive
    ///     enabled
    ///     lastUpdateDateTime
    ///     lastUpdateUserId
    ///     ... on ScmPurchasingCategory {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategoryByCodeQueryDocument : global::StrawberryShake.IDocument
    {
        private ScmPurchasingCategoryByCodeQueryDocument()
        {
        }

        public static ScmPurchasingCategoryByCodeQueryDocument Instance { get; } = new ScmPurchasingCategoryByCodeQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x53, 0x63, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x63, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x63, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "a8f53f04eaf1500d3cb9ad04d8105519");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ScmPurchasingCategoryByCode GraphQL operation
    /// <code>
    /// query ScmPurchasingCategoryByCode($code: String!) {
    ///   scmPurchasingCategoryByCode(code: $code) {
    ///     __typename
    ///     id
    ///     code
    ///     name
    ///     description
    ///     categoryContentCode
    ///     startDateActive
    ///     endDateActive
    ///     enabled
    ///     lastUpdateDateTime
    ///     lastUpdateUserId
    ///     ... on ScmPurchasingCategory {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategoryByCodeQuery : global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IScmPurchasingCategoryByCodeResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public ScmPurchasingCategoryByCodeQuery(global::StrawberryShake.IOperationExecutor<IScmPurchasingCategoryByCodeResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IScmPurchasingCategoryByCodeResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IScmPurchasingCategoryByCodeResult>> ExecuteAsync(global::System.String code, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(code);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IScmPurchasingCategoryByCodeResult>> Watch(global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(code);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String code)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("code", FormatCode(code));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ScmPurchasingCategoryByCodeQueryDocument.Instance.Hash.Value, name: "ScmPurchasingCategoryByCode", document: ScmPurchasingCategoryByCodeQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCode(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ScmPurchasingCategoryByCode GraphQL operation
    /// <code>
    /// query ScmPurchasingCategoryByCode($code: String!) {
    ///   scmPurchasingCategoryByCode(code: $code) {
    ///     __typename
    ///     id
    ///     code
    ///     name
    ///     description
    ///     categoryContentCode
    ///     startDateActive
    ///     endDateActive
    ///     enabled
    ///     lastUpdateDateTime
    ///     lastUpdateUserId
    ///     ... on ScmPurchasingCategory {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchasingCategoryByCodeQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IScmPurchasingCategoryByCodeResult>> ExecuteAsync(global::System.String code, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IScmPurchasingCategoryByCodeResult>> Watch(global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ScmPurchasingCategorySearch GraphQL operation
    /// <code>
    /// query ScmPurchasingCategorySearch($filter: ScmPurchasingCategoryFilterInput!) {
    ///   scmPurchasingCategorySearch(filter: $filter) {
    ///     __typename
    ///     metadata {
    ///       __typename
    ///       sort
    ///       limit
    ///       returnedResultCount
    ///       startIndex
    ///       nextStartIndex
    ///       totalResultCount
    ///     }
    ///     data {
    ///       __typename
    ///       id
    ///       code
    ///       name
    ///       description
    ///       categoryContentCode
    ///       enabled
    ///       startDateActive
    ///       endDateActive
    ///       ... on ScmPurchasingCategory {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategorySearchQueryDocument : global::StrawberryShake.IDocument
    {
        private ScmPurchasingCategorySearchQueryDocument()
        {
        }

        public static ScmPurchasingCategorySearchQueryDocument Instance { get; } = new ScmPurchasingCategorySearchQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x53, 0x63, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x63, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x63, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x6f, 0x72, 0x74, 0x20, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x53, 0x63, 0x6d, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "1dbdad9f629a900d2e39cc2ab2de6c97");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ScmPurchasingCategorySearch GraphQL operation
    /// <code>
    /// query ScmPurchasingCategorySearch($filter: ScmPurchasingCategoryFilterInput!) {
    ///   scmPurchasingCategorySearch(filter: $filter) {
    ///     __typename
    ///     metadata {
    ///       __typename
    ///       sort
    ///       limit
    ///       returnedResultCount
    ///       startIndex
    ///       nextStartIndex
    ///       totalResultCount
    ///     }
    ///     data {
    ///       __typename
    ///       id
    ///       code
    ///       name
    ///       description
    ///       categoryContentCode
    ///       enabled
    ///       startDateActive
    ///       endDateActive
    ///       ... on ScmPurchasingCategory {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategorySearchQuery : global::AggieEnterpriseApi.IScmPurchasingCategorySearchQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IScmPurchasingCategorySearchResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _scmPurchasingCategoryFilterInputFormatter;
        public ScmPurchasingCategorySearchQuery(global::StrawberryShake.IOperationExecutor<IScmPurchasingCategorySearchResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _scmPurchasingCategoryFilterInputFormatter = serializerResolver.GetInputValueFormatter("ScmPurchasingCategoryFilterInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IScmPurchasingCategorySearchResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IScmPurchasingCategorySearchResult>> ExecuteAsync(global::AggieEnterpriseApi.ScmPurchasingCategoryFilterInput filter, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filter);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IScmPurchasingCategorySearchResult>> Watch(global::AggieEnterpriseApi.ScmPurchasingCategoryFilterInput filter, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filter);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.ScmPurchasingCategoryFilterInput filter)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filter", FormatFilter(filter));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ScmPurchasingCategorySearchQueryDocument.Instance.Hash.Value, name: "ScmPurchasingCategorySearch", document: ScmPurchasingCategorySearchQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFilter(global::AggieEnterpriseApi.ScmPurchasingCategoryFilterInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _scmPurchasingCategoryFilterInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ScmPurchasingCategorySearch GraphQL operation
    /// <code>
    /// query ScmPurchasingCategorySearch($filter: ScmPurchasingCategoryFilterInput!) {
    ///   scmPurchasingCategorySearch(filter: $filter) {
    ///     __typename
    ///     metadata {
    ///       __typename
    ///       sort
    ///       limit
    ///       returnedResultCount
    ///       startIndex
    ///       nextStartIndex
    ///       totalResultCount
    ///     }
    ///     data {
    ///       __typename
    ///       id
    ///       code
    ///       name
    ///       description
    ///       categoryContentCode
    ///       enabled
    ///       startDateActive
    ///       endDateActive
    ///       ... on ScmPurchasingCategory {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmPurchasingCategorySearchQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IScmPurchasingCategorySearchResult>> ExecuteAsync(global::AggieEnterpriseApi.ScmPurchasingCategoryFilterInput filter, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IScmPurchasingCategorySearchResult>> Watch(global::AggieEnterpriseApi.ScmPurchasingCategoryFilterInput filter, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the ScmSupplierSearch GraphQL operation
    /// <code>
    /// query ScmSupplierSearch($filter: ScmSupplierFilterInput!) {
    ///   scmSupplierSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       name
    ///       supplierNumber
    ///       sites {
    ///         __typename
    ///         supplierSiteCode
    ///         location {
    ///           __typename
    ///           addressLine1
    ///           addressLine2
    ///           addressLine3
    ///           addressLine4
    ///           city
    ///           state
    ///           postalCode
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierSearchQueryDocument : global::StrawberryShake.IDocument
    {
        private ScmSupplierSearchQueryDocument()
        {
        }

        public static ScmSupplierSearchQueryDocument Instance { get; } = new ScmSupplierSearchQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x53, 0x63, 0x6d, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x63, 0x6d, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x73, 0x63, 0x6d, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x73, 0x69, 0x74, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x53, 0x69, 0x74, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x31, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x32, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x33, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69, 0x6e, 0x65, 0x34, 0x20, 0x63, 0x69, 0x74, 0x79, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "aacfc80a3d7d46c42a2584fed73cea04");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the ScmSupplierSearch GraphQL operation
    /// <code>
    /// query ScmSupplierSearch($filter: ScmSupplierFilterInput!) {
    ///   scmSupplierSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       name
    ///       supplierNumber
    ///       sites {
    ///         __typename
    ///         supplierSiteCode
    ///         location {
    ///           __typename
    ///           addressLine1
    ///           addressLine2
    ///           addressLine3
    ///           addressLine4
    ///           city
    ///           state
    ///           postalCode
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierSearchQuery : global::AggieEnterpriseApi.IScmSupplierSearchQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IScmSupplierSearchResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _scmSupplierFilterInputFormatter;
        public ScmSupplierSearchQuery(global::StrawberryShake.IOperationExecutor<IScmSupplierSearchResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _scmSupplierFilterInputFormatter = serializerResolver.GetInputValueFormatter("ScmSupplierFilterInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IScmSupplierSearchResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IScmSupplierSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.ScmSupplierFilterInput filter, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filter);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IScmSupplierSearchResult>> Watch(global::AggieEnterpriseApi.ScmSupplierFilterInput filter, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filter);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.ScmSupplierFilterInput filter)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filter", FormatFilter(filter));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: ScmSupplierSearchQueryDocument.Instance.Hash.Value, name: "ScmSupplierSearch", document: ScmSupplierSearchQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFilter(global::AggieEnterpriseApi.ScmSupplierFilterInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _scmSupplierFilterInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the ScmSupplierSearch GraphQL operation
    /// <code>
    /// query ScmSupplierSearch($filter: ScmSupplierFilterInput!) {
    ///   scmSupplierSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       name
    ///       supplierNumber
    ///       sites {
    ///         __typename
    ///         supplierSiteCode
    ///         location {
    ///           __typename
    ///           addressLine1
    ///           addressLine2
    ///           addressLine3
    ///           addressLine4
    ///           city
    ///           state
    ///           postalCode
    ///         }
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IScmSupplierSearchQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IScmSupplierSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.ScmSupplierFilterInput filter, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IScmSupplierSearchResult>> Watch(global::AggieEnterpriseApi.ScmSupplierFilterInput filter, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PpmExpenditureTypeSearch GraphQL operation
    /// <code>
    /// query PpmExpenditureTypeSearch($filter: PpmExpenditureTypeFilterInput!, $code: String!) {
    ///   ppmExpenditureTypeByCode(code: $code) {
    ///     __typename
    ///     id
    ///     code
    ///     name
    ///     ... on PpmExpenditureType {
    ///       id
    ///     }
    ///   }
    ///   ppmExpenditureTypeSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       id
    ///       code
    ///       name
    ///       ... on PpmExpenditureType {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeSearchQueryDocument : global::StrawberryShake.IDocument
    {
        private PpmExpenditureTypeSearchQueryDocument()
        {
        }

        public static PpmExpenditureTypeSearchQueryDocument Instance { get; } = new PpmExpenditureTypeSearchQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x70, 0x6d, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x50, 0x70, 0x6d, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x70, 0x6d, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x70, 0x6d, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x70, 0x6d, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x70, 0x6d, 0x45, 0x78, 0x70, 0x65, 0x6e, 0x64, 0x69, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "31318b0e40dbfa7f8f5d6fae6fa6a67b");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmExpenditureTypeSearch GraphQL operation
    /// <code>
    /// query PpmExpenditureTypeSearch($filter: PpmExpenditureTypeFilterInput!, $code: String!) {
    ///   ppmExpenditureTypeByCode(code: $code) {
    ///     __typename
    ///     id
    ///     code
    ///     name
    ///     ... on PpmExpenditureType {
    ///       id
    ///     }
    ///   }
    ///   ppmExpenditureTypeSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       id
    ///       code
    ///       name
    ///       ... on PpmExpenditureType {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeSearchQuery : global::AggieEnterpriseApi.IPpmExpenditureTypeSearchQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPpmExpenditureTypeSearchResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _ppmExpenditureTypeFilterInputFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public PpmExpenditureTypeSearchQuery(global::StrawberryShake.IOperationExecutor<IPpmExpenditureTypeSearchResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _ppmExpenditureTypeFilterInputFormatter = serializerResolver.GetInputValueFormatter("PpmExpenditureTypeFilterInput");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPpmExpenditureTypeSearchResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmExpenditureTypeSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.PpmExpenditureTypeFilterInput filter, global::System.String code, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filter, code);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmExpenditureTypeSearchResult>> Watch(global::AggieEnterpriseApi.PpmExpenditureTypeFilterInput filter, global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filter, code);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.PpmExpenditureTypeFilterInput filter, global::System.String code)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filter", FormatFilter(filter));
            variables.Add("code", FormatCode(code));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PpmExpenditureTypeSearchQueryDocument.Instance.Hash.Value, name: "PpmExpenditureTypeSearch", document: PpmExpenditureTypeSearchQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFilter(global::AggieEnterpriseApi.PpmExpenditureTypeFilterInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _ppmExpenditureTypeFilterInputFormatter.Format(value);
        }

        private global::System.Object? FormatCode(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmExpenditureTypeSearch GraphQL operation
    /// <code>
    /// query PpmExpenditureTypeSearch($filter: PpmExpenditureTypeFilterInput!, $code: String!) {
    ///   ppmExpenditureTypeByCode(code: $code) {
    ///     __typename
    ///     id
    ///     code
    ///     name
    ///     ... on PpmExpenditureType {
    ///       id
    ///     }
    ///   }
    ///   ppmExpenditureTypeSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       id
    ///       code
    ///       name
    ///       ... on PpmExpenditureType {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmExpenditureTypeSearchQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmExpenditureTypeSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.PpmExpenditureTypeFilterInput filter, global::System.String code, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmExpenditureTypeSearchResult>> Watch(global::AggieEnterpriseApi.PpmExpenditureTypeFilterInput filter, global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PpmOrganizationSearch GraphQL operation
    /// <code>
    /// query PpmOrganizationSearch($filter: PpmOrganizationFilterInput!, $code: String!) {
    ///   ppmOrganization(code: $code) {
    ///     __typename
    ///     id
    ///     code
    ///     name
    ///     ... on PpmOrganization {
    ///       id
    ///     }
    ///   }
    ///   ppmOrganizationSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       id
    ///       code
    ///       name
    ///       ... on PpmOrganization {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationSearchQueryDocument : global::StrawberryShake.IDocument
    {
        private PpmOrganizationSearchQueryDocument()
        {
        }

        public static PpmOrganizationSearchQueryDocument Instance { get; } = new PpmOrganizationSearchQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x70, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x50, 0x70, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x70, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x70, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x70, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x70, 0x6d, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "47aed7de0d25bb9912831b8ecfb5b1e4");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmOrganizationSearch GraphQL operation
    /// <code>
    /// query PpmOrganizationSearch($filter: PpmOrganizationFilterInput!, $code: String!) {
    ///   ppmOrganization(code: $code) {
    ///     __typename
    ///     id
    ///     code
    ///     name
    ///     ... on PpmOrganization {
    ///       id
    ///     }
    ///   }
    ///   ppmOrganizationSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       id
    ///       code
    ///       name
    ///       ... on PpmOrganization {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationSearchQuery : global::AggieEnterpriseApi.IPpmOrganizationSearchQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPpmOrganizationSearchResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _ppmOrganizationFilterInputFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public PpmOrganizationSearchQuery(global::StrawberryShake.IOperationExecutor<IPpmOrganizationSearchResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _ppmOrganizationFilterInputFormatter = serializerResolver.GetInputValueFormatter("PpmOrganizationFilterInput");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPpmOrganizationSearchResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmOrganizationSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.PpmOrganizationFilterInput filter, global::System.String code, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filter, code);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmOrganizationSearchResult>> Watch(global::AggieEnterpriseApi.PpmOrganizationFilterInput filter, global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filter, code);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.PpmOrganizationFilterInput filter, global::System.String code)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filter", FormatFilter(filter));
            variables.Add("code", FormatCode(code));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PpmOrganizationSearchQueryDocument.Instance.Hash.Value, name: "PpmOrganizationSearch", document: PpmOrganizationSearchQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFilter(global::AggieEnterpriseApi.PpmOrganizationFilterInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _ppmOrganizationFilterInputFormatter.Format(value);
        }

        private global::System.Object? FormatCode(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmOrganizationSearch GraphQL operation
    /// <code>
    /// query PpmOrganizationSearch($filter: PpmOrganizationFilterInput!, $code: String!) {
    ///   ppmOrganization(code: $code) {
    ///     __typename
    ///     id
    ///     code
    ///     name
    ///     ... on PpmOrganization {
    ///       id
    ///     }
    ///   }
    ///   ppmOrganizationSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       id
    ///       code
    ///       name
    ///       ... on PpmOrganization {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmOrganizationSearchQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmOrganizationSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.PpmOrganizationFilterInput filter, global::System.String code, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmOrganizationSearchResult>> Watch(global::AggieEnterpriseApi.PpmOrganizationFilterInput filter, global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PpmProjectSearch GraphQL operation
    /// <code>
    /// query PpmProjectSearch($filter: PpmProjectFilterInput!, $projectNumber: String!) {
    ///   ppmProjectByNumber(projectNumber: $projectNumber) {
    ///     __typename
    ///     id
    ///     projectNumber
    ///     name
    ///     ... on PpmProject {
    ///       id
    ///     }
    ///   }
    ///   ppmProjectSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       id
    ///       projectNumber
    ///       name
    ///       ... on PpmProject {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectSearchQueryDocument : global::StrawberryShake.IDocument
    {
        private PpmProjectSearchQueryDocument()
        {
        }

        public static PpmProjectSearchQueryDocument Instance { get; } = new PpmProjectSearchQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x50, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x28, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x70, 0x6d, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "d17d8e4e05a5e99f4fe93116af03814f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmProjectSearch GraphQL operation
    /// <code>
    /// query PpmProjectSearch($filter: PpmProjectFilterInput!, $projectNumber: String!) {
    ///   ppmProjectByNumber(projectNumber: $projectNumber) {
    ///     __typename
    ///     id
    ///     projectNumber
    ///     name
    ///     ... on PpmProject {
    ///       id
    ///     }
    ///   }
    ///   ppmProjectSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       id
    ///       projectNumber
    ///       name
    ///       ... on PpmProject {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectSearchQuery : global::AggieEnterpriseApi.IPpmProjectSearchQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPpmProjectSearchResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _ppmProjectFilterInputFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public PpmProjectSearchQuery(global::StrawberryShake.IOperationExecutor<IPpmProjectSearchResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _ppmProjectFilterInputFormatter = serializerResolver.GetInputValueFormatter("PpmProjectFilterInput");
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPpmProjectSearchResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmProjectSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.PpmProjectFilterInput filter, global::System.String projectNumber, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filter, projectNumber);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmProjectSearchResult>> Watch(global::AggieEnterpriseApi.PpmProjectFilterInput filter, global::System.String projectNumber, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filter, projectNumber);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.PpmProjectFilterInput filter, global::System.String projectNumber)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filter", FormatFilter(filter));
            variables.Add("projectNumber", FormatProjectNumber(projectNumber));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PpmProjectSearchQueryDocument.Instance.Hash.Value, name: "PpmProjectSearch", document: PpmProjectSearchQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFilter(global::AggieEnterpriseApi.PpmProjectFilterInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _ppmProjectFilterInputFormatter.Format(value);
        }

        private global::System.Object? FormatProjectNumber(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmProjectSearch GraphQL operation
    /// <code>
    /// query PpmProjectSearch($filter: PpmProjectFilterInput!, $projectNumber: String!) {
    ///   ppmProjectByNumber(projectNumber: $projectNumber) {
    ///     __typename
    ///     id
    ///     projectNumber
    ///     name
    ///     ... on PpmProject {
    ///       id
    ///     }
    ///   }
    ///   ppmProjectSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       id
    ///       projectNumber
    ///       name
    ///       ... on PpmProject {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmProjectSearchQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmProjectSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.PpmProjectFilterInput filter, global::System.String projectNumber, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmProjectSearchResult>> Watch(global::AggieEnterpriseApi.PpmProjectFilterInput filter, global::System.String projectNumber, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PpmTaskSearch GraphQL operation
    /// <code>
    /// query PpmTaskSearch($filter: PpmTaskFilterInput!) {
    ///   ppmTaskSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       id
    ///       taskNumber
    ///       projectId
    ///       name
    ///       ... on PpmTask {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskSearchQueryDocument : global::StrawberryShake.IDocument
    {
        private PpmTaskSearchQueryDocument()
        {
        }

        public static PpmTaskSearchQueryDocument Instance { get; } = new PpmTaskSearchQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x70, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x50, 0x70, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x70, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x28, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x64, 0x20, 0x74, 0x61, 0x73, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x70, 0x6d, 0x54, 0x61, 0x73, 0x6b, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b655c5fca7738268334be42a11f72b4d");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmTaskSearch GraphQL operation
    /// <code>
    /// query PpmTaskSearch($filter: PpmTaskFilterInput!) {
    ///   ppmTaskSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       id
    ///       taskNumber
    ///       projectId
    ///       name
    ///       ... on PpmTask {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskSearchQuery : global::AggieEnterpriseApi.IPpmTaskSearchQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPpmTaskSearchResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _ppmTaskFilterInputFormatter;
        public PpmTaskSearchQuery(global::StrawberryShake.IOperationExecutor<IPpmTaskSearchResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _ppmTaskFilterInputFormatter = serializerResolver.GetInputValueFormatter("PpmTaskFilterInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPpmTaskSearchResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmTaskSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.PpmTaskFilterInput filter, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(filter);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmTaskSearchResult>> Watch(global::AggieEnterpriseApi.PpmTaskFilterInput filter, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(filter);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.PpmTaskFilterInput filter)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("filter", FormatFilter(filter));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PpmTaskSearchQueryDocument.Instance.Hash.Value, name: "PpmTaskSearch", document: PpmTaskSearchQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatFilter(global::AggieEnterpriseApi.PpmTaskFilterInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _ppmTaskFilterInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmTaskSearch GraphQL operation
    /// <code>
    /// query PpmTaskSearch($filter: PpmTaskFilterInput!) {
    ///   ppmTaskSearch(filter: $filter) {
    ///     __typename
    ///     data {
    ///       __typename
    ///       id
    ///       taskNumber
    ///       projectId
    ///       name
    ///       ... on PpmTask {
    ///         id
    ///       }
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmTaskSearchQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmTaskSearchResult>> ExecuteAsync(global::AggieEnterpriseApi.PpmTaskFilterInput filter, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmTaskSearchResult>> Watch(global::AggieEnterpriseApi.PpmTaskFilterInput filter, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GlValidateChartSegments GraphQL operation
    /// <code>
    /// query GlValidateChartSegments($segments: GlSegmentInput!, $validateCVRs: Boolean) {
    ///   glValidateChartSegments(segments: $segments, validateCVRs: $validateCVRs) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segments {
    ///       __typename
    ///       account
    ///       activity
    ///       department
    ///       entity
    ///       fund
    ///       program
    ///       project
    ///       purpose
    ///     }
    ///     completeChartstring
    ///     codeCombinationId
    ///     segmentNames {
    ///       __typename
    ///       entityName
    ///       fundName
    ///       departmentName
    ///       accountName
    ///       purposeName
    ///       projectName
    ///       programName
    ///       activityName
    ///     }
    ///     warnings {
    ///       __typename
    ///       segmentName
    ///       warning
    ///     }
    ///     endDates {
    ///       __typename
    ///       segmentName
    ///       endDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsQueryDocument : global::StrawberryShake.IDocument
    {
        private GlValidateChartSegmentsQueryDocument()
        {
        }

        public static GlValidateChartSegmentsQueryDocument Instance { get; } = new GlValidateChartSegmentsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x47, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x52, 0x73, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2c, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x52, 0x73, 0x3a, 0x20, 0x24, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x52, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x7d, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x7d, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "17b0185e2c4723166adee57c3b6f637a");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GlValidateChartSegments GraphQL operation
    /// <code>
    /// query GlValidateChartSegments($segments: GlSegmentInput!, $validateCVRs: Boolean) {
    ///   glValidateChartSegments(segments: $segments, validateCVRs: $validateCVRs) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segments {
    ///       __typename
    ///       account
    ///       activity
    ///       department
    ///       entity
    ///       fund
    ///       program
    ///       project
    ///       purpose
    ///     }
    ///     completeChartstring
    ///     codeCombinationId
    ///     segmentNames {
    ///       __typename
    ///       entityName
    ///       fundName
    ///       departmentName
    ///       accountName
    ///       purposeName
    ///       projectName
    ///       programName
    ///       activityName
    ///     }
    ///     warnings {
    ///       __typename
    ///       segmentName
    ///       warning
    ///     }
    ///     endDates {
    ///       __typename
    ///       segmentName
    ///       endDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsQuery : global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGlValidateChartSegmentsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _glSegmentInputFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        public GlValidateChartSegmentsQuery(global::StrawberryShake.IOperationExecutor<IGlValidateChartSegmentsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _glSegmentInputFormatter = serializerResolver.GetInputValueFormatter("GlSegmentInput");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGlValidateChartSegmentsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlValidateChartSegmentsResult>> ExecuteAsync(global::AggieEnterpriseApi.GlSegmentInput segments, global::System.Boolean? validateCVRs, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(segments, validateCVRs);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGlValidateChartSegmentsResult>> Watch(global::AggieEnterpriseApi.GlSegmentInput segments, global::System.Boolean? validateCVRs, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(segments, validateCVRs);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.GlSegmentInput segments, global::System.Boolean? validateCVRs)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("segments", FormatSegments(segments));
            variables.Add("validateCVRs", FormatValidateCVRs(validateCVRs));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GlValidateChartSegmentsQueryDocument.Instance.Hash.Value, name: "GlValidateChartSegments", document: GlValidateChartSegmentsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSegments(global::AggieEnterpriseApi.GlSegmentInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _glSegmentInputFormatter.Format(value);
        }

        private global::System.Object? FormatValidateCVRs(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GlValidateChartSegments GraphQL operation
    /// <code>
    /// query GlValidateChartSegments($segments: GlSegmentInput!, $validateCVRs: Boolean) {
    ///   glValidateChartSegments(segments: $segments, validateCVRs: $validateCVRs) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segments {
    ///       __typename
    ///       account
    ///       activity
    ///       department
    ///       entity
    ///       fund
    ///       program
    ///       project
    ///       purpose
    ///     }
    ///     completeChartstring
    ///     codeCombinationId
    ///     segmentNames {
    ///       __typename
    ///       entityName
    ///       fundName
    ///       departmentName
    ///       accountName
    ///       purposeName
    ///       projectName
    ///       programName
    ///       activityName
    ///     }
    ///     warnings {
    ///       __typename
    ///       segmentName
    ///       warning
    ///     }
    ///     endDates {
    ///       __typename
    ///       segmentName
    ///       endDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegmentsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlValidateChartSegmentsResult>> ExecuteAsync(global::AggieEnterpriseApi.GlSegmentInput segments, global::System.Boolean? validateCVRs, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGlValidateChartSegmentsResult>> Watch(global::AggieEnterpriseApi.GlSegmentInput segments, global::System.Boolean? validateCVRs, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GlValidateChartstring GraphQL operation
    /// <code>
    /// query GlValidateChartstring($segmentString: GlSegmentString!, $validateCVRs: Boolean) {
    ///   glValidateChartstring(segmentString: $segmentString, validateCVRs: $validateCVRs) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segments {
    ///       __typename
    ///       account
    ///       activity
    ///       department
    ///       entity
    ///       fund
    ///       program
    ///       project
    ///       purpose
    ///     }
    ///     completeChartstring
    ///     codeCombinationId
    ///     segmentNames {
    ///       __typename
    ///       entityName
    ///       fundName
    ///       departmentName
    ///       accountName
    ///       purposeName
    ///       projectName
    ///       programName
    ///       activityName
    ///     }
    ///     warnings {
    ///       __typename
    ///       segmentName
    ///       warning
    ///     }
    ///     endDates {
    ///       __typename
    ///       segmentName
    ///       endDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstringQueryDocument : global::StrawberryShake.IDocument
    {
        private GlValidateChartstringQueryDocument()
        {
        }

        public static GlValidateChartstringQueryDocument Instance { get; } = new GlValidateChartstringQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x47, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x52, 0x73, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x52, 0x73, 0x3a, 0x20, 0x24, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x52, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x7d, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x7d, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "42dbc0ccf2b93482ef425e94de8755b4");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GlValidateChartstring GraphQL operation
    /// <code>
    /// query GlValidateChartstring($segmentString: GlSegmentString!, $validateCVRs: Boolean) {
    ///   glValidateChartstring(segmentString: $segmentString, validateCVRs: $validateCVRs) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segments {
    ///       __typename
    ///       account
    ///       activity
    ///       department
    ///       entity
    ///       fund
    ///       program
    ///       project
    ///       purpose
    ///     }
    ///     completeChartstring
    ///     codeCombinationId
    ///     segmentNames {
    ///       __typename
    ///       entityName
    ///       fundName
    ///       departmentName
    ///       accountName
    ///       purposeName
    ///       projectName
    ///       programName
    ///       activityName
    ///     }
    ///     warnings {
    ///       __typename
    ///       segmentName
    ///       warning
    ///     }
    ///     endDates {
    ///       __typename
    ///       segmentName
    ///       endDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstringQuery : global::AggieEnterpriseApi.IGlValidateChartstringQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGlValidateChartstringResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _glSegmentStringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        public GlValidateChartstringQuery(global::StrawberryShake.IOperationExecutor<IGlValidateChartstringResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _glSegmentStringFormatter = serializerResolver.GetInputValueFormatter("GlSegmentString");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGlValidateChartstringResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlValidateChartstringResult>> ExecuteAsync(global::System.String segmentString, global::System.Boolean? validateCVRs, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(segmentString, validateCVRs);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGlValidateChartstringResult>> Watch(global::System.String segmentString, global::System.Boolean? validateCVRs, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(segmentString, validateCVRs);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String segmentString, global::System.Boolean? validateCVRs)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("segmentString", FormatSegmentString(segmentString));
            variables.Add("validateCVRs", FormatValidateCVRs(validateCVRs));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GlValidateChartstringQueryDocument.Instance.Hash.Value, name: "GlValidateChartstring", document: GlValidateChartstringQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSegmentString(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _glSegmentStringFormatter.Format(value);
        }

        private global::System.Object? FormatValidateCVRs(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GlValidateChartstring GraphQL operation
    /// <code>
    /// query GlValidateChartstring($segmentString: GlSegmentString!, $validateCVRs: Boolean) {
    ///   glValidateChartstring(segmentString: $segmentString, validateCVRs: $validateCVRs) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segments {
    ///       __typename
    ///       account
    ///       activity
    ///       department
    ///       entity
    ///       fund
    ///       program
    ///       project
    ///       purpose
    ///     }
    ///     completeChartstring
    ///     codeCombinationId
    ///     segmentNames {
    ///       __typename
    ///       entityName
    ///       fundName
    ///       departmentName
    ///       accountName
    ///       purposeName
    ///       projectName
    ///       programName
    ///       activityName
    ///     }
    ///     warnings {
    ///       __typename
    ///       segmentName
    ///       warning
    ///     }
    ///     endDates {
    ///       __typename
    ///       segmentName
    ///       endDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstringQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlValidateChartstringResult>> ExecuteAsync(global::System.String segmentString, global::System.Boolean? validateCVRs, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGlValidateChartstringResult>> Watch(global::System.String segmentString, global::System.Boolean? validateCVRs, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the AggieEnterpriseClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class AggieEnterpriseClient : global::AggieEnterpriseApi.IAggieEnterpriseClient
    {
        private readonly global::AggieEnterpriseApi.IDeptParentsQuery _deptParents;
        private readonly global::AggieEnterpriseApi.IErpInstitutionLocationSearchQuery _erpInstitutionLocationSearch;
        private readonly global::AggieEnterpriseApi.IErpUnitOfMeasureSearchQuery _erpUnitOfMeasureSearch;
        private readonly global::AggieEnterpriseApi.IFundParentsQuery _fundParents;
        private readonly global::AggieEnterpriseApi.IGlJournalRequestMutation _glJournalRequest;
        private readonly global::AggieEnterpriseApi.IGlJournalRequestStatusQuery _glJournalRequestStatus;
        private readonly global::AggieEnterpriseApi.ICoaDetailsQuery _coaDetails;
        private readonly global::AggieEnterpriseApi.IKfsConvertAccountQuery _kfsConvertAccount;
        private readonly global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery _ppmStringSegmentsValidate;
        private readonly global::AggieEnterpriseApi.IPpmSegmentsValidateQuery _ppmSegmentsValidate;
        private readonly global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberQuery _ppmTaskByProjectNumberAndTaskNumber;
        private readonly global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateMutation _scmPurchaseRequisitionCreate;
        private readonly global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusQuery _scmPurchaseRequisitionRequestStatus;
        private readonly global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeQuery _scmPurchasingCategoryByCode;
        private readonly global::AggieEnterpriseApi.IScmPurchasingCategorySearchQuery _scmPurchasingCategorySearch;
        private readonly global::AggieEnterpriseApi.IScmSupplierSearchQuery _scmSupplierSearch;
        private readonly global::AggieEnterpriseApi.IPpmExpenditureTypeSearchQuery _ppmExpenditureTypeSearch;
        private readonly global::AggieEnterpriseApi.IPpmOrganizationSearchQuery _ppmOrganizationSearch;
        private readonly global::AggieEnterpriseApi.IPpmProjectSearchQuery _ppmProjectSearch;
        private readonly global::AggieEnterpriseApi.IPpmTaskSearchQuery _ppmTaskSearch;
        private readonly global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery _glValidateChartSegments;
        private readonly global::AggieEnterpriseApi.IGlValidateChartstringQuery _glValidateChartstring;
        public AggieEnterpriseClient(global::AggieEnterpriseApi.IDeptParentsQuery deptParents, global::AggieEnterpriseApi.IErpInstitutionLocationSearchQuery erpInstitutionLocationSearch, global::AggieEnterpriseApi.IErpUnitOfMeasureSearchQuery erpUnitOfMeasureSearch, global::AggieEnterpriseApi.IFundParentsQuery fundParents, global::AggieEnterpriseApi.IGlJournalRequestMutation glJournalRequest, global::AggieEnterpriseApi.IGlJournalRequestStatusQuery glJournalRequestStatus, global::AggieEnterpriseApi.ICoaDetailsQuery coaDetails, global::AggieEnterpriseApi.IKfsConvertAccountQuery kfsConvertAccount, global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery ppmStringSegmentsValidate, global::AggieEnterpriseApi.IPpmSegmentsValidateQuery ppmSegmentsValidate, global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberQuery ppmTaskByProjectNumberAndTaskNumber, global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateMutation scmPurchaseRequisitionCreate, global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusQuery scmPurchaseRequisitionRequestStatus, global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeQuery scmPurchasingCategoryByCode, global::AggieEnterpriseApi.IScmPurchasingCategorySearchQuery scmPurchasingCategorySearch, global::AggieEnterpriseApi.IScmSupplierSearchQuery scmSupplierSearch, global::AggieEnterpriseApi.IPpmExpenditureTypeSearchQuery ppmExpenditureTypeSearch, global::AggieEnterpriseApi.IPpmOrganizationSearchQuery ppmOrganizationSearch, global::AggieEnterpriseApi.IPpmProjectSearchQuery ppmProjectSearch, global::AggieEnterpriseApi.IPpmTaskSearchQuery ppmTaskSearch, global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery glValidateChartSegments, global::AggieEnterpriseApi.IGlValidateChartstringQuery glValidateChartstring)
        {
            _deptParents = deptParents ?? throw new global::System.ArgumentNullException(nameof(deptParents));
            _erpInstitutionLocationSearch = erpInstitutionLocationSearch ?? throw new global::System.ArgumentNullException(nameof(erpInstitutionLocationSearch));
            _erpUnitOfMeasureSearch = erpUnitOfMeasureSearch ?? throw new global::System.ArgumentNullException(nameof(erpUnitOfMeasureSearch));
            _fundParents = fundParents ?? throw new global::System.ArgumentNullException(nameof(fundParents));
            _glJournalRequest = glJournalRequest ?? throw new global::System.ArgumentNullException(nameof(glJournalRequest));
            _glJournalRequestStatus = glJournalRequestStatus ?? throw new global::System.ArgumentNullException(nameof(glJournalRequestStatus));
            _coaDetails = coaDetails ?? throw new global::System.ArgumentNullException(nameof(coaDetails));
            _kfsConvertAccount = kfsConvertAccount ?? throw new global::System.ArgumentNullException(nameof(kfsConvertAccount));
            _ppmStringSegmentsValidate = ppmStringSegmentsValidate ?? throw new global::System.ArgumentNullException(nameof(ppmStringSegmentsValidate));
            _ppmSegmentsValidate = ppmSegmentsValidate ?? throw new global::System.ArgumentNullException(nameof(ppmSegmentsValidate));
            _ppmTaskByProjectNumberAndTaskNumber = ppmTaskByProjectNumberAndTaskNumber ?? throw new global::System.ArgumentNullException(nameof(ppmTaskByProjectNumberAndTaskNumber));
            _scmPurchaseRequisitionCreate = scmPurchaseRequisitionCreate ?? throw new global::System.ArgumentNullException(nameof(scmPurchaseRequisitionCreate));
            _scmPurchaseRequisitionRequestStatus = scmPurchaseRequisitionRequestStatus ?? throw new global::System.ArgumentNullException(nameof(scmPurchaseRequisitionRequestStatus));
            _scmPurchasingCategoryByCode = scmPurchasingCategoryByCode ?? throw new global::System.ArgumentNullException(nameof(scmPurchasingCategoryByCode));
            _scmPurchasingCategorySearch = scmPurchasingCategorySearch ?? throw new global::System.ArgumentNullException(nameof(scmPurchasingCategorySearch));
            _scmSupplierSearch = scmSupplierSearch ?? throw new global::System.ArgumentNullException(nameof(scmSupplierSearch));
            _ppmExpenditureTypeSearch = ppmExpenditureTypeSearch ?? throw new global::System.ArgumentNullException(nameof(ppmExpenditureTypeSearch));
            _ppmOrganizationSearch = ppmOrganizationSearch ?? throw new global::System.ArgumentNullException(nameof(ppmOrganizationSearch));
            _ppmProjectSearch = ppmProjectSearch ?? throw new global::System.ArgumentNullException(nameof(ppmProjectSearch));
            _ppmTaskSearch = ppmTaskSearch ?? throw new global::System.ArgumentNullException(nameof(ppmTaskSearch));
            _glValidateChartSegments = glValidateChartSegments ?? throw new global::System.ArgumentNullException(nameof(glValidateChartSegments));
            _glValidateChartstring = glValidateChartstring ?? throw new global::System.ArgumentNullException(nameof(glValidateChartstring));
        }

        public static global::System.String ClientName => "AggieEnterpriseClient";
        public global::AggieEnterpriseApi.IDeptParentsQuery DeptParents => _deptParents;
        public global::AggieEnterpriseApi.IErpInstitutionLocationSearchQuery ErpInstitutionLocationSearch => _erpInstitutionLocationSearch;
        public global::AggieEnterpriseApi.IErpUnitOfMeasureSearchQuery ErpUnitOfMeasureSearch => _erpUnitOfMeasureSearch;
        public global::AggieEnterpriseApi.IFundParentsQuery FundParents => _fundParents;
        public global::AggieEnterpriseApi.IGlJournalRequestMutation GlJournalRequest => _glJournalRequest;
        public global::AggieEnterpriseApi.IGlJournalRequestStatusQuery GlJournalRequestStatus => _glJournalRequestStatus;
        public global::AggieEnterpriseApi.ICoaDetailsQuery CoaDetails => _coaDetails;
        public global::AggieEnterpriseApi.IKfsConvertAccountQuery KfsConvertAccount => _kfsConvertAccount;
        public global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery PpmStringSegmentsValidate => _ppmStringSegmentsValidate;
        public global::AggieEnterpriseApi.IPpmSegmentsValidateQuery PpmSegmentsValidate => _ppmSegmentsValidate;
        public global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberQuery PpmTaskByProjectNumberAndTaskNumber => _ppmTaskByProjectNumberAndTaskNumber;
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateMutation ScmPurchaseRequisitionCreate => _scmPurchaseRequisitionCreate;
        public global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusQuery ScmPurchaseRequisitionRequestStatus => _scmPurchaseRequisitionRequestStatus;
        public global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeQuery ScmPurchasingCategoryByCode => _scmPurchasingCategoryByCode;
        public global::AggieEnterpriseApi.IScmPurchasingCategorySearchQuery ScmPurchasingCategorySearch => _scmPurchasingCategorySearch;
        public global::AggieEnterpriseApi.IScmSupplierSearchQuery ScmSupplierSearch => _scmSupplierSearch;
        public global::AggieEnterpriseApi.IPpmExpenditureTypeSearchQuery PpmExpenditureTypeSearch => _ppmExpenditureTypeSearch;
        public global::AggieEnterpriseApi.IPpmOrganizationSearchQuery PpmOrganizationSearch => _ppmOrganizationSearch;
        public global::AggieEnterpriseApi.IPpmProjectSearchQuery PpmProjectSearch => _ppmProjectSearch;
        public global::AggieEnterpriseApi.IPpmTaskSearchQuery PpmTaskSearch => _ppmTaskSearch;
        public global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery GlValidateChartSegments => _glValidateChartSegments;
        public global::AggieEnterpriseApi.IGlValidateChartstringQuery GlValidateChartstring => _glValidateChartstring;
    }

    /// <summary>
    /// Represents the AggieEnterpriseClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IAggieEnterpriseClient
    {
        global::AggieEnterpriseApi.IDeptParentsQuery DeptParents { get; }

        global::AggieEnterpriseApi.IErpInstitutionLocationSearchQuery ErpInstitutionLocationSearch { get; }

        global::AggieEnterpriseApi.IErpUnitOfMeasureSearchQuery ErpUnitOfMeasureSearch { get; }

        global::AggieEnterpriseApi.IFundParentsQuery FundParents { get; }

        global::AggieEnterpriseApi.IGlJournalRequestMutation GlJournalRequest { get; }

        global::AggieEnterpriseApi.IGlJournalRequestStatusQuery GlJournalRequestStatus { get; }

        global::AggieEnterpriseApi.ICoaDetailsQuery CoaDetails { get; }

        global::AggieEnterpriseApi.IKfsConvertAccountQuery KfsConvertAccount { get; }

        global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery PpmStringSegmentsValidate { get; }

        global::AggieEnterpriseApi.IPpmSegmentsValidateQuery PpmSegmentsValidate { get; }

        global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberQuery PpmTaskByProjectNumberAndTaskNumber { get; }

        global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateMutation ScmPurchaseRequisitionCreate { get; }

        global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusQuery ScmPurchaseRequisitionRequestStatus { get; }

        global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeQuery ScmPurchasingCategoryByCode { get; }

        global::AggieEnterpriseApi.IScmPurchasingCategorySearchQuery ScmPurchasingCategorySearch { get; }

        global::AggieEnterpriseApi.IScmSupplierSearchQuery ScmSupplierSearch { get; }

        global::AggieEnterpriseApi.IPpmExpenditureTypeSearchQuery PpmExpenditureTypeSearch { get; }

        global::AggieEnterpriseApi.IPpmOrganizationSearchQuery PpmOrganizationSearch { get; }

        global::AggieEnterpriseApi.IPpmProjectSearchQuery PpmProjectSearch { get; }

        global::AggieEnterpriseApi.IPpmTaskSearchQuery PpmTaskSearch { get; }

        global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery GlValidateChartSegments { get; }

        global::AggieEnterpriseApi.IGlValidateChartstringQuery GlValidateChartstring { get; }
    }
}

namespace AggieEnterpriseApi.State
{
    ///<summary>Financial Department is often known as the "cost center" or "department". This field records, tracks and retains the Financial Department's financial transactions. There are several levels of Financial Departments within the CoA hierarchy. The mid-level hierarchy aligns with the UCPath HR Departments.**Financial Departments have:**- An ongoing business objective and operational function with no planned end date (enabling historical trend analysis + long-range planning)- Identifiable, permanently funded employees and generally an allocation of physical space**FAU Value Comparison:**Due to significant variations in departments' financial structure in KFS, it is not possible to align the Financial Department segment with  specific KFS values.**Access Roles: erp:reader-refdata**</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpFinancialDepartmentEntity
    {
        public ErpFinancialDepartmentEntity(global::System.String code = default !, global::System.String name = default !, global::System.Boolean enabled = default !, global::StrawberryShake.EntityId? parent = default !, global::System.Boolean eligibleForUse = default !)
        {
            Code = code;
            Name = name;
            Enabled = enabled;
            Parent = parent;
            EligibleForUse = eligibleForUse;
        }

        ///<summary>Unique identifier of an ErpFinancialDepartment</summary>
        public global::System.String Code { get; }

        ///<summary>Descriptive name of an ErpFinancialDepartment</summary>
        public global::System.String Name { get; }

        ///<summary>Whether this ErpFinancialDepartment is presently enabled for use.</summary>
        public global::System.Boolean Enabled { get; }

        ///<summary>The ErpFinancialDepartment which is the immediate parent of this one.Will be undefined if the ErpFinancialDepartment has no parent.</summary>
        public global::StrawberryShake.EntityId? Parent { get; }

        ///<summary>Returns whether this ErpFinancialDepartment is valid to use on transactional documents for the given accounting date.  If not provided, the date will be defaulted to the current date.To be eligible for use, the ErpFinancialDepartment must:* Be enabled* Not be summaryOnly* Have a startDate and endDate range which includes the given accountingDate</summary>
        public global::System.Boolean EligibleForUse { get; }
    }

    ///<summary>Funds provide a method of tracking funding resources whose use is limited by donors, granting agencies, regulations and other external individuals or entities, or by governing boards. A Fund is maintained for each specific funding type (e.g., Unrestricted, Restricted-Expendable, Capital) which supports the compilation of GASB audited financial statements.The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Fund level.In most cases, Fund activity will be presented in the general ledger in summary and the Fund values will be shared amongst Financial Departments. For example, all Financial Departments will share one Restricted Expendable Federal Contracts fund. The detailed transactional information related to each federally sponsored project within this fund will be tracked using the PPM module.**FAU Value Comparison:**The Fund segment most closely aligns with the fund attribute of the KFS Account.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpFundEntity
    {
        public ErpFundEntity(global::System.String code = default !, global::System.String name = default !, global::System.Boolean? budgeted = default !, global::System.Boolean eligibleForUse = default !, global::System.Boolean enabled = default !, global::System.String? endDate = default !, global::System.Int64 id = default !, global::System.String? startDate = default !, global::System.Int32? hierarchyDepth = default !, global::StrawberryShake.EntityId? parent = default !)
        {
            Code = code;
            Name = name;
            Budgeted = budgeted;
            EligibleForUse = eligibleForUse;
            Enabled = enabled;
            EndDate = endDate;
            Id = id;
            StartDate = startDate;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        ///<summary>Unique identifier of an ErpFund</summary>
        public global::System.String Code { get; }

        ///<summary>Descriptive name of an ErpFund</summary>
        public global::System.String Name { get; }

        ///<summary>Whether this fund is used for budgeting purposes.</summary>
        public global::System.Boolean? Budgeted { get; }

        ///<summary>Returns whether this ErpFund is valid to use on transactional documents for the given accounting date.  If not provided, the date will be defaulted to the current date.To be eligible for use, the ErpFund must:* Be enabled* Not be summaryOnly* Have a startDate and endDate range which includes the given accountingDate</summary>
        public global::System.Boolean EligibleForUse { get; }

        ///<summary>Whether this ErpFund is presently enabled for use.</summary>
        public global::System.Boolean Enabled { get; }

        ///<summary>The date till which the value is available for use.</summary>
        public global::System.String? EndDate { get; }

        ///<summary>Internal numeric identifier of an ErpFund</summary>
        public global::System.Int64 Id { get; }

        ///<summary>The date from when the value is available for use.</summary>
        public global::System.String? StartDate { get; }

        ///<summary>Level below the top for a ErpFund that is part of a reporting hierarchy.</summary>
        public global::System.Int32? HierarchyDepth { get; }

        ///<summary>The ErpFund which is the immediate parent of this one.Will be undefined if the ErpFund has no parent.</summary>
        public global::StrawberryShake.EntityId? Parent { get; }
    }

    ///<summary>The Entity segment identifies the major UC system organizational units. These units generally require their own complete, separately audited financial statements to comply with external, regulatory reporting requirements (e.g., external audits, tax reporting), which cannot achieve compliance by using the audited financial statements issued by the Office of the President. Entity, however, will also provide high level management and operational reports.The balancing segment designation in Oracle Financials Cloud allows for net position (e.g., fund balance) to be calculated at the Entity level.Entities at all levels have unique reporting and/or external auditing needs that can only be met with an Entity level designation (e.g., UC Davis Health).**FAU Value Comparison:**The Entity segment most closely aligns with the KFS Chart (e.g. 3, H, L, P).</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpEntityEntity
    {
        public ErpEntityEntity(global::System.String code = default !, global::System.String name = default !)
        {
            Code = code;
            Name = name;
        }

        ///<summary>Unique identifier of an ErpEntity</summary>
        public global::System.String Code { get; }

        ///<summary>Descriptive name of an ErpEntity</summary>
        public global::System.String Name { get; }
    }

    ///<summary>For clarity between the CoA Account segment and the current KFS Account, we will refer to the CoA segment as "Natural Account", a commonly used accounting term.The (Natural) Account segment categorizes the nature of the transaction being recorded. The transaction is either revenue-producing, an expenditure, an asset that is owned, or a liability that is owed. Additionally, Account maintains Net Position for Entities and Funds.(Natural) Account values will generally be shared across Financial Departments to provide consistency in operational and management reporting for UC Davis.**FAU Value Comparison:**The (Natural) Account segment most closely aligns with the KFS Object Code.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpAccountEntity
    {
        public ErpAccountEntity(global::System.String code = default !, global::System.String name = default !)
        {
            Code = code;
            Name = name;
        }

        ///<summary>Unique identifier of an ErpAccount</summary>
        public global::System.String Code { get; }

        ///<summary>Descriptive name of an ErpAccount</summary>
        public global::System.String Name { get; }
    }

    ///<summary>The Purpose segment tracks the purpose of the transaction, such as NACUBO-defined functional expense classification and mission.NACUBO classification data is utilized for far-reaching external reporting (e.g., institution ranking). This field is also essential for compliance with federal cost principles and financial statement reporting requiring expenditures be displayed by functional class.**FAU Value Comparison:**The Purpose segment most closely aligns with the HEFC (Higher Ed. Function Code) attribute of the KFS Account.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpPurposeEntity
    {
        public ErpPurposeEntity(global::System.String code = default !, global::System.String name = default !)
        {
            Code = code;
            Name = name;
        }

        ///<summary>Unique identifier of an ErpPurpose</summary>
        public global::System.String Code { get; }

        ///<summary>Descriptive name of an ErpPurpose</summary>
        public global::System.String Name { get; }
    }

    ///<summary>The Task identifies the activities used to further breakdown a PPM project. Every project MUST have at least one Task.  The number of tasks will vary by type of project.**Roll-up relationship to the new Chart of Accounts in the General Ledger:*** The Task value will NOT roll up to the Chart of Accounts. Task values will only be used in the PPM module.* Internal rules within the Oracle PPM module will be used to map the task to components of the GL Chart of Accounts which are not directly mapped to other components of the POET(AF) segments.**Examples:*** Design* Construction* Data Gathering &amp; Analysis</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskEntity
    {
        public PpmTaskEntity(global::System.String taskNumber = default !, global::System.String name = default !, global::System.Boolean billable = default !, global::System.Boolean chargeable = default !, global::System.Boolean eligibleForUse = default !, global::System.String? glPostingProgramCode = default !, global::System.String? glPostingPurposeCode = default !, global::System.String? glPostingFundCode = default !, global::System.String? glPostingActivityCode = default !, global::System.Int64 id = default !, global::System.Int64 projectId = default !)
        {
            TaskNumber = taskNumber;
            Name = name;
            Billable = billable;
            Chargeable = chargeable;
            EligibleForUse = eligibleForUse;
            GlPostingProgramCode = glPostingProgramCode;
            GlPostingPurposeCode = glPostingPurposeCode;
            GlPostingFundCode = glPostingFundCode;
            GlPostingActivityCode = glPostingActivityCode;
            Id = id;
            ProjectId = projectId;
        }

        ///<summary>Task Number: The number of a task.</summary>
        public global::System.String TaskNumber { get; }

        ///<summary>Task Name: The name of the task. A task is a subdivision of the project work. Each project can have a set of top tasks and a hierarchy of subtasks below each top task.</summary>
        public global::System.String Name { get; }

        ///<summary>Billable: Indicates that transactions charged to that task can be billed to customers.</summary>
        public global::System.Boolean Billable { get; }

        ///<summary>Chargeable: Indicates that something is eligible to be charged to a task.</summary>
        public global::System.Boolean Chargeable { get; }

        ///<summary>Returns whether this PpmTask is valid to use on transactional documents for the given accounting date.  If not provided, the date will be defaulted to the current date.To be eligible for use, the PpmTask must:* Be chargeable* Be a lowestLevelTask* Have a taskStartDate and taskFinishDate range which includes the given accountingDate</summary>
        public global::System.Boolean EligibleForUse { get; }

        ///<summary>GL Program used during subledger accounting jobs to post GL entries when costs are recorded against this task.</summary>
        public global::System.String? GlPostingProgramCode { get; }

        ///<summary>GL Purpose  used during subledger accounting jobs to post GL entries when costs are recorded against this task.</summary>
        public global::System.String? GlPostingPurposeCode { get; }

        ///<summary>GL Fund used during subledger accounting jobs to post GL entries when costs are recorded against this task.</summary>
        public global::System.String? GlPostingFundCode { get; }

        ///<summary>GL Activity used during subledger accounting jobs to post GL entries when costs are recorded against this task.</summary>
        public global::System.String? GlPostingActivityCode { get; }

        ///<summary>Task ID: Unique identifier of the project task.</summary>
        public global::System.Int64 Id { get; }

        ///<summary>The project that the task is linked to</summary>
        public global::System.Int64 ProjectId { get; }
    }

    ///<summary>The SCM purchasing category represent the type of item being paid for on an invoice payment.The Oracle Purchasing category is the conceptual replacement for the KFS Commodity Code.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategoryEntity
    {
        public ScmPurchasingCategoryEntity(global::System.Int64 id = default !, global::System.String code = default !, global::System.String name = default !, global::System.String? description = default !, global::System.String? categoryContentCode = default !, global::System.DateTime? startDateActive = default !, global::System.DateTime? endDateActive = default !, global::System.Boolean enabled = default !, global::System.DateTimeOffset lastUpdateDateTime = default !, global::System.String? lastUpdateUserId = default !)
        {
            Id = id;
            Code = code;
            Name = name;
            Description = description;
            CategoryContentCode = categoryContentCode;
            StartDateActive = startDateActive;
            EndDateActive = endDateActive;
            Enabled = enabled;
            LastUpdateDateTime = lastUpdateDateTime;
            LastUpdateUserId = lastUpdateUserId;
        }

        ///<summary>Unique identifier of the Category Code</summary>
        public global::System.Int64 Id { get; }

        ///<summary>A category is used to manage the catalog hierarchy. Items are assigned to categories in the catalog.</summary>
        public global::System.String Code { get; }

        ///<summary>Name of the purchasing category.  This is used on the SCM Requisition interface.</summary>
        public global::System.String Name { get; }

        ///<summary>Description of the purchasing category.</summary>
        public global::System.String? Description { get; }

        ///<summary>Category Content Code.</summary>
        public global::System.String? CategoryContentCode { get; }

        ///<summary>The date from when the value is available for use.</summary>
        public global::System.DateTime? StartDateActive { get; }

        ///<summary>The date till which the value is available for use.</summary>
        public global::System.DateTime? EndDateActive { get; }

        ///<summary>Indicates that the Category is enabled.</summary>
        public global::System.Boolean Enabled { get; }

        ///<summary>Timestamp this record was last updated in the financial system.</summary>
        public global::System.DateTimeOffset LastUpdateDateTime { get; }

        ///<summary>User ID of the person who last updated this record.</summary>
        public global::System.String? LastUpdateUserId { get; }
    }

    ///<summary>The Expenditure Type identifies the natural classification of the expense transaction being recorded.**Roll-up relationship to the Chart of Accounts in the General Ledger:*** The Expenditure Type value will roll up to the (Natural) Account segment in the Chart of Accounts.* The first 6 characters of the Expenditure Type value will correspond with the (Natural) Account value it rolls up to.**Examples:*** Salary* Fringe Benefits* Consulting Services* Travel</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeEntity
    {
        public PpmExpenditureTypeEntity(global::System.Int64 id = default !, global::System.String code = default !, global::System.String name = default !)
        {
            Id = id;
            Code = code;
            Name = name;
        }

        ///<summary>Expenditure Type ID: Unique identifier of the expenditure type.</summary>
        public global::System.Int64 Id { get; }

        ///<summary>Expenditure Type Code: The code of the Expenditure Type.</summary>
        public global::System.String Code { get; }

        ///<summary>Expenditure Type: Name of the expenditure type.</summary>
        public global::System.String Name { get; }
    }

    ///<summary>The Expenditure Organization identifies the organization that is incurring the expense and revenue. This may NOT be the same as the organization that owns the project.**Roll-up relationship to the new Chart of Accounts in the General Ledger:*** The Expenditure Organization value will roll up to the Financial Department segment of the Chart of Accounts.**Examples:*** Computer Science* Plant Sciences</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationEntity
    {
        public PpmOrganizationEntity(global::System.Int64 id = default !, global::System.String code = default !, global::System.String name = default !)
        {
            Id = id;
            Code = code;
            Name = name;
        }

        ///<summary>Organization ID: Unique identifier of the Organization.  Internal to Oracle.</summary>
        public global::System.Int64 Id { get; }

        ///<summary>Organization Code: The code of the Organization.</summary>
        public global::System.String Code { get; }

        ///<summary>Organization Name: Name of the Organization</summary>
        public global::System.String Name { get; }
    }

    ///<summary>The Project identifies the planned work or activity to be completed over a period of time and intended to achieve a particular goal.**Roll-up relationship to the new Chart of Accounts (CoA) in the General Ledger:*** The POET(AF) Project value will roll up to the Project segment of the Chart of Accounts.* PPM Project values and CoA Project segment values will be the same**Examples:*** Capital Projects* Sponsored Projects* Faculty Projects</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectEntity
    {
        public PpmProjectEntity(global::System.Int64 id = default !, global::System.String projectNumber = default !, global::System.String name = default !)
        {
            Id = id;
            ProjectNumber = projectNumber;
            Name = name;
        }

        ///<summary>Project ID: Unique identifier of the project.  Internal to Oracle.</summary>
        public global::System.Int64 Id { get; }

        ///<summary>Project Number: Number of the project that is being created.  This will match the GL Project used to record costs to the ledger.</summary>
        public global::System.String ProjectNumber { get; }

        ///<summary>Project Name: Name of the project that is being created.</summary>
        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParentsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.DeptParentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParentsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IDeptParentsResult);
        public DeptParentsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeptParentsResultInfo info)
            {
                return new DeptParentsResult(MapIDeptParents_ErpFinancialDepartment(info.ErpFinancialDepartment, snapshot));
            }

            throw new global::System.ArgumentException("DeptParentsResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment? MapIDeptParents_ErpFinancialDepartment(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParentsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeptParentsResultInfo(global::StrawberryShake.EntityId? erpFinancialDepartment, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ErpFinancialDepartment = erpFinancialDepartment;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a single ErpFinancialDepartment by code.  Returns undefined if does not exist.
        /// </summary>
        public global::StrawberryShake.EntityId? ErpFinancialDepartment { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeptParentsResultInfo(ErpFinancialDepartment, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_ErpFinancialDepartment(entity.Code, entity.Name, entity.Enabled, MapIDeptParents_ErpFinancialDepartment_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent? MapIDeptParents_ErpFinancialDepartment_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment(entity.Code, entity.Name, MapIDeptParents_ErpFinancialDepartment_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment(entity.Code, entity.Name, MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment(entity.Code, entity.Name, MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment(entity.Code, entity.Name, MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment(entity.Code, entity.Name, MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment(entity.Code, entity.Name, MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment(entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpInstitutionLocationSearchResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ErpInstitutionLocationSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ErpInstitutionLocationSearchResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IErpInstitutionLocationSearchResult);
        public ErpInstitutionLocationSearchResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ErpInstitutionLocationSearchResultInfo info)
            {
                return new ErpInstitutionLocationSearchResult(MapNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch(info.ErpInstitutionLocationSearch, snapshot));
            }

            throw new global::System.ArgumentException("ErpInstitutionLocationSearchResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch MapNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch(global::AggieEnterpriseApi.State.ErpInstitutionLocationSearchResultsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IErpInstitutionLocationSearch_ErpInstitutionLocationSearch returnValue = default !;
            if (data.__typename.Equals("ErpInstitutionLocationSearchResults", global::System.StringComparison.Ordinal))
            {
                returnValue = new ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_ErpInstitutionLocationSearchResults(MapNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata(data.Metadata ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch_DataNonNullableArray(data.Data ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata MapNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata(global::AggieEnterpriseApi.State.SearchResultMetadataData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata returnValue = default !;
            if (data.__typename.Equals("SearchResultMetadata", global::System.StringComparison.Ordinal))
            {
                returnValue = new ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata_SearchResultMetadata(data.Sort, data.Limit, data.ReturnedResultCount ?? throw new global::System.ArgumentNullException(), data.StartIndex ?? throw new global::System.ArgumentNullException(), data.NextStartIndex, data.TotalResultCount);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data> MapNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch_DataNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ErpInstitutionLocationData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var erpInstitutionLocations = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data>();
            foreach (global::AggieEnterpriseApi.State.ErpInstitutionLocationData child in list)
            {
                erpInstitutionLocations.Add(MapNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data(child, snapshot));
            }

            return erpInstitutionLocations;
        }

        private global::AggieEnterpriseApi.IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data MapNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data(global::AggieEnterpriseApi.State.ErpInstitutionLocationData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data returnValue = default !;
            if (data.__typename.Equals("ErpInstitutionLocation", global::System.StringComparison.Ordinal))
            {
                returnValue = new ErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data_ErpInstitutionLocation(data.LocationId ?? throw new global::System.ArgumentNullException(), data.LocationCode ?? throw new global::System.ArgumentNullException(), data.AddressLine1 ?? throw new global::System.ArgumentNullException(), data.AddressLine2, data.AddressLine3, data.AddressLine4, data.City ?? throw new global::System.ArgumentNullException(), data.State, data.PostalCode, data.ReceivingSite ?? throw new global::System.ArgumentNullException(), data.DeliverySite ?? throw new global::System.ArgumentNullException(), data.Enabled ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpInstitutionLocationSearchResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ErpInstitutionLocationSearchResultInfo(global::AggieEnterpriseApi.State.ErpInstitutionLocationSearchResultsData erpInstitutionLocationSearch, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ErpInstitutionLocationSearch = erpInstitutionLocationSearch;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Search for ErpInstitutionLocation objects by multiple properties.
        /// See the ErpInstitutionLocationFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.State.ErpInstitutionLocationSearchResultsData ErpInstitutionLocationSearch { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ErpInstitutionLocationSearchResultInfo(ErpInstitutionLocationSearch, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpUnitOfMeasureSearchResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ErpUnitOfMeasureSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ErpUnitOfMeasureSearchResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IErpUnitOfMeasureSearchResult);
        public ErpUnitOfMeasureSearchResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ErpUnitOfMeasureSearchResultInfo info)
            {
                return new ErpUnitOfMeasureSearchResult(MapNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch(info.ErpUnitOfMeasureSearch, snapshot));
            }

            throw new global::System.ArgumentException("ErpUnitOfMeasureSearchResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch MapNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch(global::AggieEnterpriseApi.State.ErpUnitOfMeasureSearchResultsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch returnValue = default !;
            if (data.__typename.Equals("ErpUnitOfMeasureSearchResults", global::System.StringComparison.Ordinal))
            {
                returnValue = new ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearchResults(MapNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata(data.Metadata ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_DataNonNullableArray(data.Data ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata MapNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata(global::AggieEnterpriseApi.State.SearchResultMetadataData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata returnValue = default !;
            if (data.__typename.Equals("SearchResultMetadata", global::System.StringComparison.Ordinal))
            {
                returnValue = new ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata_SearchResultMetadata(data.Sort, data.Limit, data.ReturnedResultCount ?? throw new global::System.ArgumentNullException(), data.StartIndex ?? throw new global::System.ArgumentNullException(), data.NextStartIndex, data.TotalResultCount);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data> MapNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_DataNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ErpUnitOfMeasureData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var erpUnitOfMeasures = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data>();
            foreach (global::AggieEnterpriseApi.State.ErpUnitOfMeasureData child in list)
            {
                erpUnitOfMeasures.Add(MapNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data(child, snapshot));
            }

            return erpUnitOfMeasures;
        }

        private global::AggieEnterpriseApi.IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data MapNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data(global::AggieEnterpriseApi.State.ErpUnitOfMeasureData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data returnValue = default !;
            if (data.__typename.Equals("ErpUnitOfMeasure", global::System.StringComparison.Ordinal))
            {
                returnValue = new ErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data_ErpUnitOfMeasure(data.UomCode, data.Name);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpUnitOfMeasureSearchResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ErpUnitOfMeasureSearchResultInfo(global::AggieEnterpriseApi.State.ErpUnitOfMeasureSearchResultsData erpUnitOfMeasureSearch, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ErpUnitOfMeasureSearch = erpUnitOfMeasureSearch;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Search for ErpUnitOfMeasure objects by multiple properties.
        /// See the ErpUnitOfMeasureFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.State.ErpUnitOfMeasureSearchResultsData ErpUnitOfMeasureSearch { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ErpUnitOfMeasureSearchResultInfo(ErpUnitOfMeasureSearch, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParentsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.FundParentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_ErpFund> _fundParents_ErpFund_ErpFundFromErpFundEntityMapper;
        public FundParentsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_ErpFund> fundParents_ErpFund_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_ErpFundFromErpFundEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IFundParentsResult);
        public FundParentsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FundParentsResultInfo info)
            {
                return new FundParentsResult(MapIFundParents_ErpFund(info.ErpFund, snapshot));
            }

            throw new global::System.ArgumentException("FundParentsResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund? MapIFundParents_ErpFund(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParentsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FundParentsResultInfo(global::StrawberryShake.EntityId? erpFund, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ErpFund = erpFund;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a single ErpFund by code.  Returns undefined if does not exist
        /// </summary>
        public global::StrawberryShake.EntityId? ErpFund { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FundParentsResultInfo(ErpFund, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_ErpFund> _fundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_ErpFund> fundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_ErpFund(entity.Code, entity.Name, entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent? MapIFundParents_ErpFund_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_Parent_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_Parent_Parent_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_Parent_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.GlJournalRequestResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GlJournalRequestResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IGlJournalRequestResult);
        public GlJournalRequestResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GlJournalRequestResultInfo info)
            {
                return new GlJournalRequestResult(MapNonNullableIGlJournalRequest_GlJournalRequest(info.GlJournalRequest, snapshot));
            }

            throw new global::System.ArgumentException("GlJournalRequestResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest MapNonNullableIGlJournalRequest_GlJournalRequest(global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlJournalRequest_GlJournalRequest returnValue = default !;
            if (data.__typename.Equals("GlJournalRequestStatusOutput", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput(MapNonNullableIGlJournalRequest_GlJournalRequest_RequestStatus(data.RequestStatus ?? throw new global::System.ArgumentNullException(), snapshot), MapIGlJournalRequest_GlJournalRequest_ValidationResults(data.ValidationResults, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_RequestStatus MapNonNullableIGlJournalRequest_GlJournalRequest_RequestStatus(global::AggieEnterpriseApi.State.ActionRequestStatusData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlJournalRequest_GlJournalRequest_RequestStatus returnValue = default !;
            if (data.__typename.Equals("ActionRequestStatus", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus(data.RequestId, data.ConsumerId ?? throw new global::System.ArgumentNullException(), data.RequestDateTime ?? throw new global::System.ArgumentNullException(), data.RequestStatus ?? throw new global::System.ArgumentNullException(), data.OperationName ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_ValidationResults? MapIGlJournalRequest_GlJournalRequest_ValidationResults(global::AggieEnterpriseApi.State.ValidationResponseData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGlJournalRequest_GlJournalRequest_ValidationResults returnValue = default !;
            if (data?.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse(data.ErrorMessages, data.MessageProperties);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GlJournalRequestResultInfo(global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData glJournalRequest, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GlJournalRequest = glJournalRequest;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Requests that a Journal Voucher and/or PPM Costing file be uploaded to Oracle.
        /// 
        /// The journal voucher is the primary interface for loading transactions into Oracle from boundary systems.  It is used regardless of whether the expenses are costs which can be applied to the general ledger or must be expensed to the PPM sub-ledger.  The data model in the request allows for all fields which might be needed for GL or PPM transactions to be provided.  However, it is up to the caller to know and fill out the fields properly.  Where possible, the API will reject invalid data prior to it being sent to Oracle.
        /// 
        /// This API replaces the KFS GL Collector process.  While the valid values of the FAU components (now called chartstring segments) have changed, the basic concepts of feeding transactional data to the financial system have not.  As always, transactions submitted to the GL must be balanced between debits and credits.  Valid values must be used for certain fields, and fields have content and length limits.
        /// 
        /// The correct values to use for chartstring segments is out of scope for this documentation.  This API is the mechanism by which you submit values already determined to be functionally correct to the financial system.  Other operations on this server provide data retrieval and validation tools to support generation of correct data payloads for the API.
        /// 
        /// Please see below in this document for examples of payloads into this API.
        /// 
        /// #### Supporting Operations
        /// 
        /// Other operations which should be used to pre-validate chartstring segments are below.  Please see <https: / / financeandbusiness.ucdavis.edu / aggie-enterprise / chart-of-accounts / redesign> for information about each of these segments.
        /// 
        /// * [`erpEntity`]({{Queries.erpEntity}})
        /// * [`erpFund`]({{Queries.erpFund}})
        /// * [`erpFinancialDepartment`]({{Queries.erpFinancialDepartment}})
        /// * [`erpAccount`]({{Queries.erpAccount}})
        /// * [`erpPurpose`]({{Queries.erpPurpose}})
        /// * [`erpProject`]({{Queries.erpProject}})
        /// * [`erpProgram`]({{Queries.erpProgram}})
        /// * [`erpActivity`]({{Queries.erpActivity}})
        /// 
        /// For validating combinations, the following two operations are provided, differing only in their input format.
        /// 
        /// * [`glValidateChartSegments`]({{Queries.glValidateChartSegments}})
        /// * [`glValidateChartstring`]({{Queries.glValidateChartstring}})
        /// 
        /// #### Managed Project Cost Entries (PPM/POET)
        /// 
        /// In addition to the standard GL-type of transaction which aligns with the KFS general ledger, Oracle Financials also utilizes a sub-ledger for tracking costs against managed projects.  This loosely matches contracts and grants (award-based) accounts from KFS, but PPM (Project and Portfolio Management) encompasses more than that.
        /// 
        /// For expenses (or income) which are to be recorded against these managed projects, the expense must be recorded in the sub-ledger first, using a different set of chartstring values.  This interface allows you to provide both GL and PPM sub-ledger transactions in the same payload.  (Any attempt to record transactions against a managed project directly (using GL segments) will be rejected.)
        /// 
        /// For PPM, you must use a different set of input strings on the journal line, utilizing the 4 fields below (all required):
        /// 
        /// * `p`roject
        /// * `o`rganization (same values as `ErpFinancialDepartment`)
        /// * `e`xpenditureType (same values as `ErpAccount`)
        /// * `t`ask
        /// 
        /// Tasks are child records to each project.  You can obtain the list of valid tasks for any project by referencing the `PpmProject.tasks` property.
        /// 
        /// There are also the two segments listed below.  For API-based use, the framework will pull the correct award and funding source for any sponsored projects.  For file-based submissions, the default values must be included by querying from the `ppmProject` operation.  You can check whether you need to include these by referencing the `sponsoredProject` property on the `PpmProject`.
        /// 
        /// * award (only for sponsored projects)
        /// * fundingSource (only for sponsored projects)
        /// 
        /// As with the GL segments, the API provides the operations below for lookups and validation:
        /// 
        /// * [`ppmProject`]({{Queries.ppmProject}})
        /// * [`ppmExpenditureType`]({{Queries.ppmExpenditureType}})
        /// * [`ppmOrganization`]({{Queries.ppmOrganization}})
        /// * [`ppmSegmentsValidate`]({{Queries.ppmSegmentsValidate}})
        /// 
        /// #### Volume of Data
        /// 
        /// Unlike the use of the KFS ledger, the Oracle Financials general ledger will be a thin ledger.  This means that the level of detail that is allowed to be loaded into the ledger will be limited to summary level information.  It is required that you summarize data down as much as possible to the chartstring segments while being able to retain a link to the source of the transactions.  (E.g., an order number, batch number, or a transaction date)  Submitting lines for each source line item in an external billing system will not be allowed.  Failure to summarize data to an acceptable level will result in loss of API or journal upload access.
        /// 
        /// #### Journal Balancing
        /// 
        /// As with the KFS ledger, journal payloads must balance.  (debit = credits)  Each API payload is a single journal (document number in KFS).
        /// 
        /// While lines with `glSegments` and `ppmSegments` are posted to different ledgers, we can balance across them when creating journals.  Offset entries are required by Oracle to keep the GL in balance until sub-ledger accounting processes execute.  These will be created by the integration framework for you and applied to a central clearing location outside of your department's cost center.
        /// 
        /// #### Basic Use
        /// 
        /// 1. Call the operation (`glJournalRequest`) providing a data payload with the proper structure.  (See [`GlJournalRequestInput`]({{Types.GlJournalRequestInput}}))
        /// 2. GraphQL Server will validate content format and reject if invalid.
        /// 3. API Server will perform request-specific validation against a local copy of Oracle ERP data.
        /// 4. A failure in either of these initial validations will result in an error response with no request being generated.
        /// 5. Passing validation will save the request to allow for pickup by the integration platform for processing.
        /// 6. A request tracking ID will be generated and returned to allow for the consumer to check on the status of the request and obtain results when completed.
        /// 7. At a later time, use the generated request tracking ID against the [`glJournalRequestStatus`]({{Queries.glJournalRequestStatus}}) operation to determine if the request was processed successfully
        /// </summary>
        public global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData GlJournalRequest { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GlJournalRequestResultInfo(GlJournalRequest, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.GlJournalRequestStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GlJournalRequestStatusResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IGlJournalRequestStatusResult);
        public GlJournalRequestStatusResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GlJournalRequestStatusResultInfo info)
            {
                return new GlJournalRequestStatusResult(MapIGlJournalRequestStatus_GlJournalRequestStatus(info.GlJournalRequestStatus, snapshot));
            }

            throw new global::System.ArgumentException("GlJournalRequestStatusResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus? MapIGlJournalRequestStatus_GlJournalRequestStatus(global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGlJournalRequestStatus_GlJournalRequestStatus returnValue = default !;
            if (data?.__typename.Equals("GlJournalRequestStatusOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput(MapNonNullableIGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus(data.RequestStatus ?? throw new global::System.ArgumentNullException(), snapshot), MapIGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult(data.ProcessingResult, snapshot), MapIGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults(data.ValidationResults, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus MapNonNullableIGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus(global::AggieEnterpriseApi.State.ActionRequestStatusData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus returnValue = default !;
            if (data.__typename.Equals("ActionRequestStatus", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus(data.StatusRequestPayload, data.OperationName ?? throw new global::System.ArgumentNullException(), data.RequestStatus ?? throw new global::System.ArgumentNullException(), data.RequestDateTime ?? throw new global::System.ArgumentNullException(), data.LastStatusDateTime ?? throw new global::System.ArgumentNullException(), data.ErrorMessages, data.ProcessedDateTime, data.BoundaryApplicationName ?? throw new global::System.ArgumentNullException(), data.ConsumerId ?? throw new global::System.ArgumentNullException(), data.ConsumerNotes, data.ConsumerReferenceId ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult? MapIGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult(global::AggieEnterpriseApi.State.ProcessingResultData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult returnValue = default !;
            if (data?.__typename.Equals("ProcessingResult", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult(data.Status ?? throw new global::System.ArgumentNullException(), data.ProcessedDateTime);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults? MapIGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults(global::AggieEnterpriseApi.State.ValidationResponseData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults returnValue = default !;
            if (data?.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse(data.Valid ?? throw new global::System.ArgumentNullException(), data.ErrorMessages);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GlJournalRequestStatusResultInfo(global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData? glJournalRequestStatus, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GlJournalRequestStatus = glJournalRequestStatus;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get the status of a previously submitted journal voucher request by the API-assigned request ID.
        /// </summary>
        public global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData? GlJournalRequestStatus { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GlJournalRequestStatusResultInfo(GlJournalRequestStatus, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetailsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.CoaDetailsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpEntityEntity, CoaDetails_ErpEntity_ErpEntity> _coaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, CoaDetails_ErpFund_ErpFund> _coaDetails_ErpFund_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment> _coaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpAccountEntity, CoaDetails_ErpAccount_ErpAccount> _coaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpPurposeEntity, CoaDetails_ErpPurpose_ErpPurpose> _coaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper;
        public CoaDetailsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpEntityEntity, CoaDetails_ErpEntity_ErpEntity> coaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, CoaDetails_ErpFund_ErpFund> coaDetails_ErpFund_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment> coaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpAccountEntity, CoaDetails_ErpAccount_ErpAccount> coaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpPurposeEntity, CoaDetails_ErpPurpose_ErpPurpose> coaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _coaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper = coaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper ?? throw new global::System.ArgumentNullException(nameof(coaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper));
            _coaDetails_ErpFund_ErpFundFromErpFundEntityMapper = coaDetails_ErpFund_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(coaDetails_ErpFund_ErpFundFromErpFundEntityMapper));
            _coaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = coaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(coaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _coaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper = coaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper ?? throw new global::System.ArgumentNullException(nameof(coaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper));
            _coaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper = coaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(coaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.ICoaDetailsResult);
        public CoaDetailsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CoaDetailsResultInfo info)
            {
                return new CoaDetailsResult(MapICoaDetails_ErpEntity(info.ErpEntity, snapshot), MapICoaDetails_ErpFund(info.ErpFund, snapshot), MapICoaDetails_ErpFinancialDepartment(info.ErpFinancialDepartment, snapshot), MapICoaDetails_ErpAccount(info.ErpAccount, snapshot), MapICoaDetails_ErpPurpose(info.ErpPurpose, snapshot));
            }

            throw new global::System.ArgumentException("CoaDetailsResultInfo expected.");
        }

        private global::AggieEnterpriseApi.ICoaDetails_ErpEntity? MapICoaDetails_ErpEntity(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpEntity", global::System.StringComparison.Ordinal))
            {
                return _coaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpEntityEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.ICoaDetails_ErpFund? MapICoaDetails_ErpFund(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _coaDetails_ErpFund_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.ICoaDetails_ErpFinancialDepartment? MapICoaDetails_ErpFinancialDepartment(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _coaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.ICoaDetails_ErpAccount? MapICoaDetails_ErpAccount(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpAccount", global::System.StringComparison.Ordinal))
            {
                return _coaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpAccountEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.ICoaDetails_ErpPurpose? MapICoaDetails_ErpPurpose(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpPurpose", global::System.StringComparison.Ordinal))
            {
                return _coaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpPurposeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetailsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CoaDetailsResultInfo(global::StrawberryShake.EntityId? erpEntity, global::StrawberryShake.EntityId? erpFund, global::StrawberryShake.EntityId? erpFinancialDepartment, global::StrawberryShake.EntityId? erpAccount, global::StrawberryShake.EntityId? erpPurpose, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ErpEntity = erpEntity;
            ErpFund = erpFund;
            ErpFinancialDepartment = erpFinancialDepartment;
            ErpAccount = erpAccount;
            ErpPurpose = erpPurpose;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a single ErpEntity by code.  Returns undefined if does not exist
        /// </summary>
        public global::StrawberryShake.EntityId? ErpEntity { get; }

        /// <summary>
        /// Get a single ErpFund by code.  Returns undefined if does not exist
        /// </summary>
        public global::StrawberryShake.EntityId? ErpFund { get; }

        /// <summary>
        /// Get a single ErpFinancialDepartment by code.  Returns undefined if does not exist.
        /// </summary>
        public global::StrawberryShake.EntityId? ErpFinancialDepartment { get; }

        /// <summary>
        /// Get a single ErpAccount by code.  Returns undefined if does not exist
        /// </summary>
        public global::StrawberryShake.EntityId? ErpAccount { get; }

        /// <summary>
        /// Get a single ErpPurpose by code.  Returns undefined if does not exist
        /// </summary>
        public global::StrawberryShake.EntityId? ErpPurpose { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CoaDetailsResultInfo(ErpEntity, ErpFund, ErpFinancialDepartment, ErpAccount, ErpPurpose, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpEntityEntity, CoaDetails_ErpEntity_ErpEntity>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CoaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CoaDetails_ErpEntity_ErpEntity Map(global::AggieEnterpriseApi.State.ErpEntityEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CoaDetails_ErpEntity_ErpEntity(entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpFund_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, CoaDetails_ErpFund_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CoaDetails_ErpFund_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CoaDetails_ErpFund_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CoaDetails_ErpFund_ErpFund(entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CoaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment(entity.Code, entity.Name, entity.EligibleForUse);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpAccountEntity, CoaDetails_ErpAccount_ErpAccount>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CoaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CoaDetails_ErpAccount_ErpAccount Map(global::AggieEnterpriseApi.State.ErpAccountEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CoaDetails_ErpAccount_ErpAccount(entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpPurposeEntity, CoaDetails_ErpPurpose_ErpPurpose>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CoaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CoaDetails_ErpPurpose_ErpPurpose Map(global::AggieEnterpriseApi.State.ErpPurposeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CoaDetails_ErpPurpose_ErpPurpose(entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class KfsConvertAccountResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.KfsConvertAccountResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public KfsConvertAccountResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IKfsConvertAccountResult);
        public KfsConvertAccountResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is KfsConvertAccountResultInfo info)
            {
                return new KfsConvertAccountResult(MapNonNullableIKfsConvertAccount_KfsConvertAccount(info.KfsConvertAccount, snapshot));
            }

            throw new global::System.ArgumentException("KfsConvertAccountResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IKfsConvertAccount_KfsConvertAccount MapNonNullableIKfsConvertAccount_KfsConvertAccount(global::AggieEnterpriseApi.State.KfsConvertAccountOutputData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IKfsConvertAccount_KfsConvertAccount returnValue = default !;
            if (data.__typename.Equals("KfsConvertAccountOutput", global::System.StringComparison.Ordinal))
            {
                returnValue = new KfsConvertAccount_KfsConvertAccount_KfsConvertAccountOutput(data.MappingFound ?? throw new global::System.ArgumentNullException(), MapIKfsConvertAccount_KfsConvertAccount_GlSegments(data.GlSegments, snapshot), MapIKfsConvertAccount_KfsConvertAccount_PpmSegments(data.PpmSegments, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IKfsConvertAccount_KfsConvertAccount_GlSegments? MapIKfsConvertAccount_KfsConvertAccount_GlSegments(global::AggieEnterpriseApi.State.GlCostCenterSegmentsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IKfsConvertAccount_KfsConvertAccount_GlSegments returnValue = default !;
            if (data?.__typename.Equals("GlCostCenterSegments", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new KfsConvertAccount_KfsConvertAccount_GlSegments_GlCostCenterSegments(data.Entity ?? throw new global::System.ArgumentNullException(), data.Fund ?? throw new global::System.ArgumentNullException(), data.Department ?? throw new global::System.ArgumentNullException(), data.Purpose, data.Project, data.Program, data.Activity);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IKfsConvertAccount_KfsConvertAccount_PpmSegments? MapIKfsConvertAccount_KfsConvertAccount_PpmSegments(global::AggieEnterpriseApi.State.PpmCostCenterSegmentsData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IKfsConvertAccount_KfsConvertAccount_PpmSegments returnValue = default !;
            if (data?.__typename.Equals("PpmCostCenterSegments", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new KfsConvertAccount_KfsConvertAccount_PpmSegments_PpmCostCenterSegments(data.Project ?? throw new global::System.ArgumentNullException(), data.Organization ?? throw new global::System.ArgumentNullException(), data.Task ?? throw new global::System.ArgumentNullException(), data.Award, data.FundingSource);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class KfsConvertAccountResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public KfsConvertAccountResultInfo(global::AggieEnterpriseApi.State.KfsConvertAccountOutputData kfsConvertAccount, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            KfsConvertAccount = kfsConvertAccount;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Accepts a chart and account (and optionally a sub account and/or project code) which was converted as part of cutover and returns the cost center portion with matching GL or POET segments needed to record a transaction.  If no match is found when a sub account or project code is provided, the conversion will revert to only using the chart and account.  The attributes used for the returned converted values will be included in the response.
        /// 
        /// In the case of a POET segment response, an array of tasks will be returned.  The data conversion mapping does not contain that information.  At cutover, there will be only one task per project.  However, additional tasks will be added as part of use after go-live.
        /// </summary>
        public global::AggieEnterpriseApi.State.KfsConvertAccountOutputData KfsConvertAccount { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new KfsConvertAccountResultInfo(KfsConvertAccount, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidateResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.PpmStringSegmentsValidateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PpmStringSegmentsValidateResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult);
        public PpmStringSegmentsValidateResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PpmStringSegmentsValidateResultInfo info)
            {
                return new PpmStringSegmentsValidateResult(MapNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate(info.PpmStringSegmentsValidate, snapshot));
            }

            throw new global::System.ArgumentException("PpmStringSegmentsValidateResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate MapNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate(global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPpmStringSegmentsValidate_PpmStringSegmentsValidate returnValue = default !;
            if (data.__typename.Equals("PpmSegmentsValidateOutput", global::System.StringComparison.Ordinal))
            {
                returnValue = new PpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput(MapNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse(data.ValidationResponse ?? throw new global::System.ArgumentNullException(), snapshot), data.SegmentString);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse MapNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse(global::AggieEnterpriseApi.State.ValidationResponseData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse returnValue = default !;
            if (data.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal))
            {
                returnValue = new PpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse(data.Valid ?? throw new global::System.ArgumentNullException(), data.ErrorMessages, data.MessageProperties);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidateResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PpmStringSegmentsValidateResultInfo(global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData ppmStringSegmentsValidate, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PpmStringSegmentsValidate = ppmStringSegmentsValidate;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Validates that the given PPM chartstring is most likely valid for posting
        /// to the Oracle ERP PPM Module sub-ledger.  Individual non-blank elements will be checked
        /// for current validity.
        /// 
        /// If no date is passed, today's date will be assumed.
        /// 
        /// This operation will return a fully populated set of segments.
        /// 
        /// This operation will return the validation result and the segments as parsed out into their component fields.
        /// </summary>
        public global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData PpmStringSegmentsValidate { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PpmStringSegmentsValidateResultInfo(PpmStringSegmentsValidate, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.PpmSegmentsValidateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PpmSegmentsValidateResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IPpmSegmentsValidateResult);
        public PpmSegmentsValidateResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PpmSegmentsValidateResultInfo info)
            {
                return new PpmSegmentsValidateResult(MapNonNullableIPpmSegmentsValidate_PpmSegmentsValidate(info.PpmSegmentsValidate, snapshot));
            }

            throw new global::System.ArgumentException("PpmSegmentsValidateResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate MapNonNullableIPpmSegmentsValidate_PpmSegmentsValidate(global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPpmSegmentsValidate_PpmSegmentsValidate returnValue = default !;
            if (data.__typename.Equals("PpmSegmentsValidateOutput", global::System.StringComparison.Ordinal))
            {
                returnValue = new PpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput(MapNonNullableIPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse(data.ValidationResponse ?? throw new global::System.ArgumentNullException(), snapshot), data.SegmentString);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse MapNonNullableIPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse(global::AggieEnterpriseApi.State.ValidationResponseData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse returnValue = default !;
            if (data.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal))
            {
                returnValue = new PpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse(data.ErrorMessages, data.MessageProperties, data.Valid ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PpmSegmentsValidateResultInfo(global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData ppmSegmentsValidate, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PpmSegmentsValidate = ppmSegmentsValidate;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Validates that the given set of PPM segments are most likely valid for posting
        /// to the Oracle ERP PPM Module sub-ledger.  Individual non-blank elements will be checked
        /// for current validity.
        /// 
        /// If no date is passed, today's date will be assumed.
        /// 
        /// This operation will return a fully populated set of segments.
        /// </summary>
        public global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData PpmSegmentsValidate { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PpmSegmentsValidateResultInfo(PpmSegmentsValidate, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskByProjectNumberAndTaskNumberResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.PpmTaskByProjectNumberAndTaskNumberResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmTaskEntity, PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTask> _ppmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTaskFromPpmTaskEntityMapper;
        public PpmTaskByProjectNumberAndTaskNumberResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmTaskEntity, PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTask> ppmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTaskFromPpmTaskEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _ppmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTaskFromPpmTaskEntityMapper = ppmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTaskFromPpmTaskEntityMapper ?? throw new global::System.ArgumentNullException(nameof(ppmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTaskFromPpmTaskEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberResult);
        public PpmTaskByProjectNumberAndTaskNumberResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PpmTaskByProjectNumberAndTaskNumberResultInfo info)
            {
                return new PpmTaskByProjectNumberAndTaskNumberResult(MapIPpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber(info.PpmTaskByProjectNumberAndTaskNumber, snapshot));
            }

            throw new global::System.ArgumentException("PpmTaskByProjectNumberAndTaskNumberResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber? MapIPpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("PpmTask", global::System.StringComparison.Ordinal))
            {
                return _ppmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTaskFromPpmTaskEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.PpmTaskEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskByProjectNumberAndTaskNumberResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PpmTaskByProjectNumberAndTaskNumberResultInfo(global::StrawberryShake.EntityId? ppmTaskByProjectNumberAndTaskNumber, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PpmTaskByProjectNumberAndTaskNumber = ppmTaskByProjectNumberAndTaskNumber;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Gets PpmTasks by projectNumber and taskNumber.  Returns undefined if not found
        /// </summary>
        public global::StrawberryShake.EntityId? PpmTaskByProjectNumberAndTaskNumber { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PpmTaskByProjectNumberAndTaskNumberResultInfo(PpmTaskByProjectNumberAndTaskNumber, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTaskFromPpmTaskEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmTaskEntity, PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTask>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTaskFromPpmTaskEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTask Map(global::AggieEnterpriseApi.State.PpmTaskEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTask(entity.TaskNumber, entity.Name, entity.Billable, entity.Chargeable, entity.EligibleForUse, entity.GlPostingProgramCode, entity.GlPostingPurposeCode, entity.GlPostingFundCode, entity.GlPostingActivityCode);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionCreateResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ScmPurchaseRequisitionCreateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ScmPurchaseRequisitionCreateResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateResult);
        public ScmPurchaseRequisitionCreateResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ScmPurchaseRequisitionCreateResultInfo info)
            {
                return new ScmPurchaseRequisitionCreateResult(MapNonNullableIScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate(info.ScmPurchaseRequisitionCreate, snapshot));
            }

            throw new global::System.ArgumentException("ScmPurchaseRequisitionCreateResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate MapNonNullableIScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate(global::AggieEnterpriseApi.State.ScmPurchaseRequisitionRequestStatusOutputData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate returnValue = default !;
            if (data.__typename.Equals("ScmPurchaseRequisitionRequestStatusOutput", global::System.StringComparison.Ordinal))
            {
                returnValue = new ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionRequestStatusOutput(MapNonNullableIScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus(data.RequestStatus ?? throw new global::System.ArgumentNullException(), snapshot), MapIScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults(data.ValidationResults, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus MapNonNullableIScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus(global::AggieEnterpriseApi.State.ActionRequestStatusData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus returnValue = default !;
            if (data.__typename.Equals("ActionRequestStatus", global::System.StringComparison.Ordinal))
            {
                returnValue = new ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus_ActionRequestStatus(data.RequestId, data.RequestStatus ?? throw new global::System.ArgumentNullException(), data.ProcessedDateTime, data.ErrorMessages);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults? MapIScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults(global::AggieEnterpriseApi.State.ValidationResponseData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults returnValue = default !;
            if (data?.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults_ValidationResponse(data.Valid ?? throw new global::System.ArgumentNullException(), data.ErrorMessages, data.MessageProperties);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionCreateResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ScmPurchaseRequisitionCreateResultInfo(global::AggieEnterpriseApi.State.ScmPurchaseRequisitionRequestStatusOutputData scmPurchaseRequisitionCreate, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ScmPurchaseRequisitionCreate = scmPurchaseRequisitionCreate;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Requests that a Purchase Requisition be uploaded to Oracle.
        /// </summary>
        public global::AggieEnterpriseApi.State.ScmPurchaseRequisitionRequestStatusOutputData ScmPurchaseRequisitionCreate { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ScmPurchaseRequisitionCreateResultInfo(ScmPurchaseRequisitionCreate, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionRequestStatusResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ScmPurchaseRequisitionRequestStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ScmPurchaseRequisitionRequestStatusResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusResult);
        public ScmPurchaseRequisitionRequestStatusResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ScmPurchaseRequisitionRequestStatusResultInfo info)
            {
                return new ScmPurchaseRequisitionRequestStatusResult(MapIScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus(info.ScmPurchaseRequisitionRequestStatus, snapshot));
            }

            throw new global::System.ArgumentException("ScmPurchaseRequisitionRequestStatusResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus? MapIScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus(global::AggieEnterpriseApi.State.ScmPurchaseRequisitionRequestStatusOutputData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus returnValue = default !;
            if (data?.__typename.Equals("ScmPurchaseRequisitionRequestStatusOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatusOutput(MapNonNullableIScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus(data.RequestStatus ?? throw new global::System.ArgumentNullException(), snapshot), MapIScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults(data.ValidationResults, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus MapNonNullableIScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus(global::AggieEnterpriseApi.State.ActionRequestStatusData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus returnValue = default !;
            if (data.__typename.Equals("ActionRequestStatus", global::System.StringComparison.Ordinal))
            {
                returnValue = new ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus_ActionRequestStatus(data.RequestId, data.ConsumerTrackingId ?? throw new global::System.ArgumentNullException(), data.ConsumerReferenceId ?? throw new global::System.ArgumentNullException(), data.ConsumerNotes, data.RequestDateTime ?? throw new global::System.ArgumentNullException(), data.RequestStatus ?? throw new global::System.ArgumentNullException(), data.LastStatusDateTime ?? throw new global::System.ArgumentNullException(), data.ProcessedDateTime, data.ErrorMessages);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults? MapIScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults(global::AggieEnterpriseApi.State.ValidationResponseData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults returnValue = default !;
            if (data?.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults_ValidationResponse(data.Valid ?? throw new global::System.ArgumentNullException(), data.ErrorMessages, data.MessageProperties);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionRequestStatusResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ScmPurchaseRequisitionRequestStatusResultInfo(global::AggieEnterpriseApi.State.ScmPurchaseRequisitionRequestStatusOutputData? scmPurchaseRequisitionRequestStatus, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ScmPurchaseRequisitionRequestStatus = scmPurchaseRequisitionRequestStatus;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get the status of a previously submitted Purchase Requisition request by the API-assigned request ID.
        /// </summary>
        public global::AggieEnterpriseApi.State.ScmPurchaseRequisitionRequestStatusOutputData? ScmPurchaseRequisitionRequestStatus { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ScmPurchaseRequisitionRequestStatusResultInfo(ScmPurchaseRequisitionRequestStatus, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategoryByCodeResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ScmPurchasingCategoryByCodeResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity, ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategory> _scmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper;
        public ScmPurchasingCategoryByCodeResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity, ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategory> scmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _scmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper = scmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(scmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeResult);
        public ScmPurchasingCategoryByCodeResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ScmPurchasingCategoryByCodeResultInfo info)
            {
                return new ScmPurchasingCategoryByCodeResult(MapIScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode(info.ScmPurchasingCategoryByCode, snapshot));
            }

            throw new global::System.ArgumentException("ScmPurchasingCategoryByCodeResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode? MapIScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ScmPurchasingCategory", global::System.StringComparison.Ordinal))
            {
                return _scmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategoryByCodeResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ScmPurchasingCategoryByCodeResultInfo(global::StrawberryShake.EntityId? scmPurchasingCategoryByCode, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ScmPurchasingCategoryByCode = scmPurchasingCategoryByCode;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a single ScmPurchasingCategory by category code.  Returns undefined if does not exist
        /// </summary>
        public global::StrawberryShake.EntityId? ScmPurchasingCategoryByCode { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ScmPurchasingCategoryByCodeResultInfo(ScmPurchasingCategoryByCode, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity, ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategory>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategory Map(global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategory(entity.Id, entity.Code, entity.Name, entity.Description, entity.CategoryContentCode, entity.StartDateActive, entity.EndDateActive, entity.Enabled, entity.LastUpdateDateTime, entity.LastUpdateUserId);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategorySearchResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ScmPurchasingCategorySearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity, ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategory> _scmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper;
        public ScmPurchasingCategorySearchResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity, ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategory> scmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _scmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper = scmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(scmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IScmPurchasingCategorySearchResult);
        public ScmPurchasingCategorySearchResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ScmPurchasingCategorySearchResultInfo info)
            {
                return new ScmPurchasingCategorySearchResult(MapNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch(info.ScmPurchasingCategorySearch, snapshot));
            }

            throw new global::System.ArgumentException("ScmPurchasingCategorySearchResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch MapNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch(global::AggieEnterpriseApi.State.ScmPurchasingCategorySearchResultsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IScmPurchasingCategorySearch_ScmPurchasingCategorySearch returnValue = default !;
            if (data.__typename.Equals("ScmPurchasingCategorySearchResults", global::System.StringComparison.Ordinal))
            {
                returnValue = new ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_ScmPurchasingCategorySearchResults(MapNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata(data.Metadata ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch_DataNonNullableArray(data.Data ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata MapNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata(global::AggieEnterpriseApi.State.SearchResultMetadataData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata returnValue = default !;
            if (data.__typename.Equals("SearchResultMetadata", global::System.StringComparison.Ordinal))
            {
                returnValue = new ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata_SearchResultMetadata(data.Sort, data.Limit, data.ReturnedResultCount ?? throw new global::System.ArgumentNullException(), data.StartIndex ?? throw new global::System.ArgumentNullException(), data.NextStartIndex, data.TotalResultCount);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data> MapNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch_DataNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var scmPurchasingCategorys = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                scmPurchasingCategorys.Add(MapNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data(child, snapshot));
            }

            return scmPurchasingCategorys;
        }

        private global::AggieEnterpriseApi.IScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data MapNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("ScmPurchasingCategory", global::System.StringComparison.Ordinal))
            {
                return _scmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategorySearchResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ScmPurchasingCategorySearchResultInfo(global::AggieEnterpriseApi.State.ScmPurchasingCategorySearchResultsData scmPurchasingCategorySearch, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ScmPurchasingCategorySearch = scmPurchasingCategorySearch;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Search for ScmPurchasingCategory objects by multiple properties.
        /// See the ScmPurchasingCategoryFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.State.ScmPurchasingCategorySearchResultsData ScmPurchasingCategorySearch { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ScmPurchasingCategorySearchResultInfo(ScmPurchasingCategorySearch, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity, ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategory>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategory Map(global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategory(entity.Id, entity.Code, entity.Name, entity.Description, entity.CategoryContentCode, entity.Enabled, entity.StartDateActive, entity.EndDateActive);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierSearchResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ScmSupplierSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public ScmSupplierSearchResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IScmSupplierSearchResult);
        public ScmSupplierSearchResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is ScmSupplierSearchResultInfo info)
            {
                return new ScmSupplierSearchResult(MapNonNullableIScmSupplierSearch_ScmSupplierSearch(info.ScmSupplierSearch, snapshot));
            }

            throw new global::System.ArgumentException("ScmSupplierSearchResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch MapNonNullableIScmSupplierSearch_ScmSupplierSearch(global::AggieEnterpriseApi.State.ScmSupplierSearchResultsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IScmSupplierSearch_ScmSupplierSearch returnValue = default !;
            if (data.__typename.Equals("ScmSupplierSearchResults", global::System.StringComparison.Ordinal))
            {
                returnValue = new ScmSupplierSearch_ScmSupplierSearch_ScmSupplierSearchResults(MapNonNullableIScmSupplierSearch_ScmSupplierSearch_DataNonNullableArray(data.Data ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data> MapNonNullableIScmSupplierSearch_ScmSupplierSearch_DataNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ScmSupplierData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var scmSuppliers = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data>();
            foreach (global::AggieEnterpriseApi.State.ScmSupplierData child in list)
            {
                scmSuppliers.Add(MapNonNullableIScmSupplierSearch_ScmSupplierSearch_Data(child, snapshot));
            }

            return scmSuppliers;
        }

        private global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data MapNonNullableIScmSupplierSearch_ScmSupplierSearch_Data(global::AggieEnterpriseApi.State.ScmSupplierData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IScmSupplierSearch_ScmSupplierSearch_Data returnValue = default !;
            if (data.__typename.Equals("ScmSupplier", global::System.StringComparison.Ordinal))
            {
                returnValue = new ScmSupplierSearch_ScmSupplierSearch_Data_ScmSupplier(data.Name ?? throw new global::System.ArgumentNullException(), data.SupplierNumber ?? throw new global::System.ArgumentNullException(), MapNonNullableIScmSupplierSearch_ScmSupplierSearch_Data_SitesNonNullableArray(data.Sites ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data_Sites> MapNonNullableIScmSupplierSearch_ScmSupplierSearch_Data_SitesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ScmSupplierSiteData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var scmSupplierSites = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data_Sites>();
            foreach (global::AggieEnterpriseApi.State.ScmSupplierSiteData child in list)
            {
                scmSupplierSites.Add(MapNonNullableIScmSupplierSearch_ScmSupplierSearch_Data_Sites(child, snapshot));
            }

            return scmSupplierSites;
        }

        private global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data_Sites MapNonNullableIScmSupplierSearch_ScmSupplierSearch_Data_Sites(global::AggieEnterpriseApi.State.ScmSupplierSiteData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IScmSupplierSearch_ScmSupplierSearch_Data_Sites returnValue = default !;
            if (data.__typename.Equals("ScmSupplierSite", global::System.StringComparison.Ordinal))
            {
                returnValue = new ScmSupplierSearch_ScmSupplierSearch_Data_Sites_ScmSupplierSite(data.SupplierSiteCode ?? throw new global::System.ArgumentNullException(), MapIScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location(data.Location, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location? MapIScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location(global::AggieEnterpriseApi.State.ErpLocationData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location returnValue = default !;
            if (data?.__typename.Equals("ErpLocation", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new ScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location_ErpLocation(data.AddressLine1, data.AddressLine2, data.AddressLine3, data.AddressLine4, data.City, data.State, data.PostalCode);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierSearchResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public ScmSupplierSearchResultInfo(global::AggieEnterpriseApi.State.ScmSupplierSearchResultsData scmSupplierSearch, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ScmSupplierSearch = scmSupplierSearch;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Search for ScmSupplier objects by multiple properties.
        /// See the ScmSupplierFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.State.ScmSupplierSearchResultsData ScmSupplierSearch { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new ScmSupplierSearchResultInfo(ScmSupplierSearch, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeSearchResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.PpmExpenditureTypeSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity, PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureType> _ppmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity, PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureType> _ppmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper;
        public PpmExpenditureTypeSearchResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity, PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureType> ppmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity, PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureType> ppmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _ppmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper = ppmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(ppmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper));
            _ppmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper = ppmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(ppmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IPpmExpenditureTypeSearchResult);
        public PpmExpenditureTypeSearchResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PpmExpenditureTypeSearchResultInfo info)
            {
                return new PpmExpenditureTypeSearchResult(MapIPpmExpenditureTypeSearch_PpmExpenditureTypeByCode(info.PpmExpenditureTypeByCode, snapshot), MapNonNullableIPpmExpenditureTypeSearch_PpmExpenditureTypeSearch(info.PpmExpenditureTypeSearch, snapshot));
            }

            throw new global::System.ArgumentException("PpmExpenditureTypeSearchResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeByCode? MapIPpmExpenditureTypeSearch_PpmExpenditureTypeByCode(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("PpmExpenditureType", global::System.StringComparison.Ordinal))
            {
                return _ppmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch MapNonNullableIPpmExpenditureTypeSearch_PpmExpenditureTypeSearch(global::AggieEnterpriseApi.State.PpmExpenditureTypeSearchResultsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch returnValue = default !;
            if (data.__typename.Equals("PpmExpenditureTypeSearchResults", global::System.StringComparison.Ordinal))
            {
                returnValue = new PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_PpmExpenditureTypeSearchResults(MapNonNullableIPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_DataNonNullableArray(data.Data ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data> MapNonNullableIPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_DataNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var ppmExpenditureTypes = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                ppmExpenditureTypes.Add(MapNonNullableIPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data(child, snapshot));
            }

            return ppmExpenditureTypes;
        }

        private global::AggieEnterpriseApi.IPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data MapNonNullableIPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("PpmExpenditureType", global::System.StringComparison.Ordinal))
            {
                return _ppmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeSearchResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PpmExpenditureTypeSearchResultInfo(global::StrawberryShake.EntityId? ppmExpenditureTypeByCode, global::AggieEnterpriseApi.State.PpmExpenditureTypeSearchResultsData ppmExpenditureTypeSearch, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PpmExpenditureTypeByCode = ppmExpenditureTypeByCode;
            PpmExpenditureTypeSearch = ppmExpenditureTypeSearch;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a single PpmExpenditureType by code.  Returns undefined if does not exist
        /// </summary>
        public global::StrawberryShake.EntityId? PpmExpenditureTypeByCode { get; }

        /// <summary>
        /// Search for PpmExpenditureType objects by multiple properties.
        /// See
        /// See the PpmExpenditureTypeFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.State.PpmExpenditureTypeSearchResultsData PpmExpenditureTypeSearch { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PpmExpenditureTypeSearchResultInfo(PpmExpenditureTypeByCode, PpmExpenditureTypeSearch, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity, PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureType>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureType Map(global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureType(entity.Id, entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity, PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureType>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureType Map(global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureType(entity.Id, entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationSearchResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.PpmOrganizationSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmOrganizationEntity, PpmOrganizationSearch_PpmOrganization_PpmOrganization> _ppmOrganizationSearch_PpmOrganization_PpmOrganizationFromPpmOrganizationEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmOrganizationEntity, PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganization> _ppmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganizationFromPpmOrganizationEntityMapper;
        public PpmOrganizationSearchResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmOrganizationEntity, PpmOrganizationSearch_PpmOrganization_PpmOrganization> ppmOrganizationSearch_PpmOrganization_PpmOrganizationFromPpmOrganizationEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmOrganizationEntity, PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganization> ppmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganizationFromPpmOrganizationEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _ppmOrganizationSearch_PpmOrganization_PpmOrganizationFromPpmOrganizationEntityMapper = ppmOrganizationSearch_PpmOrganization_PpmOrganizationFromPpmOrganizationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(ppmOrganizationSearch_PpmOrganization_PpmOrganizationFromPpmOrganizationEntityMapper));
            _ppmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganizationFromPpmOrganizationEntityMapper = ppmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganizationFromPpmOrganizationEntityMapper ?? throw new global::System.ArgumentNullException(nameof(ppmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganizationFromPpmOrganizationEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IPpmOrganizationSearchResult);
        public PpmOrganizationSearchResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PpmOrganizationSearchResultInfo info)
            {
                return new PpmOrganizationSearchResult(MapIPpmOrganizationSearch_PpmOrganization(info.PpmOrganization, snapshot), MapNonNullableIPpmOrganizationSearch_PpmOrganizationSearch(info.PpmOrganizationSearch, snapshot));
            }

            throw new global::System.ArgumentException("PpmOrganizationSearchResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganization? MapIPpmOrganizationSearch_PpmOrganization(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("PpmOrganization", global::System.StringComparison.Ordinal))
            {
                return _ppmOrganizationSearch_PpmOrganization_PpmOrganizationFromPpmOrganizationEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.PpmOrganizationEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganizationSearch MapNonNullableIPpmOrganizationSearch_PpmOrganizationSearch(global::AggieEnterpriseApi.State.PpmOrganizationSearchResultsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPpmOrganizationSearch_PpmOrganizationSearch returnValue = default !;
            if (data.__typename.Equals("PpmOrganizationSearchResults", global::System.StringComparison.Ordinal))
            {
                returnValue = new PpmOrganizationSearch_PpmOrganizationSearch_PpmOrganizationSearchResults(MapNonNullableIPpmOrganizationSearch_PpmOrganizationSearch_DataNonNullableArray(data.Data ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganizationSearch_Data> MapNonNullableIPpmOrganizationSearch_PpmOrganizationSearch_DataNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var ppmOrganizations = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganizationSearch_Data>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                ppmOrganizations.Add(MapNonNullableIPpmOrganizationSearch_PpmOrganizationSearch_Data(child, snapshot));
            }

            return ppmOrganizations;
        }

        private global::AggieEnterpriseApi.IPpmOrganizationSearch_PpmOrganizationSearch_Data MapNonNullableIPpmOrganizationSearch_PpmOrganizationSearch_Data(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("PpmOrganization", global::System.StringComparison.Ordinal))
            {
                return _ppmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganizationFromPpmOrganizationEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.PpmOrganizationEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationSearchResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PpmOrganizationSearchResultInfo(global::StrawberryShake.EntityId? ppmOrganization, global::AggieEnterpriseApi.State.PpmOrganizationSearchResultsData ppmOrganizationSearch, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PpmOrganization = ppmOrganization;
            PpmOrganizationSearch = ppmOrganizationSearch;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a single PpmOrganization by code.  Returns undefined if does not exist
        /// </summary>
        public global::StrawberryShake.EntityId? PpmOrganization { get; }

        /// <summary>
        /// Search for PpmOrganization objects by multiple properties.
        /// See
        /// See the PpmOrganizationFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.State.PpmOrganizationSearchResultsData PpmOrganizationSearch { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PpmOrganizationSearchResultInfo(PpmOrganization, PpmOrganizationSearch, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationSearch_PpmOrganization_PpmOrganizationFromPpmOrganizationEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmOrganizationEntity, PpmOrganizationSearch_PpmOrganization_PpmOrganization>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PpmOrganizationSearch_PpmOrganization_PpmOrganizationFromPpmOrganizationEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public PpmOrganizationSearch_PpmOrganization_PpmOrganization Map(global::AggieEnterpriseApi.State.PpmOrganizationEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new PpmOrganizationSearch_PpmOrganization_PpmOrganization(entity.Id, entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganizationFromPpmOrganizationEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmOrganizationEntity, PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganization>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganizationFromPpmOrganizationEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganization Map(global::AggieEnterpriseApi.State.PpmOrganizationEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganization(entity.Id, entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectSearchResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.PpmProjectSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmProjectEntity, PpmProjectSearch_PpmProjectByNumber_PpmProject> _ppmProjectSearch_PpmProjectByNumber_PpmProjectFromPpmProjectEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmProjectEntity, PpmProjectSearch_PpmProjectSearch_Data_PpmProject> _ppmProjectSearch_PpmProjectSearch_Data_PpmProjectFromPpmProjectEntityMapper;
        public PpmProjectSearchResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmProjectEntity, PpmProjectSearch_PpmProjectByNumber_PpmProject> ppmProjectSearch_PpmProjectByNumber_PpmProjectFromPpmProjectEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmProjectEntity, PpmProjectSearch_PpmProjectSearch_Data_PpmProject> ppmProjectSearch_PpmProjectSearch_Data_PpmProjectFromPpmProjectEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _ppmProjectSearch_PpmProjectByNumber_PpmProjectFromPpmProjectEntityMapper = ppmProjectSearch_PpmProjectByNumber_PpmProjectFromPpmProjectEntityMapper ?? throw new global::System.ArgumentNullException(nameof(ppmProjectSearch_PpmProjectByNumber_PpmProjectFromPpmProjectEntityMapper));
            _ppmProjectSearch_PpmProjectSearch_Data_PpmProjectFromPpmProjectEntityMapper = ppmProjectSearch_PpmProjectSearch_Data_PpmProjectFromPpmProjectEntityMapper ?? throw new global::System.ArgumentNullException(nameof(ppmProjectSearch_PpmProjectSearch_Data_PpmProjectFromPpmProjectEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IPpmProjectSearchResult);
        public PpmProjectSearchResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PpmProjectSearchResultInfo info)
            {
                return new PpmProjectSearchResult(MapIPpmProjectSearch_PpmProjectByNumber(info.PpmProjectByNumber, snapshot), MapNonNullableIPpmProjectSearch_PpmProjectSearch(info.PpmProjectSearch, snapshot));
            }

            throw new global::System.ArgumentException("PpmProjectSearchResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectByNumber? MapIPpmProjectSearch_PpmProjectByNumber(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("PpmProject", global::System.StringComparison.Ordinal))
            {
                return _ppmProjectSearch_PpmProjectByNumber_PpmProjectFromPpmProjectEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.PpmProjectEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectSearch MapNonNullableIPpmProjectSearch_PpmProjectSearch(global::AggieEnterpriseApi.State.PpmProjectSearchResultsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPpmProjectSearch_PpmProjectSearch returnValue = default !;
            if (data.__typename.Equals("PpmProjectSearchResults", global::System.StringComparison.Ordinal))
            {
                returnValue = new PpmProjectSearch_PpmProjectSearch_PpmProjectSearchResults(MapNonNullableIPpmProjectSearch_PpmProjectSearch_DataNonNullableArray(data.Data ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectSearch_Data> MapNonNullableIPpmProjectSearch_PpmProjectSearch_DataNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var ppmProjects = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectSearch_Data>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                ppmProjects.Add(MapNonNullableIPpmProjectSearch_PpmProjectSearch_Data(child, snapshot));
            }

            return ppmProjects;
        }

        private global::AggieEnterpriseApi.IPpmProjectSearch_PpmProjectSearch_Data MapNonNullableIPpmProjectSearch_PpmProjectSearch_Data(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("PpmProject", global::System.StringComparison.Ordinal))
            {
                return _ppmProjectSearch_PpmProjectSearch_Data_PpmProjectFromPpmProjectEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.PpmProjectEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectSearchResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PpmProjectSearchResultInfo(global::StrawberryShake.EntityId? ppmProjectByNumber, global::AggieEnterpriseApi.State.PpmProjectSearchResultsData ppmProjectSearch, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PpmProjectByNumber = ppmProjectByNumber;
            PpmProjectSearch = ppmProjectSearch;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Get a single PpmProject by the project number.  Returns undefined if no project with that number is found.
        /// </summary>
        public global::StrawberryShake.EntityId? PpmProjectByNumber { get; }

        /// <summary>
        /// Search for PpmProject objects by multiple properties.
        /// See
        /// See the PpmProjectFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.State.PpmProjectSearchResultsData PpmProjectSearch { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PpmProjectSearchResultInfo(PpmProjectByNumber, PpmProjectSearch, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectSearch_PpmProjectByNumber_PpmProjectFromPpmProjectEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmProjectEntity, PpmProjectSearch_PpmProjectByNumber_PpmProject>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PpmProjectSearch_PpmProjectByNumber_PpmProjectFromPpmProjectEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public PpmProjectSearch_PpmProjectByNumber_PpmProject Map(global::AggieEnterpriseApi.State.PpmProjectEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new PpmProjectSearch_PpmProjectByNumber_PpmProject(entity.Id, entity.ProjectNumber, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectSearch_PpmProjectSearch_Data_PpmProjectFromPpmProjectEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmProjectEntity, PpmProjectSearch_PpmProjectSearch_Data_PpmProject>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PpmProjectSearch_PpmProjectSearch_Data_PpmProjectFromPpmProjectEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public PpmProjectSearch_PpmProjectSearch_Data_PpmProject Map(global::AggieEnterpriseApi.State.PpmProjectEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new PpmProjectSearch_PpmProjectSearch_Data_PpmProject(entity.Id, entity.ProjectNumber, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskSearchResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.PpmTaskSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmTaskEntity, PpmTaskSearch_PpmTaskSearch_Data_PpmTask> _ppmTaskSearch_PpmTaskSearch_Data_PpmTaskFromPpmTaskEntityMapper;
        public PpmTaskSearchResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmTaskEntity, PpmTaskSearch_PpmTaskSearch_Data_PpmTask> ppmTaskSearch_PpmTaskSearch_Data_PpmTaskFromPpmTaskEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _ppmTaskSearch_PpmTaskSearch_Data_PpmTaskFromPpmTaskEntityMapper = ppmTaskSearch_PpmTaskSearch_Data_PpmTaskFromPpmTaskEntityMapper ?? throw new global::System.ArgumentNullException(nameof(ppmTaskSearch_PpmTaskSearch_Data_PpmTaskFromPpmTaskEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IPpmTaskSearchResult);
        public PpmTaskSearchResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PpmTaskSearchResultInfo info)
            {
                return new PpmTaskSearchResult(MapNonNullableIPpmTaskSearch_PpmTaskSearch(info.PpmTaskSearch, snapshot));
            }

            throw new global::System.ArgumentException("PpmTaskSearchResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IPpmTaskSearch_PpmTaskSearch MapNonNullableIPpmTaskSearch_PpmTaskSearch(global::AggieEnterpriseApi.State.PpmTaskSearchResultsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPpmTaskSearch_PpmTaskSearch returnValue = default !;
            if (data.__typename.Equals("PpmTaskSearchResults", global::System.StringComparison.Ordinal))
            {
                returnValue = new PpmTaskSearch_PpmTaskSearch_PpmTaskSearchResults(MapNonNullableIPpmTaskSearch_PpmTaskSearch_DataNonNullableArray(data.Data ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IPpmTaskSearch_PpmTaskSearch_Data> MapNonNullableIPpmTaskSearch_PpmTaskSearch_DataNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var ppmTasks = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IPpmTaskSearch_PpmTaskSearch_Data>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                ppmTasks.Add(MapNonNullableIPpmTaskSearch_PpmTaskSearch_Data(child, snapshot));
            }

            return ppmTasks;
        }

        private global::AggieEnterpriseApi.IPpmTaskSearch_PpmTaskSearch_Data MapNonNullableIPpmTaskSearch_PpmTaskSearch_Data(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("PpmTask", global::System.StringComparison.Ordinal))
            {
                return _ppmTaskSearch_PpmTaskSearch_Data_PpmTaskFromPpmTaskEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.PpmTaskEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskSearchResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PpmTaskSearchResultInfo(global::AggieEnterpriseApi.State.PpmTaskSearchResultsData ppmTaskSearch, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PpmTaskSearch = ppmTaskSearch;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Search for PpmTask objects by multiple properties.
        /// See
        /// See the PpmTaskFilterInput type for options.
        /// </summary>
        public global::AggieEnterpriseApi.State.PpmTaskSearchResultsData PpmTaskSearch { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PpmTaskSearchResultInfo(PpmTaskSearch, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskSearch_PpmTaskSearch_Data_PpmTaskFromPpmTaskEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmTaskEntity, PpmTaskSearch_PpmTaskSearch_Data_PpmTask>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PpmTaskSearch_PpmTaskSearch_Data_PpmTaskFromPpmTaskEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public PpmTaskSearch_PpmTaskSearch_Data_PpmTask Map(global::AggieEnterpriseApi.State.PpmTaskEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new PpmTaskSearch_PpmTaskSearch_Data_PpmTask(entity.Id, entity.TaskNumber, entity.ProjectId, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.GlValidateChartSegmentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GlValidateChartSegmentsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IGlValidateChartSegmentsResult);
        public GlValidateChartSegmentsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GlValidateChartSegmentsResultInfo info)
            {
                return new GlValidateChartSegmentsResult(MapNonNullableIGlValidateChartSegments_GlValidateChartSegments(info.GlValidateChartSegments, snapshot));
            }

            throw new global::System.ArgumentException("GlValidateChartSegmentsResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments MapNonNullableIGlValidateChartSegments_GlValidateChartSegments(global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartSegments_GlValidateChartSegments returnValue = default !;
            if (data.__typename.Equals("GlValidateChartSegmentsOutput", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput(MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_ValidationResponse(data.ValidationResponse ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_Segments(data.Segments ?? throw new global::System.ArgumentNullException(), snapshot), data.CompleteChartstring, data.CodeCombinationId, MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_SegmentNames(data.SegmentNames ?? throw new global::System.ArgumentNullException(), snapshot), MapIGlValidateChartSegments_GlValidateChartSegments_WarningsNonNullableArray(data.Warnings, snapshot), MapIGlValidateChartSegments_GlValidateChartSegments_EndDatesNonNullableArray(data.EndDates, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_ValidationResponse(global::AggieEnterpriseApi.State.ValidationResponseData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse returnValue = default !;
            if (data.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse(data.ErrorMessages, data.MessageProperties, data.Valid ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Segments MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_Segments(global::AggieEnterpriseApi.State.GlSegmentsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartSegments_GlValidateChartSegments_Segments returnValue = default !;
            if (data.__typename.Equals("GlSegments", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments(data.Account, data.Activity, data.Department, data.Entity, data.Fund, data.Program, data.Project, data.Purpose);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_SegmentNames MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_SegmentNames(global::AggieEnterpriseApi.State.GlSegmentNamesData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartSegments_GlValidateChartSegments_SegmentNames returnValue = default !;
            if (data.__typename.Equals("GlSegmentNames", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames(data.EntityName, data.FundName, data.DepartmentName, data.AccountName, data.PurposeName, data.ProjectName, data.ProgramName, data.ActivityName);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Warnings>? MapIGlValidateChartSegments_GlValidateChartSegments_WarningsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentWarningData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var segmentWarnings = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Warnings>();
            foreach (global::AggieEnterpriseApi.State.SegmentWarningData child in list)
            {
                segmentWarnings.Add(MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_Warnings(child, snapshot));
            }

            return segmentWarnings;
        }

        private global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Warnings MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_Warnings(global::AggieEnterpriseApi.State.SegmentWarningData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartSegments_GlValidateChartSegments_Warnings returnValue = default !;
            if (data.__typename.Equals("SegmentWarning", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning(data.SegmentName ?? throw new global::System.ArgumentNullException(), data.Warning ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_EndDates>? MapIGlValidateChartSegments_GlValidateChartSegments_EndDatesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentEndDateData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var segmentEndDates = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_EndDates>();
            foreach (global::AggieEnterpriseApi.State.SegmentEndDateData child in list)
            {
                segmentEndDates.Add(MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_EndDates(child, snapshot));
            }

            return segmentEndDates;
        }

        private global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_EndDates MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_EndDates(global::AggieEnterpriseApi.State.SegmentEndDateData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartSegments_GlValidateChartSegments_EndDates returnValue = default !;
            if (data.__typename.Equals("SegmentEndDate", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate(data.SegmentName ?? throw new global::System.ArgumentNullException(), data.EndDate ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GlValidateChartSegmentsResultInfo(global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData glValidateChartSegments, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GlValidateChartSegments = glValidateChartSegments;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Validates that the given set of GL chartstring segments are most likely valid for posting
        /// to the financial system general ledger.  Individual non-blank elements will be checked
        /// for current validity.
        /// 
        /// If validateCVRs is true, certain combinations of attributes will be sanity checked.
        /// 
        /// This operation will return a fully populated set of segments, including defaults in
        /// both individual segment and full chartstring form.
        /// 
        /// If the combination was previously known/used in the financial system, its unique ID will be included.
        /// </summary>
        public global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData GlValidateChartSegments { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GlValidateChartSegmentsResultInfo(GlValidateChartSegments, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstringResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.GlValidateChartstringResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GlValidateChartstringResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IGlValidateChartstringResult);
        public GlValidateChartstringResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GlValidateChartstringResultInfo info)
            {
                return new GlValidateChartstringResult(MapNonNullableIGlValidateChartstring_GlValidateChartstring(info.GlValidateChartstring, snapshot));
            }

            throw new global::System.ArgumentException("GlValidateChartstringResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring MapNonNullableIGlValidateChartstring_GlValidateChartstring(global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartstring_GlValidateChartstring returnValue = default !;
            if (data.__typename.Equals("GlValidateChartSegmentsOutput", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput(MapNonNullableIGlValidateChartstring_GlValidateChartstring_ValidationResponse(data.ValidationResponse ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGlValidateChartstring_GlValidateChartstring_Segments(data.Segments ?? throw new global::System.ArgumentNullException(), snapshot), data.CompleteChartstring, data.CodeCombinationId, MapNonNullableIGlValidateChartstring_GlValidateChartstring_SegmentNames(data.SegmentNames ?? throw new global::System.ArgumentNullException(), snapshot), MapIGlValidateChartstring_GlValidateChartstring_WarningsNonNullableArray(data.Warnings, snapshot), MapIGlValidateChartstring_GlValidateChartstring_EndDatesNonNullableArray(data.EndDates, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_ValidationResponse MapNonNullableIGlValidateChartstring_GlValidateChartstring_ValidationResponse(global::AggieEnterpriseApi.State.ValidationResponseData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartstring_GlValidateChartstring_ValidationResponse returnValue = default !;
            if (data.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse(data.ErrorMessages, data.MessageProperties, data.Valid ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Segments MapNonNullableIGlValidateChartstring_GlValidateChartstring_Segments(global::AggieEnterpriseApi.State.GlSegmentsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartstring_GlValidateChartstring_Segments returnValue = default !;
            if (data.__typename.Equals("GlSegments", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartstring_GlValidateChartstring_Segments_GlSegments(data.Account, data.Activity, data.Department, data.Entity, data.Fund, data.Program, data.Project, data.Purpose);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_SegmentNames MapNonNullableIGlValidateChartstring_GlValidateChartstring_SegmentNames(global::AggieEnterpriseApi.State.GlSegmentNamesData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartstring_GlValidateChartstring_SegmentNames returnValue = default !;
            if (data.__typename.Equals("GlSegmentNames", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames(data.EntityName, data.FundName, data.DepartmentName, data.AccountName, data.PurposeName, data.ProjectName, data.ProgramName, data.ActivityName);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Warnings>? MapIGlValidateChartstring_GlValidateChartstring_WarningsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentWarningData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var segmentWarnings = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Warnings>();
            foreach (global::AggieEnterpriseApi.State.SegmentWarningData child in list)
            {
                segmentWarnings.Add(MapNonNullableIGlValidateChartstring_GlValidateChartstring_Warnings(child, snapshot));
            }

            return segmentWarnings;
        }

        private global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Warnings MapNonNullableIGlValidateChartstring_GlValidateChartstring_Warnings(global::AggieEnterpriseApi.State.SegmentWarningData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartstring_GlValidateChartstring_Warnings returnValue = default !;
            if (data.__typename.Equals("SegmentWarning", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning(data.SegmentName ?? throw new global::System.ArgumentNullException(), data.Warning ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_EndDates>? MapIGlValidateChartstring_GlValidateChartstring_EndDatesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentEndDateData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var segmentEndDates = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_EndDates>();
            foreach (global::AggieEnterpriseApi.State.SegmentEndDateData child in list)
            {
                segmentEndDates.Add(MapNonNullableIGlValidateChartstring_GlValidateChartstring_EndDates(child, snapshot));
            }

            return segmentEndDates;
        }

        private global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_EndDates MapNonNullableIGlValidateChartstring_GlValidateChartstring_EndDates(global::AggieEnterpriseApi.State.SegmentEndDateData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartstring_GlValidateChartstring_EndDates returnValue = default !;
            if (data.__typename.Equals("SegmentEndDate", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate(data.SegmentName ?? throw new global::System.ArgumentNullException(), data.EndDate ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstringResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GlValidateChartstringResultInfo(global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData glValidateChartstring, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GlValidateChartstring = glValidateChartstring;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Validates that the given GL chartstring is most likely valid for posting
        /// to the financial system general ledger.  The input string format is strongly typed
        /// and will reject the call if not structured properly.  Please see the definition of the
        /// [GlSegmentString]({{Types.GlSegmentString}}) for format information.
        /// 
        /// If validateCVRs is true, certain combinations of attributes will be sanity checked if the string format is accepted.
        /// 
        /// This operation will return the validation result and the segments as parsed out into their component fields.
        /// 
        /// If the combination was previously known/used in the financial system, its unique ID will be included.
        /// </summary>
        public global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData GlValidateChartstring { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GlValidateChartstringResultInfo(GlValidateChartstring, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IErpInstitutionLocationFilterInputInfo
    {
        global::System.Boolean IsSearchCommonSet { get; }

        global::System.Boolean IsLocationCodeSet { get; }

        global::System.Boolean IsAddressLine1Set { get; }

        global::System.Boolean IsCitySet { get; }

        global::System.Boolean IsStateSet { get; }

        global::System.Boolean IsPostalCodeSet { get; }

        global::System.Boolean IsCountryCodeSet { get; }

        global::System.Boolean IsDeliverySiteSet { get; }

        global::System.Boolean IsReceivingSiteSet { get; }

        global::System.Boolean IsEnabledSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface ISearchCommonInputsInfo
    {
        global::System.Boolean IsSortSet { get; }

        global::System.Boolean IsLimitSet { get; }

        global::System.Boolean IsStartIndexSet { get; }

        global::System.Boolean IsIncludeTotalResultCountSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IStringFilterInputInfo
    {
        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeSet { get; }

        global::System.Boolean IsLeSet { get; }

        global::System.Boolean IsLtSet { get; }

        global::System.Boolean IsGeSet { get; }

        global::System.Boolean IsGtSet { get; }

        global::System.Boolean IsBeginsWithSet { get; }

        global::System.Boolean IsEndsWithSet { get; }

        global::System.Boolean IsContainsSet { get; }

        global::System.Boolean IsNotContainsSet { get; }

        global::System.Boolean IsBetweenSet { get; }

        global::System.Boolean IsInSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IBooleanFilterInputInfo
    {
        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IErpUnitOfMeasureFilterInputInfo
    {
        global::System.Boolean IsSearchCommonSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsUnitOfMeasureIdSet { get; }

        global::System.Boolean IsUomCodeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IGlJournalRequestInputInfo
    {
        global::System.Boolean IsHeaderSet { get; }

        global::System.Boolean IsPayloadSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IActionRequestHeaderInputInfo
    {
        global::System.Boolean IsConsumerTrackingIdSet { get; }

        global::System.Boolean IsConsumerReferenceIdSet { get; }

        global::System.Boolean IsConsumerNotesSet { get; }

        global::System.Boolean IsBoundaryApplicationNameSet { get; }

        global::System.Boolean IsConsumerIdSet { get; }

        global::System.Boolean IsBatchRequestSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IGlJournalInputInfo
    {
        global::System.Boolean IsJournalSourceNameSet { get; }

        global::System.Boolean IsJournalCategoryNameSet { get; }

        global::System.Boolean IsJournalNameSet { get; }

        global::System.Boolean IsJournalDescriptionSet { get; }

        global::System.Boolean IsJournalReferenceSet { get; }

        global::System.Boolean IsAccountingDateSet { get; }

        global::System.Boolean IsAccountingPeriodNameSet { get; }

        global::System.Boolean IsJournalLinesSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IGlJournalLineInputInfo
    {
        global::System.Boolean IsGlSegmentsSet { get; }

        global::System.Boolean IsGlSegmentStringSet { get; }

        global::System.Boolean IsPpmSegmentsSet { get; }

        global::System.Boolean IsPpmSegmentStringSet { get; }

        global::System.Boolean IsDebitAmountSet { get; }

        global::System.Boolean IsCreditAmountSet { get; }

        global::System.Boolean IsExternalSystemIdentifierSet { get; }

        global::System.Boolean IsExternalSystemReferenceSet { get; }

        global::System.Boolean IsPpmCommentSet { get; }

        global::System.Boolean IsGlideSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IGlSegmentInputInfo
    {
        global::System.Boolean IsEntitySet { get; }

        global::System.Boolean IsFundSet { get; }

        global::System.Boolean IsDepartmentSet { get; }

        global::System.Boolean IsAccountSet { get; }

        global::System.Boolean IsPurposeSet { get; }

        global::System.Boolean IsProjectSet { get; }

        global::System.Boolean IsProgramSet { get; }

        global::System.Boolean IsActivitySet { get; }

        global::System.Boolean IsFlex1Set { get; }

        global::System.Boolean IsFlex2Set { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IPpmSegmentInputInfo
    {
        global::System.Boolean IsProjectSet { get; }

        global::System.Boolean IsTaskSet { get; }

        global::System.Boolean IsOrganizationSet { get; }

        global::System.Boolean IsExpenditureTypeSet { get; }

        global::System.Boolean IsAwardSet { get; }

        global::System.Boolean IsFundingSourceSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IGlideInputInfo
    {
        global::System.Boolean IsLineDescriptionSet { get; }

        global::System.Boolean IsJournalLineNumberSet { get; }

        global::System.Boolean IsTransactionDateSet { get; }

        global::System.Boolean IsUdfNumeric1Set { get; }

        global::System.Boolean IsUdfNumeric2Set { get; }

        global::System.Boolean IsUdfNumeric3Set { get; }

        global::System.Boolean IsUdfDate1Set { get; }

        global::System.Boolean IsUdfDate2Set { get; }

        global::System.Boolean IsUdfString1Set { get; }

        global::System.Boolean IsUdfString2Set { get; }

        global::System.Boolean IsUdfString3Set { get; }

        global::System.Boolean IsUdfString4Set { get; }

        global::System.Boolean IsUdfString5Set { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IScmPurchaseRequisitionRequestInputInfo
    {
        global::System.Boolean IsHeaderSet { get; }

        global::System.Boolean IsPayloadSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IScmPurchaseRequisitionInputInfo
    {
        global::System.Boolean IsRequisitionSourceNameSet { get; }

        global::System.Boolean IsSupplierNumberSet { get; }

        global::System.Boolean IsSupplierSiteCodeSet { get; }

        global::System.Boolean IsRequesterEmailAddressSet { get; }

        global::System.Boolean IsDescriptionSet { get; }

        global::System.Boolean IsJustificationSet { get; }

        global::System.Boolean IsTransactionDateSet { get; }

        global::System.Boolean IsLinesSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IScmPurchaseRequisitionLineInputInfo
    {
        global::System.Boolean IsAmountSet { get; }

        global::System.Boolean IsQuantitySet { get; }

        global::System.Boolean IsUnitOfMeasureSet { get; }

        global::System.Boolean IsItemDescriptionSet { get; }

        global::System.Boolean IsNoteToBuyerSet { get; }

        global::System.Boolean IsPurchasingCategoryNameSet { get; }

        global::System.Boolean IsUnitPriceSet { get; }

        global::System.Boolean IsDeliveryToLocationCodeSet { get; }

        global::System.Boolean IsRequestedDeliveryDateSet { get; }

        global::System.Boolean IsDistributionsSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IScmPurchaseRequisitionDistributionInputInfo
    {
        global::System.Boolean IsAmountSet { get; }

        global::System.Boolean IsPercentSet { get; }

        global::System.Boolean IsQuantitySet { get; }

        global::System.Boolean IsGlSegmentsSet { get; }

        global::System.Boolean IsGlSegmentStringSet { get; }

        global::System.Boolean IsPpmSegmentsSet { get; }

        global::System.Boolean IsPpmSegmentStringSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IScmPurchasingCategoryFilterInputInfo
    {
        global::System.Boolean IsSearchCommonSet { get; }

        global::System.Boolean IsCodeSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsDescriptionSet { get; }

        global::System.Boolean IsEnabledSet { get; }

        global::System.Boolean IsLastUpdateDateTimeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IDateFilterInputInfo
    {
        global::System.Boolean IsEqSet { get; }

        global::System.Boolean IsNeSet { get; }

        global::System.Boolean IsLeSet { get; }

        global::System.Boolean IsLtSet { get; }

        global::System.Boolean IsGeSet { get; }

        global::System.Boolean IsGtSet { get; }

        global::System.Boolean IsBetweenSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IScmSupplierFilterInputInfo
    {
        global::System.Boolean IsSearchCommonSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsAliasNameSet { get; }

        global::System.Boolean IsAlternateNameSet { get; }

        global::System.Boolean IsSupplierIdSet { get; }

        global::System.Boolean IsSupplierNumberSet { get; }

        global::System.Boolean IsLastUpdateDateTimeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IPpmExpenditureTypeFilterInputInfo
    {
        global::System.Boolean IsSearchCommonSet { get; }

        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsLastUpdateDateTimeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IPpmOrganizationFilterInputInfo
    {
        global::System.Boolean IsSearchCommonSet { get; }

        global::System.Boolean IsCodeSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsEnabledSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IPpmProjectFilterInputInfo
    {
        global::System.Boolean IsSearchCommonSet { get; }

        global::System.Boolean IsProjectNumberSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsProjectStartDateSet { get; }

        global::System.Boolean IsProjectCompletionDateSet { get; }

        global::System.Boolean IsProjectStatusCodeSet { get; }

        global::System.Boolean IsPrimaryProjectManagerEmailSet { get; }

        global::System.Boolean IsSponsoredProjectSet { get; }

        global::System.Boolean IsBillingEnabledSet { get; }

        global::System.Boolean IsCapitalizationEnabledSet { get; }

        global::System.Boolean IsTemplateProjectSet { get; }

        global::System.Boolean IsLastUpdateDateTimeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IPpmTaskFilterInputInfo
    {
        global::System.Boolean IsSearchCommonSet { get; }

        global::System.Boolean IsIdSet { get; }

        global::System.Boolean IsProjectIdSet { get; }

        global::System.Boolean IsNameSet { get; }

        global::System.Boolean IsTaskNumberSet { get; }

        global::System.Boolean IsChargeableSet { get; }

        global::System.Boolean IsBillableSet { get; }

        global::System.Boolean IsLastUpdateDateTimeSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParentsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IDeptParentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IDeptParentsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDepartmentCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public DeptParentsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IDeptParentsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _erpDepartmentCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDepartmentCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpDepartmentCode` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeptParentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeptParentsResult Result, DeptParentsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IDeptParentsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeptParentsResult, DeptParentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? erpFinancialDepartmentId = default !;
            _entityStore.Update(session =>
            {
                erpFinancialDepartmentId = UpdateIDeptParents_ErpFinancialDepartmentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpFinancialDepartment"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeptParentsResultInfo(erpFinancialDepartmentId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartmentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), UpdateIDeptParents_ErpFinancialDepartment_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), UpdateIDeptParents_ErpFinancialDepartment_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _erpDepartmentCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, UpdateIDeptParents_ErpFinancialDepartment_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, UpdateIDeptParents_ErpFinancialDepartment_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, entity.Parent, entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpInstitutionLocationSearchBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IErpInstitutionLocationSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IErpInstitutionLocationSearchResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _positiveIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _nonNegativeIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _scmAddressLineParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _cityNameParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString60Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpPostalCodeParser;
        public ErpInstitutionLocationSearchBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IErpInstitutionLocationSearchResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _positiveIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("PositiveInt") ?? throw new global::System.ArgumentException("No serializer for type `PositiveInt` found.");
            _nonNegativeIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("NonNegativeInt") ?? throw new global::System.ArgumentException("No serializer for type `NonNegativeInt` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _scmAddressLineParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ScmAddressLine") ?? throw new global::System.ArgumentException("No serializer for type `ScmAddressLine` found.");
            _cityNameParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("CityName") ?? throw new global::System.ArgumentException("No serializer for type `CityName` found.");
            _nonEmptyTrimmedString60Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString60") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString60` found.");
            _erpPostalCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpPostalCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpPostalCode` found.");
        }

        public global::StrawberryShake.IOperationResult<IErpInstitutionLocationSearchResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IErpInstitutionLocationSearchResult Result, ErpInstitutionLocationSearchResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IErpInstitutionLocationSearchResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IErpInstitutionLocationSearchResult, ErpInstitutionLocationSearchResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ErpInstitutionLocationSearchResultInfo(DeserializeNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpInstitutionLocationSearch")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.ErpInstitutionLocationSearchResultsData DeserializeNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ErpInstitutionLocationSearchResults", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ErpInstitutionLocationSearchResultsData(typename, metadata: DeserializeNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metadata")), data: DeserializeNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch_DataNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.SearchResultMetadataData DeserializeNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Metadata(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SearchResultMetadata", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.SearchResultMetadataData(typename, sort: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sort")), limit: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "limit")), returnedResultCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "returnedResultCount")), startIndex: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startIndex")), nextStartIndex: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nextStartIndex")), totalResultCount: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalResultCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _positiveIntParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _nonNegativeIntParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ErpInstitutionLocationData> DeserializeNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch_DataNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var erpInstitutionLocations = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.State.ErpInstitutionLocationData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                erpInstitutionLocations.Add(DeserializeNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data(child));
            }

            return erpInstitutionLocations;
        }

        private global::AggieEnterpriseApi.State.ErpInstitutionLocationData DeserializeNonNullableIErpInstitutionLocationSearch_ErpInstitutionLocationSearch_Data(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ErpInstitutionLocation", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ErpInstitutionLocationData(typename, locationId: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "locationId")), locationCode: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "locationCode")), addressLine1: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addressLine1")), addressLine2: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addressLine2")), addressLine3: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addressLine3")), addressLine4: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addressLine4")), city: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "city")), state: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "state")), postalCode: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "postalCode")), receivingSite: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "receivingSite")), deliverySite: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "deliverySite")), enabled: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _scmAddressLineParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpUnitOfMeasureSearchBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IErpUnitOfMeasureSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IErpUnitOfMeasureSearchResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _positiveIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _nonNegativeIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpUnitOfMeasureCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString25Parser;
        public ErpUnitOfMeasureSearchBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IErpUnitOfMeasureSearchResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _positiveIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("PositiveInt") ?? throw new global::System.ArgumentException("No serializer for type `PositiveInt` found.");
            _nonNegativeIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("NonNegativeInt") ?? throw new global::System.ArgumentException("No serializer for type `NonNegativeInt` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _erpUnitOfMeasureCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpUnitOfMeasureCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpUnitOfMeasureCode` found.");
            _nonEmptyTrimmedString25Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString25") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString25` found.");
        }

        public global::StrawberryShake.IOperationResult<IErpUnitOfMeasureSearchResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IErpUnitOfMeasureSearchResult Result, ErpUnitOfMeasureSearchResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IErpUnitOfMeasureSearchResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IErpUnitOfMeasureSearchResult, ErpUnitOfMeasureSearchResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ErpUnitOfMeasureSearchResultInfo(DeserializeNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpUnitOfMeasureSearch")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.ErpUnitOfMeasureSearchResultsData DeserializeNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ErpUnitOfMeasureSearchResults", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ErpUnitOfMeasureSearchResultsData(typename, metadata: DeserializeNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metadata")), data: DeserializeNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_DataNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.SearchResultMetadataData DeserializeNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Metadata(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SearchResultMetadata", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.SearchResultMetadataData(typename, sort: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sort")), limit: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "limit")), returnedResultCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "returnedResultCount")), startIndex: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startIndex")), nextStartIndex: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nextStartIndex")), totalResultCount: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalResultCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _positiveIntParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _nonNegativeIntParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ErpUnitOfMeasureData> DeserializeNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_DataNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var erpUnitOfMeasures = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.State.ErpUnitOfMeasureData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                erpUnitOfMeasures.Add(DeserializeNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data(child));
            }

            return erpUnitOfMeasures;
        }

        private global::AggieEnterpriseApi.State.ErpUnitOfMeasureData DeserializeNonNullableIErpUnitOfMeasureSearch_ErpUnitOfMeasureSearch_Data(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ErpUnitOfMeasure", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ErpUnitOfMeasureData(typename, uomCode: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "uomCode")), name: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _erpUnitOfMeasureCodeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParentsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IFundParentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IFundParentsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFundCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _localDateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public FundParentsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IFundParentsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _erpFundCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFundCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpFundCode` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _localDateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("LocalDate") ?? throw new global::System.ArgumentException("No serializer for type `LocalDate` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IFundParentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFundParentsResult Result, FundParentsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IFundParentsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFundParentsResult, FundParentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? erpFundId = default !;
            _entityStore.Update(session =>
            {
                erpFundId = UpdateIFundParents_ErpFundEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpFund"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FundParentsResultInfo(erpFundId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFundEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "budgeted")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eligibleForUse")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDate")), DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startDate")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "budgeted")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eligibleForUse")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDate")), DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startDate")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _erpFundCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _localDateParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), entity.Parent));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::AggieEnterpriseApi.RequestStatus> _requestStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString80Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpNameField100Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDescriptionField240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _glReferenceField25Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _localDateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString15Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _glSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _nonNegativeFloatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _glReferenceField10Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _glDescriptionField40Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpEntityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFundCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDepartmentCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpAccountCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpPurposeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProjectCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProgramCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpActivityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFlex1CodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFlex2CodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmProjectNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmTaskNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmExpenseOrganizationCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmExpenseTypeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmAwardNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmFundingSourceNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GlJournalRequestBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _requestStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::AggieEnterpriseApi.RequestStatus>("RequestStatus") ?? throw new global::System.ArgumentException("No serializer for type `RequestStatus` found.");
            _nonEmptyTrimmedString80Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString80") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString80` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _erpNameField100Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpNameField100") ?? throw new global::System.ArgumentException("No serializer for type `ErpNameField100` found.");
            _erpDescriptionField240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDescriptionField240") ?? throw new global::System.ArgumentException("No serializer for type `ErpDescriptionField240` found.");
            _glReferenceField25Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("GlReferenceField25") ?? throw new global::System.ArgumentException("No serializer for type `GlReferenceField25` found.");
            _localDateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("LocalDate") ?? throw new global::System.ArgumentException("No serializer for type `LocalDate` found.");
            _nonEmptyTrimmedString15Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString15") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString15` found.");
            _glSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("GlSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `GlSegmentString` found.");
            _ppmSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `PpmSegmentString` found.");
            _nonNegativeFloatParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("NonNegativeFloat") ?? throw new global::System.ArgumentException("No serializer for type `NonNegativeFloat` found.");
            _glReferenceField10Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("GlReferenceField10") ?? throw new global::System.ArgumentException("No serializer for type `GlReferenceField10` found.");
            _glDescriptionField40Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("GlDescriptionField40") ?? throw new global::System.ArgumentException("No serializer for type `GlDescriptionField40` found.");
            _erpEntityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpEntityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpEntityCode` found.");
            _erpFundCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFundCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpFundCode` found.");
            _erpDepartmentCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDepartmentCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpDepartmentCode` found.");
            _erpAccountCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpAccountCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpAccountCode` found.");
            _erpPurposeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpPurposeCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpPurposeCode` found.");
            _erpProjectCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProjectCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProjectCode` found.");
            _erpProgramCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProgramCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProgramCode` found.");
            _erpActivityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpActivityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpActivityCode` found.");
            _erpFlex1CodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFlex1Code") ?? throw new global::System.ArgumentException("No serializer for type `ErpFlex1Code` found.");
            _erpFlex2CodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFlex2Code") ?? throw new global::System.ArgumentException("No serializer for type `ErpFlex2Code` found.");
            _ppmProjectNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmProjectNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmProjectNumber` found.");
            _ppmTaskNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmTaskNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmTaskNumber` found.");
            _ppmExpenseOrganizationCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmExpenseOrganizationCode") ?? throw new global::System.ArgumentException("No serializer for type `PpmExpenseOrganizationCode` found.");
            _ppmExpenseTypeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmExpenseTypeCode") ?? throw new global::System.ArgumentException("No serializer for type `PpmExpenseTypeCode` found.");
            _ppmAwardNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmAwardNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmAwardNumber` found.");
            _ppmFundingSourceNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmFundingSourceNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmFundingSourceNumber` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGlJournalRequestResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGlJournalRequestResult Result, GlJournalRequestResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGlJournalRequestResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGlJournalRequestResult, GlJournalRequestResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GlJournalRequestResultInfo(DeserializeNonNullableIGlJournalRequest_GlJournalRequest(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glJournalRequest")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData DeserializeNonNullableIGlJournalRequest_GlJournalRequest(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlJournalRequestStatusOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData(typename, requestStatus: DeserializeNonNullableIGlJournalRequest_GlJournalRequest_RequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestStatus")), validationResults: DeserializeIGlJournalRequest_GlJournalRequest_ValidationResults(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResults")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ActionRequestStatusData DeserializeNonNullableIGlJournalRequest_GlJournalRequest_RequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ActionRequestStatus", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ActionRequestStatusData(typename, requestId: DeserializeGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestId")), consumerId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "consumerId")), requestDateTime: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestDateTime")), requestStatus: DeserializeNonNullableRequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestStatus")), operationName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "operationName")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid? DeserializeGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _nonEmptyTrimmedString80Parser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.RequestStatus DeserializeNonNullableRequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _requestStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData? DeserializeIGlJournalRequest_GlJournalRequest_ValidationResults(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), messageProperties: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "messageProperties")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestStatusResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::AggieEnterpriseApi.RequestStatus> _requestStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _jSONParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString80Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GlJournalRequestStatusBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestStatusResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _requestStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::AggieEnterpriseApi.RequestStatus>("RequestStatus") ?? throw new global::System.ArgumentException("No serializer for type `RequestStatus` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _jSONParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("JSON") ?? throw new global::System.ArgumentException("No serializer for type `JSON` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _nonEmptyTrimmedString80Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString80") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString80` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGlJournalRequestStatusResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGlJournalRequestStatusResult Result, GlJournalRequestStatusResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGlJournalRequestStatusResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGlJournalRequestStatusResult, GlJournalRequestStatusResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GlJournalRequestStatusResultInfo(DeserializeIGlJournalRequestStatus_GlJournalRequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glJournalRequestStatus")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData? DeserializeIGlJournalRequestStatus_GlJournalRequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlJournalRequestStatusOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData(typename, requestStatus: DeserializeNonNullableIGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestStatus")), processingResult: DeserializeIGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "processingResult")), validationResults: DeserializeIGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResults")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ActionRequestStatusData DeserializeNonNullableIGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ActionRequestStatus", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ActionRequestStatusData(typename, statusRequestPayload: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "statusRequestPayload")), operationName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "operationName")), requestStatus: DeserializeNonNullableRequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestStatus")), requestDateTime: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestDateTime")), lastStatusDateTime: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastStatusDateTime")), errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), processedDateTime: DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "processedDateTime")), boundaryApplicationName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "boundaryApplicationName")), consumerId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "consumerId")), consumerNotes: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "consumerNotes")), consumerReferenceId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "consumerReferenceId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _jSONParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.RequestStatus DeserializeNonNullableRequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _requestStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.State.ProcessingResultData? DeserializeIGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ProcessingResult", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ProcessingResultData(typename, status: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), processedDateTime: DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "processedDateTime")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData? DeserializeIGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, valid: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valid")), errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetailsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.ICoaDetailsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ICoaDetailsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpEntityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFundCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDepartmentCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpAccountCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpPurposeCodeParser;
        public CoaDetailsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ICoaDetailsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _erpEntityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpEntityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpEntityCode` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
            _erpFundCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFundCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpFundCode` found.");
            _erpDepartmentCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDepartmentCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpDepartmentCode` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _erpAccountCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpAccountCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpAccountCode` found.");
            _erpPurposeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpPurposeCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpPurposeCode` found.");
        }

        public global::StrawberryShake.IOperationResult<ICoaDetailsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICoaDetailsResult Result, CoaDetailsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICoaDetailsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICoaDetailsResult, CoaDetailsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? erpEntityId = default !;
            global::StrawberryShake.EntityId? erpFundId = default !;
            global::StrawberryShake.EntityId? erpFinancialDepartmentId = default !;
            global::StrawberryShake.EntityId? erpAccountId = default !;
            global::StrawberryShake.EntityId? erpPurposeId = default !;
            _entityStore.Update(session =>
            {
                erpEntityId = UpdateICoaDetails_ErpEntityEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpEntity"), entityIds);
                erpFundId = UpdateICoaDetails_ErpFundEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpFund"), entityIds);
                erpFinancialDepartmentId = UpdateICoaDetails_ErpFinancialDepartmentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpFinancialDepartment"), entityIds);
                erpAccountId = UpdateICoaDetails_ErpAccountEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpAccount"), entityIds);
                erpPurposeId = UpdateICoaDetails_ErpPurposeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpPurpose"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CoaDetailsResultInfo(erpEntityId, erpFundId, erpFinancialDepartmentId, erpAccountId, erpPurposeId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateICoaDetails_ErpEntityEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpEntity", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpEntityEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpEntityEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpEntityEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _erpEntityCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateICoaDetails_ErpFundEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, entity.HierarchyDepth, entity.Parent));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateICoaDetails_ErpFinancialDepartmentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, entity.Parent, DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eligibleForUse"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eligibleForUse"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::StrawberryShake.EntityId? UpdateICoaDetails_ErpAccountEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpAccount", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpAccountEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpAccountEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpAccountEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateICoaDetails_ErpPurposeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpPurpose", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpPurposeEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpPurposeEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpPurposeEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class KfsConvertAccountBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IKfsConvertAccountResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IKfsConvertAccountResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _kfsChartCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _kfsAccountNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _kfsSubAccountNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpEntityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFundCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDepartmentCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpPurposeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProjectCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProgramCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpActivityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmProjectNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmExpenseOrganizationCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmTaskNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmAwardNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmFundingSourceNumberParser;
        public KfsConvertAccountBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IKfsConvertAccountResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _kfsChartCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("KfsChartCode") ?? throw new global::System.ArgumentException("No serializer for type `KfsChartCode` found.");
            _kfsAccountNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("KfsAccountNumber") ?? throw new global::System.ArgumentException("No serializer for type `KfsAccountNumber` found.");
            _kfsSubAccountNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("KfsSubAccountNumber") ?? throw new global::System.ArgumentException("No serializer for type `KfsSubAccountNumber` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _erpEntityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpEntityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpEntityCode` found.");
            _erpFundCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFundCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpFundCode` found.");
            _erpDepartmentCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDepartmentCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpDepartmentCode` found.");
            _erpPurposeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpPurposeCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpPurposeCode` found.");
            _erpProjectCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProjectCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProjectCode` found.");
            _erpProgramCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProgramCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProgramCode` found.");
            _erpActivityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpActivityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpActivityCode` found.");
            _ppmProjectNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmProjectNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmProjectNumber` found.");
            _ppmExpenseOrganizationCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmExpenseOrganizationCode") ?? throw new global::System.ArgumentException("No serializer for type `PpmExpenseOrganizationCode` found.");
            _ppmTaskNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmTaskNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmTaskNumber` found.");
            _ppmAwardNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmAwardNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmAwardNumber` found.");
            _ppmFundingSourceNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmFundingSourceNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmFundingSourceNumber` found.");
        }

        public global::StrawberryShake.IOperationResult<IKfsConvertAccountResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IKfsConvertAccountResult Result, KfsConvertAccountResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IKfsConvertAccountResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IKfsConvertAccountResult, KfsConvertAccountResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new KfsConvertAccountResultInfo(DeserializeNonNullableIKfsConvertAccount_KfsConvertAccount(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "kfsConvertAccount")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.KfsConvertAccountOutputData DeserializeNonNullableIKfsConvertAccount_KfsConvertAccount(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("KfsConvertAccountOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.KfsConvertAccountOutputData(typename, mappingFound: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "mappingFound")), glSegments: DeserializeIKfsConvertAccount_KfsConvertAccount_GlSegments(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glSegments")), ppmSegments: DeserializeIKfsConvertAccount_KfsConvertAccount_PpmSegments(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ppmSegments")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::AggieEnterpriseApi.State.GlCostCenterSegmentsData? DeserializeIKfsConvertAccount_KfsConvertAccount_GlSegments(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlCostCenterSegments", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlCostCenterSegmentsData(typename, entity: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "entity")), fund: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fund")), department: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "department")), purpose: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purpose")), project: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "project")), program: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "program")), activity: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activity")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _erpEntityCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _erpPurposeCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.State.PpmCostCenterSegmentsData? DeserializeIKfsConvertAccount_KfsConvertAccount_PpmSegments(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PpmCostCenterSegments", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.PpmCostCenterSegmentsData(typename, project: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "project")), organization: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "organization")), task: DeserializeNonNullableStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "task")), award: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "award")), fundingSource: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fundingSource")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String> DeserializeNonNullableStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var ppmTaskNumbers = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                ppmTaskNumbers.Add(DeserializeNonNullableString(child));
            }

            return ppmTaskNumbers;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidateBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public PpmStringSegmentsValidateBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _ppmSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `PpmSegmentString` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IPpmStringSegmentsValidateResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IPpmStringSegmentsValidateResult Result, PpmStringSegmentsValidateResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IPpmStringSegmentsValidateResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IPpmStringSegmentsValidateResult, PpmStringSegmentsValidateResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new PpmStringSegmentsValidateResultInfo(DeserializeNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ppmStringSegmentsValidate")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData DeserializeNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PpmSegmentsValidateOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData(typename, validationResponse: DeserializeNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResponse")), segmentString: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentString")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData DeserializeNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, valid: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valid")), errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), messageProperties: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "messageProperties")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _ppmSegmentStringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmSegmentsValidateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmSegmentsValidateResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmProjectNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmTaskNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmExpenseOrganizationCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmExpenseTypeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmAwardNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmFundingSourceNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public PpmSegmentsValidateBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmSegmentsValidateResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _ppmProjectNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmProjectNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmProjectNumber` found.");
            _ppmTaskNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmTaskNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmTaskNumber` found.");
            _ppmExpenseOrganizationCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmExpenseOrganizationCode") ?? throw new global::System.ArgumentException("No serializer for type `PpmExpenseOrganizationCode` found.");
            _ppmExpenseTypeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmExpenseTypeCode") ?? throw new global::System.ArgumentException("No serializer for type `PpmExpenseTypeCode` found.");
            _ppmAwardNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmAwardNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmAwardNumber` found.");
            _ppmFundingSourceNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmFundingSourceNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmFundingSourceNumber` found.");
            _ppmSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `PpmSegmentString` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IPpmSegmentsValidateResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IPpmSegmentsValidateResult Result, PpmSegmentsValidateResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IPpmSegmentsValidateResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IPpmSegmentsValidateResult, PpmSegmentsValidateResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new PpmSegmentsValidateResultInfo(DeserializeNonNullableIPpmSegmentsValidate_PpmSegmentsValidate(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ppmSegmentsValidate")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData DeserializeNonNullableIPpmSegmentsValidate_PpmSegmentsValidate(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PpmSegmentsValidateOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData(typename, validationResponse: DeserializeNonNullableIPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResponse")), segmentString: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentString")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData DeserializeNonNullableIPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), messageProperties: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "messageProperties")), valid: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valid")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _ppmSegmentStringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskByProjectNumberAndTaskNumberBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmProjectNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmTaskNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString100Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProgramCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpPurposeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFundCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpActivityCodeParser;
        public PpmTaskByProjectNumberAndTaskNumberBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _ppmProjectNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmProjectNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmProjectNumber` found.");
            _ppmTaskNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmTaskNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmTaskNumber` found.");
            _nonEmptyTrimmedString100Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString100") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString100` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _erpProgramCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProgramCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProgramCode` found.");
            _erpPurposeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpPurposeCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpPurposeCode` found.");
            _erpFundCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFundCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpFundCode` found.");
            _erpActivityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpActivityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpActivityCode` found.");
        }

        public global::StrawberryShake.IOperationResult<IPpmTaskByProjectNumberAndTaskNumberResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IPpmTaskByProjectNumberAndTaskNumberResult Result, PpmTaskByProjectNumberAndTaskNumberResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IPpmTaskByProjectNumberAndTaskNumberResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IPpmTaskByProjectNumberAndTaskNumberResult, PpmTaskByProjectNumberAndTaskNumberResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? ppmTaskByProjectNumberAndTaskNumberId = default !;
            _entityStore.Update(session =>
            {
                ppmTaskByProjectNumberAndTaskNumberId = UpdateIPpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumberEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ppmTaskByProjectNumberAndTaskNumber"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new PpmTaskByProjectNumberAndTaskNumberResultInfo(ppmTaskByProjectNumberAndTaskNumberId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIPpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumberEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("PpmTask", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.PpmTaskEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmTaskEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "taskNumber")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "billable")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "chargeable")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eligibleForUse")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glPostingProgramCode")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glPostingPurposeCode")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glPostingFundCode")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glPostingActivityCode")), entity.Id, entity.ProjectId));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmTaskEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "taskNumber")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "billable")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "chargeable")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eligibleForUse")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glPostingProgramCode")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glPostingPurposeCode")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glPostingFundCode")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glPostingActivityCode")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _nonEmptyTrimmedString100Parser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _erpProgramCodeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionCreateBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::AggieEnterpriseApi.RequestStatus> _requestStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString80Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString30Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _emailAddressParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString1000Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _localDateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _nonNegativeFloatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString25Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString60Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _glSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpEntityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFundCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDepartmentCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpAccountCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpPurposeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProjectCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProgramCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpActivityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFlex1CodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFlex2CodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmProjectNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmTaskNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmExpenseOrganizationCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmExpenseTypeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmAwardNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmFundingSourceNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public ScmPurchaseRequisitionCreateBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _requestStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::AggieEnterpriseApi.RequestStatus>("RequestStatus") ?? throw new global::System.ArgumentException("No serializer for type `RequestStatus` found.");
            _nonEmptyTrimmedString80Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString80") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString80` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _nonEmptyTrimmedString30Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString30") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString30` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _emailAddressParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("EmailAddress") ?? throw new global::System.ArgumentException("No serializer for type `EmailAddress` found.");
            _nonEmptyTrimmedString1000Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString1000") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString1000` found.");
            _localDateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("LocalDate") ?? throw new global::System.ArgumentException("No serializer for type `LocalDate` found.");
            _nonNegativeFloatParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("NonNegativeFloat") ?? throw new global::System.ArgumentException("No serializer for type `NonNegativeFloat` found.");
            _nonEmptyTrimmedString25Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString25") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString25` found.");
            _nonEmptyTrimmedString60Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString60") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString60` found.");
            _glSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("GlSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `GlSegmentString` found.");
            _ppmSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `PpmSegmentString` found.");
            _erpEntityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpEntityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpEntityCode` found.");
            _erpFundCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFundCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpFundCode` found.");
            _erpDepartmentCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDepartmentCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpDepartmentCode` found.");
            _erpAccountCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpAccountCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpAccountCode` found.");
            _erpPurposeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpPurposeCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpPurposeCode` found.");
            _erpProjectCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProjectCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProjectCode` found.");
            _erpProgramCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProgramCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProgramCode` found.");
            _erpActivityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpActivityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpActivityCode` found.");
            _erpFlex1CodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFlex1Code") ?? throw new global::System.ArgumentException("No serializer for type `ErpFlex1Code` found.");
            _erpFlex2CodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFlex2Code") ?? throw new global::System.ArgumentException("No serializer for type `ErpFlex2Code` found.");
            _ppmProjectNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmProjectNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmProjectNumber` found.");
            _ppmTaskNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmTaskNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmTaskNumber` found.");
            _ppmExpenseOrganizationCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmExpenseOrganizationCode") ?? throw new global::System.ArgumentException("No serializer for type `PpmExpenseOrganizationCode` found.");
            _ppmExpenseTypeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmExpenseTypeCode") ?? throw new global::System.ArgumentException("No serializer for type `PpmExpenseTypeCode` found.");
            _ppmAwardNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmAwardNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmAwardNumber` found.");
            _ppmFundingSourceNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmFundingSourceNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmFundingSourceNumber` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IScmPurchaseRequisitionCreateResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IScmPurchaseRequisitionCreateResult Result, ScmPurchaseRequisitionCreateResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IScmPurchaseRequisitionCreateResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IScmPurchaseRequisitionCreateResult, ScmPurchaseRequisitionCreateResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ScmPurchaseRequisitionCreateResultInfo(DeserializeNonNullableIScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "scmPurchaseRequisitionCreate")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.ScmPurchaseRequisitionRequestStatusOutputData DeserializeNonNullableIScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ScmPurchaseRequisitionRequestStatusOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ScmPurchaseRequisitionRequestStatusOutputData(typename, requestStatus: DeserializeNonNullableIScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestStatus")), validationResults: DeserializeIScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResults")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ActionRequestStatusData DeserializeNonNullableIScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_RequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ActionRequestStatus", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ActionRequestStatusData(typename, requestId: DeserializeGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestId")), requestStatus: DeserializeNonNullableRequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestStatus")), processedDateTime: DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "processedDateTime")), errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid? DeserializeGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.RequestStatus DeserializeNonNullableRequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _requestStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData? DeserializeIScmPurchaseRequisitionCreate_ScmPurchaseRequisitionCreate_ValidationResults(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, valid: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valid")), errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), messageProperties: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "messageProperties")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionRequestStatusBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::AggieEnterpriseApi.RequestStatus> _requestStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString80Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public ScmPurchaseRequisitionRequestStatusBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _requestStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::AggieEnterpriseApi.RequestStatus>("RequestStatus") ?? throw new global::System.ArgumentException("No serializer for type `RequestStatus` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _nonEmptyTrimmedString80Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString80") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString80` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IScmPurchaseRequisitionRequestStatusResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IScmPurchaseRequisitionRequestStatusResult Result, ScmPurchaseRequisitionRequestStatusResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IScmPurchaseRequisitionRequestStatusResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IScmPurchaseRequisitionRequestStatusResult, ScmPurchaseRequisitionRequestStatusResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ScmPurchaseRequisitionRequestStatusResultInfo(DeserializeIScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "scmPurchaseRequisitionRequestStatus")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.ScmPurchaseRequisitionRequestStatusOutputData? DeserializeIScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ScmPurchaseRequisitionRequestStatusOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ScmPurchaseRequisitionRequestStatusOutputData(typename, requestStatus: DeserializeNonNullableIScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestStatus")), validationResults: DeserializeIScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResults")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ActionRequestStatusData DeserializeNonNullableIScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_RequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ActionRequestStatus", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ActionRequestStatusData(typename, requestId: DeserializeGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestId")), consumerTrackingId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "consumerTrackingId")), consumerReferenceId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "consumerReferenceId")), consumerNotes: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "consumerNotes")), requestDateTime: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestDateTime")), requestStatus: DeserializeNonNullableRequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestStatus")), lastStatusDateTime: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastStatusDateTime")), processedDateTime: DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "processedDateTime")), errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid? DeserializeGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _nonEmptyTrimmedString80Parser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _nonEmptyTrimmedString240Parser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.RequestStatus DeserializeNonNullableRequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _requestStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData? DeserializeIScmPurchaseRequisitionRequestStatus_ScmPurchaseRequisitionRequestStatus_ValidationResults(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, valid: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valid")), errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), messageProperties: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "messageProperties")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategoryByCodeBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpUserIdParser;
        public ScmPurchasingCategoryByCodeBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _erpUserIdParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpUserId") ?? throw new global::System.ArgumentException("No serializer for type `ErpUserId` found.");
        }

        public global::StrawberryShake.IOperationResult<IScmPurchasingCategoryByCodeResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IScmPurchasingCategoryByCodeResult Result, ScmPurchasingCategoryByCodeResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IScmPurchasingCategoryByCodeResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IScmPurchasingCategoryByCodeResult, ScmPurchasingCategoryByCodeResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? scmPurchasingCategoryByCodeId = default !;
            _entityStore.Update(session =>
            {
                scmPurchasingCategoryByCodeId = UpdateIScmPurchasingCategoryByCode_ScmPurchasingCategoryByCodeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "scmPurchasingCategoryByCode"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ScmPurchasingCategoryByCodeResultInfo(scmPurchasingCategoryByCodeId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIScmPurchasingCategoryByCode_ScmPurchasingCategoryByCodeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ScmPurchasingCategory", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "categoryContentCode")), DeserializeDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startDateActive")), DeserializeDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDateActive")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastUpdateDateTime")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastUpdateUserId"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "categoryContentCode")), DeserializeDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startDateActive")), DeserializeDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDateActive")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastUpdateDateTime")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastUpdateUserId"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTime? DeserializeDateTime(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategorySearchBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchasingCategorySearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchasingCategorySearchResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _positiveIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _nonNegativeIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        public ScmPurchasingCategorySearchBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchasingCategorySearchResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _positiveIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("PositiveInt") ?? throw new global::System.ArgumentException("No serializer for type `PositiveInt` found.");
            _nonNegativeIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("NonNegativeInt") ?? throw new global::System.ArgumentException("No serializer for type `NonNegativeInt` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
        }

        public global::StrawberryShake.IOperationResult<IScmPurchasingCategorySearchResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IScmPurchasingCategorySearchResult Result, ScmPurchasingCategorySearchResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IScmPurchasingCategorySearchResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IScmPurchasingCategorySearchResult, ScmPurchasingCategorySearchResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::AggieEnterpriseApi.State.ScmPurchasingCategorySearchResultsData scmPurchasingCategorySearchId = default !;
            _entityStore.Update(session =>
            {
                scmPurchasingCategorySearchId = DeserializeNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "scmPurchasingCategorySearch"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ScmPurchasingCategorySearchResultInfo(scmPurchasingCategorySearchId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.ScmPurchasingCategorySearchResultsData DeserializeNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ScmPurchasingCategorySearchResults", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ScmPurchasingCategorySearchResultsData(typename, metadata: DeserializeNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "metadata")), data: UpdateNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch_DataEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.SearchResultMetadataData DeserializeNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Metadata(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SearchResultMetadata", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.SearchResultMetadataData(typename, sort: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sort")), limit: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "limit")), returnedResultCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "returnedResultCount")), startIndex: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startIndex")), nextStartIndex: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nextStartIndex")), totalResultCount: DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalResultCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _positiveIntParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _nonNegativeIntParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch_DataEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var scmPurchasingCategorys = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                scmPurchasingCategorys.Add(UpdateNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch_DataEntity(session, child, entityIds));
            }

            return scmPurchasingCategorys;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIScmPurchasingCategorySearch_ScmPurchasingCategorySearch_DataEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ScmPurchasingCategory", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "categoryContentCode")), DeserializeDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startDateActive")), DeserializeDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDateActive")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), entity.LastUpdateDateTime, entity.LastUpdateUserId));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "categoryContentCode")), DeserializeDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startDateActive")), DeserializeDateTime(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDateActive")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.DateTime? DeserializeDateTime(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierSearchBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmSupplierSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmSupplierSearchResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _positiveIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _nonNegativeIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString360Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString15Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _scmAddressLineParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _cityNameParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString60Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpPostalCodeParser;
        public ScmSupplierSearchBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmSupplierSearchResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _positiveIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("PositiveInt") ?? throw new global::System.ArgumentException("No serializer for type `PositiveInt` found.");
            _nonNegativeIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("NonNegativeInt") ?? throw new global::System.ArgumentException("No serializer for type `NonNegativeInt` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _nonEmptyTrimmedString360Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString360") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString360` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _nonEmptyTrimmedString15Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString15") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString15` found.");
            _scmAddressLineParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ScmAddressLine") ?? throw new global::System.ArgumentException("No serializer for type `ScmAddressLine` found.");
            _cityNameParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("CityName") ?? throw new global::System.ArgumentException("No serializer for type `CityName` found.");
            _nonEmptyTrimmedString60Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString60") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString60` found.");
            _erpPostalCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpPostalCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpPostalCode` found.");
        }

        public global::StrawberryShake.IOperationResult<IScmSupplierSearchResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IScmSupplierSearchResult Result, ScmSupplierSearchResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IScmSupplierSearchResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IScmSupplierSearchResult, ScmSupplierSearchResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new ScmSupplierSearchResultInfo(DeserializeNonNullableIScmSupplierSearch_ScmSupplierSearch(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "scmSupplierSearch")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.ScmSupplierSearchResultsData DeserializeNonNullableIScmSupplierSearch_ScmSupplierSearch(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ScmSupplierSearchResults", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ScmSupplierSearchResultsData(typename, data: DeserializeNonNullableIScmSupplierSearch_ScmSupplierSearch_DataNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ScmSupplierData> DeserializeNonNullableIScmSupplierSearch_ScmSupplierSearch_DataNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var scmSuppliers = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.State.ScmSupplierData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                scmSuppliers.Add(DeserializeNonNullableIScmSupplierSearch_ScmSupplierSearch_Data(child));
            }

            return scmSuppliers;
        }

        private global::AggieEnterpriseApi.State.ScmSupplierData DeserializeNonNullableIScmSupplierSearch_ScmSupplierSearch_Data(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ScmSupplier", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ScmSupplierData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), supplierNumber: DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supplierNumber")), sites: DeserializeNonNullableIScmSupplierSearch_ScmSupplierSearch_Data_SitesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "sites")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _nonEmptyTrimmedString360Parser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ScmSupplierSiteData> DeserializeNonNullableIScmSupplierSearch_ScmSupplierSearch_Data_SitesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var scmSupplierSites = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.State.ScmSupplierSiteData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                scmSupplierSites.Add(DeserializeNonNullableIScmSupplierSearch_ScmSupplierSearch_Data_Sites(child));
            }

            return scmSupplierSites;
        }

        private global::AggieEnterpriseApi.State.ScmSupplierSiteData DeserializeNonNullableIScmSupplierSearch_ScmSupplierSearch_Data_Sites(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ScmSupplierSite", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ScmSupplierSiteData(typename, supplierSiteCode: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "supplierSiteCode")), location: DeserializeIScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "location")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ErpLocationData? DeserializeIScmSupplierSearch_ScmSupplierSearch_Data_Sites_Location(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ErpLocation", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ErpLocationData(typename, addressLine1: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addressLine1")), addressLine2: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addressLine2")), addressLine3: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addressLine3")), addressLine4: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "addressLine4")), city: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "city")), state: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "state")), postalCode: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "postalCode")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _scmAddressLineParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeSearchBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmExpenditureTypeSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmExpenditureTypeSearchResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _positiveIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _nonNegativeIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        public PpmExpenditureTypeSearchBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmExpenditureTypeSearchResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _positiveIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("PositiveInt") ?? throw new global::System.ArgumentException("No serializer for type `PositiveInt` found.");
            _nonNegativeIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("NonNegativeInt") ?? throw new global::System.ArgumentException("No serializer for type `NonNegativeInt` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
        }

        public global::StrawberryShake.IOperationResult<IPpmExpenditureTypeSearchResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IPpmExpenditureTypeSearchResult Result, PpmExpenditureTypeSearchResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IPpmExpenditureTypeSearchResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IPpmExpenditureTypeSearchResult, PpmExpenditureTypeSearchResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? ppmExpenditureTypeByCodeId = default !;
            global::AggieEnterpriseApi.State.PpmExpenditureTypeSearchResultsData ppmExpenditureTypeSearchId = default !;
            _entityStore.Update(session =>
            {
                ppmExpenditureTypeByCodeId = UpdateIPpmExpenditureTypeSearch_PpmExpenditureTypeByCodeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ppmExpenditureTypeByCode"), entityIds);
                ppmExpenditureTypeSearchId = DeserializeNonNullableIPpmExpenditureTypeSearch_PpmExpenditureTypeSearch(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ppmExpenditureTypeSearch"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new PpmExpenditureTypeSearchResultInfo(ppmExpenditureTypeByCodeId, ppmExpenditureTypeSearchId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIPpmExpenditureTypeSearch_PpmExpenditureTypeByCodeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("PpmExpenditureType", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.State.PpmExpenditureTypeSearchResultsData DeserializeNonNullableIPpmExpenditureTypeSearch_PpmExpenditureTypeSearch(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PpmExpenditureTypeSearchResults", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.PpmExpenditureTypeSearchResultsData(typename, data: UpdateNonNullableIPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_DataEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_DataEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var ppmExpenditureTypes = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                ppmExpenditureTypes.Add(UpdateNonNullableIPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_DataEntity(session, child, entityIds));
            }

            return ppmExpenditureTypes;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIPpmExpenditureTypeSearch_PpmExpenditureTypeSearch_DataEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("PpmExpenditureType", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationSearchBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmOrganizationSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmOrganizationSearchResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _positiveIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _nonNegativeIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString100Parser;
        public PpmOrganizationSearchBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmOrganizationSearchResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _positiveIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("PositiveInt") ?? throw new global::System.ArgumentException("No serializer for type `PositiveInt` found.");
            _nonNegativeIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("NonNegativeInt") ?? throw new global::System.ArgumentException("No serializer for type `NonNegativeInt` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _nonEmptyTrimmedString100Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString100") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString100` found.");
        }

        public global::StrawberryShake.IOperationResult<IPpmOrganizationSearchResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IPpmOrganizationSearchResult Result, PpmOrganizationSearchResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IPpmOrganizationSearchResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IPpmOrganizationSearchResult, PpmOrganizationSearchResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? ppmOrganizationId = default !;
            global::AggieEnterpriseApi.State.PpmOrganizationSearchResultsData ppmOrganizationSearchId = default !;
            _entityStore.Update(session =>
            {
                ppmOrganizationId = UpdateIPpmOrganizationSearch_PpmOrganizationEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ppmOrganization"), entityIds);
                ppmOrganizationSearchId = DeserializeNonNullableIPpmOrganizationSearch_PpmOrganizationSearch(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ppmOrganizationSearch"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new PpmOrganizationSearchResultInfo(ppmOrganizationId, ppmOrganizationSearchId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIPpmOrganizationSearch_PpmOrganizationEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("PpmOrganization", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.PpmOrganizationEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmOrganizationEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmOrganizationEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.State.PpmOrganizationSearchResultsData DeserializeNonNullableIPpmOrganizationSearch_PpmOrganizationSearch(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PpmOrganizationSearchResults", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.PpmOrganizationSearchResultsData(typename, data: UpdateNonNullableIPpmOrganizationSearch_PpmOrganizationSearch_DataEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIPpmOrganizationSearch_PpmOrganizationSearch_DataEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var ppmOrganizations = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                ppmOrganizations.Add(UpdateNonNullableIPpmOrganizationSearch_PpmOrganizationSearch_DataEntity(session, child, entityIds));
            }

            return ppmOrganizations;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIPpmOrganizationSearch_PpmOrganizationSearch_DataEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("PpmOrganization", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.PpmOrganizationEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmOrganizationEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmOrganizationEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectSearchBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmProjectSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmProjectSearchResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _positiveIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _nonNegativeIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmProjectNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        public PpmProjectSearchBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmProjectSearchResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _positiveIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("PositiveInt") ?? throw new global::System.ArgumentException("No serializer for type `PositiveInt` found.");
            _nonNegativeIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("NonNegativeInt") ?? throw new global::System.ArgumentException("No serializer for type `NonNegativeInt` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _ppmProjectNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmProjectNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmProjectNumber` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
        }

        public global::StrawberryShake.IOperationResult<IPpmProjectSearchResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IPpmProjectSearchResult Result, PpmProjectSearchResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IPpmProjectSearchResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IPpmProjectSearchResult, PpmProjectSearchResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? ppmProjectByNumberId = default !;
            global::AggieEnterpriseApi.State.PpmProjectSearchResultsData ppmProjectSearchId = default !;
            _entityStore.Update(session =>
            {
                ppmProjectByNumberId = UpdateIPpmProjectSearch_PpmProjectByNumberEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ppmProjectByNumber"), entityIds);
                ppmProjectSearchId = DeserializeNonNullableIPpmProjectSearch_PpmProjectSearch(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ppmProjectSearch"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new PpmProjectSearchResultInfo(ppmProjectByNumberId, ppmProjectSearchId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIPpmProjectSearch_PpmProjectByNumberEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("PpmProject", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.PpmProjectEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmProjectEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectNumber")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmProjectEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectNumber")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _ppmProjectNumberParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.State.PpmProjectSearchResultsData DeserializeNonNullableIPpmProjectSearch_PpmProjectSearch(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PpmProjectSearchResults", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.PpmProjectSearchResultsData(typename, data: UpdateNonNullableIPpmProjectSearch_PpmProjectSearch_DataEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIPpmProjectSearch_PpmProjectSearch_DataEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var ppmProjects = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                ppmProjects.Add(UpdateNonNullableIPpmProjectSearch_PpmProjectSearch_DataEntity(session, child, entityIds));
            }

            return ppmProjects;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIPpmProjectSearch_PpmProjectSearch_DataEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("PpmProject", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.PpmProjectEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmProjectEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectNumber")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmProjectEntity(DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectNumber")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskSearchBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmTaskSearchResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmTaskSearchResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _positiveIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _nonNegativeIntParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString100Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        public PpmTaskSearchBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmTaskSearchResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _positiveIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("PositiveInt") ?? throw new global::System.ArgumentException("No serializer for type `PositiveInt` found.");
            _nonNegativeIntParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("NonNegativeInt") ?? throw new global::System.ArgumentException("No serializer for type `NonNegativeInt` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _nonEmptyTrimmedString100Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString100") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString100` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
        }

        public global::StrawberryShake.IOperationResult<IPpmTaskSearchResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IPpmTaskSearchResult Result, PpmTaskSearchResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IPpmTaskSearchResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IPpmTaskSearchResult, PpmTaskSearchResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::AggieEnterpriseApi.State.PpmTaskSearchResultsData ppmTaskSearchId = default !;
            _entityStore.Update(session =>
            {
                ppmTaskSearchId = DeserializeNonNullableIPpmTaskSearch_PpmTaskSearch(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ppmTaskSearch"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new PpmTaskSearchResultInfo(ppmTaskSearchId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.PpmTaskSearchResultsData DeserializeNonNullableIPpmTaskSearch_PpmTaskSearch(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PpmTaskSearchResults", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.PpmTaskSearchResultsData(typename, data: UpdateNonNullableIPpmTaskSearch_PpmTaskSearch_DataEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "data"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId> UpdateNonNullableIPpmTaskSearch_PpmTaskSearch_DataEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var ppmTasks = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                ppmTasks.Add(UpdateNonNullableIPpmTaskSearch_PpmTaskSearch_DataEntity(session, child, entityIds));
            }

            return ppmTasks;
        }

        private global::StrawberryShake.EntityId UpdateNonNullableIPpmTaskSearch_PpmTaskSearch_DataEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("PpmTask", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.PpmTaskEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmTaskEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "taskNumber")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Billable, entity.Chargeable, entity.EligibleForUse, entity.GlPostingProgramCode, entity.GlPostingPurposeCode, entity.GlPostingFundCode, entity.GlPostingActivityCode, DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectId"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.PpmTaskEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "taskNumber")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, default !, DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectId"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _nonEmptyTrimmedString100Parser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartSegmentsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpEntityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFundCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDepartmentCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpAccountCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpPurposeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProjectCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProgramCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpActivityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFlex1CodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFlex2CodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _glSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _localDateParser;
        public GlValidateChartSegmentsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartSegmentsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _erpEntityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpEntityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpEntityCode` found.");
            _erpFundCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFundCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpFundCode` found.");
            _erpDepartmentCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDepartmentCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpDepartmentCode` found.");
            _erpAccountCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpAccountCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpAccountCode` found.");
            _erpPurposeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpPurposeCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpPurposeCode` found.");
            _erpProjectCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProjectCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProjectCode` found.");
            _erpProgramCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProgramCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProgramCode` found.");
            _erpActivityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpActivityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpActivityCode` found.");
            _erpFlex1CodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFlex1Code") ?? throw new global::System.ArgumentException("No serializer for type `ErpFlex1Code` found.");
            _erpFlex2CodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFlex2Code") ?? throw new global::System.ArgumentException("No serializer for type `ErpFlex2Code` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _glSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("GlSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `GlSegmentString` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _localDateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("LocalDate") ?? throw new global::System.ArgumentException("No serializer for type `LocalDate` found.");
        }

        public global::StrawberryShake.IOperationResult<IGlValidateChartSegmentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGlValidateChartSegmentsResult Result, GlValidateChartSegmentsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGlValidateChartSegmentsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGlValidateChartSegmentsResult, GlValidateChartSegmentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GlValidateChartSegmentsResultInfo(DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glValidateChartSegments")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlValidateChartSegmentsOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData(typename, validationResponse: DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_ValidationResponse(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResponse")), segments: DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_Segments(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segments")), completeChartstring: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completeChartstring")), codeCombinationId: DeserializeInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "codeCombinationId")), segmentNames: DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_SegmentNames(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentNames")), warnings: DeserializeIGlValidateChartSegments_GlValidateChartSegments_WarningsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "warnings")), endDates: DeserializeIGlValidateChartSegments_GlValidateChartSegments_EndDatesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDates")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_ValidationResponse(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), messageProperties: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "messageProperties")), valid: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valid")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::AggieEnterpriseApi.State.GlSegmentsData DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_Segments(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlSegments", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlSegmentsData(typename, account: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "account")), activity: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activity")), department: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "department")), entity: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "entity")), fund: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fund")), program: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "program")), project: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "project")), purpose: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purpose")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _erpAccountCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int64? DeserializeInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::AggieEnterpriseApi.State.GlSegmentNamesData DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_SegmentNames(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlSegmentNames", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlSegmentNamesData(typename, entityName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "entityName")), fundName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fundName")), departmentName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "departmentName")), accountName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accountName")), purposeName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purposeName")), projectName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectName")), programName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "programName")), activityName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activityName")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentWarningData>? DeserializeIGlValidateChartSegments_GlValidateChartSegments_WarningsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var segmentWarnings = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.State.SegmentWarningData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                segmentWarnings.Add(DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_Warnings(child));
            }

            return segmentWarnings;
        }

        private global::AggieEnterpriseApi.State.SegmentWarningData DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_Warnings(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SegmentWarning", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.SegmentWarningData(typename, segmentName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentName")), warning: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "warning")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentEndDateData>? DeserializeIGlValidateChartSegments_GlValidateChartSegments_EndDatesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var segmentEndDates = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.State.SegmentEndDateData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                segmentEndDates.Add(DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_EndDates(child));
            }

            return segmentEndDates;
        }

        private global::AggieEnterpriseApi.State.SegmentEndDateData DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_EndDates(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SegmentEndDate", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.SegmentEndDateData(typename, segmentName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentName")), endDate: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDate")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstringBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartstringResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartstringResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _glSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpAccountCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpActivityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDepartmentCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpEntityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFundCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProgramCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProjectCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpPurposeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _localDateParser;
        public GlValidateChartstringBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartstringResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _glSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("GlSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `GlSegmentString` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _erpAccountCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpAccountCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpAccountCode` found.");
            _erpActivityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpActivityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpActivityCode` found.");
            _erpDepartmentCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDepartmentCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpDepartmentCode` found.");
            _erpEntityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpEntityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpEntityCode` found.");
            _erpFundCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFundCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpFundCode` found.");
            _erpProgramCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProgramCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProgramCode` found.");
            _erpProjectCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProjectCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProjectCode` found.");
            _erpPurposeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpPurposeCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpPurposeCode` found.");
            _localDateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("LocalDate") ?? throw new global::System.ArgumentException("No serializer for type `LocalDate` found.");
        }

        public global::StrawberryShake.IOperationResult<IGlValidateChartstringResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGlValidateChartstringResult Result, GlValidateChartstringResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGlValidateChartstringResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGlValidateChartstringResult, GlValidateChartstringResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GlValidateChartstringResultInfo(DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glValidateChartstring")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlValidateChartSegmentsOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData(typename, validationResponse: DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_ValidationResponse(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResponse")), segments: DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_Segments(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segments")), completeChartstring: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completeChartstring")), codeCombinationId: DeserializeInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "codeCombinationId")), segmentNames: DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_SegmentNames(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentNames")), warnings: DeserializeIGlValidateChartstring_GlValidateChartstring_WarningsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "warnings")), endDates: DeserializeIGlValidateChartstring_GlValidateChartstring_EndDatesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDates")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_ValidationResponse(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), messageProperties: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "messageProperties")), valid: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valid")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::AggieEnterpriseApi.State.GlSegmentsData DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_Segments(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlSegments", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlSegmentsData(typename, account: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "account")), activity: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activity")), department: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "department")), entity: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "entity")), fund: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fund")), program: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "program")), project: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "project")), purpose: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purpose")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _erpAccountCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int64? DeserializeInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::AggieEnterpriseApi.State.GlSegmentNamesData DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_SegmentNames(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlSegmentNames", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlSegmentNamesData(typename, entityName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "entityName")), fundName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fundName")), departmentName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "departmentName")), accountName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accountName")), purposeName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purposeName")), projectName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectName")), programName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "programName")), activityName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activityName")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentWarningData>? DeserializeIGlValidateChartstring_GlValidateChartstring_WarningsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var segmentWarnings = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.State.SegmentWarningData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                segmentWarnings.Add(DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_Warnings(child));
            }

            return segmentWarnings;
        }

        private global::AggieEnterpriseApi.State.SegmentWarningData DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_Warnings(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SegmentWarning", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.SegmentWarningData(typename, segmentName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentName")), warning: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "warning")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentEndDateData>? DeserializeIGlValidateChartstring_GlValidateChartstring_EndDatesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var segmentEndDates = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.State.SegmentEndDateData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                segmentEndDates.Add(DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_EndDates(child));
            }

            return segmentEndDates;
        }

        private global::AggieEnterpriseApi.State.SegmentEndDateData DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_EndDates(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SegmentEndDate", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.SegmentEndDateData(typename, segmentName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentName")), endDate: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDate")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    ///<summary>Wrapper object for search results for ErpInstitutionLocation</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpInstitutionLocationSearchResultsData
    {
        public ErpInstitutionLocationSearchResultsData(global::System.String __typename, global::AggieEnterpriseApi.State.SearchResultMetadataData? metadata = default !, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ErpInstitutionLocationData>? data = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Metadata = metadata;
            Data = data;
        }

        public global::System.String __typename { get; }

        ///<summary>Information about the search results returned.</summary>
        public global::AggieEnterpriseApi.State.SearchResultMetadataData? Metadata { get; }

        ///<summary>Results of the search</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ErpInstitutionLocationData>? Data { get; }
    }

    ///<summary>Metadata about the search results returned in a given response.Used to provide metrics of the results and the information necessaryto pull in the next set of records.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class SearchResultMetadataData
    {
        public SearchResultMetadataData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::System.String>? sort = default !, global::System.Int32? limit = default !, global::System.Int32? returnedResultCount = default !, global::System.Int32? startIndex = default !, global::System.Int32? nextStartIndex = default !, global::System.Int32? totalResultCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Sort = sort;
            Limit = limit;
            ReturnedResultCount = returnedResultCount;
            StartIndex = startIndex;
            NextStartIndex = nextStartIndex;
            TotalResultCount = totalResultCount;
        }

        public global::System.String __typename { get; }

        ///<summary>Array of property names used to sort the results</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Sort { get; }

        ///<summary>requested limit to the number of records to retrieve</summary>
        public global::System.Int32? Limit { get; }

        ///<summary>Results returned in the data property.</summary>
        public global::System.Int32? ReturnedResultCount { get; }

        ///<summary>Starting index for the current result set.</summary>
        public global::System.Int32? StartIndex { get; }

        ///<summary>Start index for getting the next page of results.  Unset if there are no more results.</summary>
        public global::System.Int32? NextStartIndex { get; }

        ///<summary>Total number of results.  Will only be populated if `includeTotalResultCount` is true in the search request.</summary>
        public global::System.Int32? TotalResultCount { get; }
    }

    ///<summary>UC Davis locations that can be used for delivery or receiving locations.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpInstitutionLocationData
    {
        public ErpInstitutionLocationData(global::System.String __typename, global::System.Int64? locationId = default !, global::System.String? locationCode = default !, global::System.String? addressLine1 = default !, global::System.String? addressLine2 = default !, global::System.String? addressLine3 = default !, global::System.String? addressLine4 = default !, global::System.String? city = default !, global::System.String? state = default !, global::System.String? postalCode = default !, global::System.Boolean? receivingSite = default !, global::System.Boolean? deliverySite = default !, global::System.Boolean? enabled = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            LocationId = locationId;
            LocationCode = locationCode;
            AddressLine1 = addressLine1;
            AddressLine2 = addressLine2;
            AddressLine3 = addressLine3;
            AddressLine4 = addressLine4;
            City = city;
            State = state;
            PostalCode = postalCode;
            ReceivingSite = receivingSite;
            DeliverySite = deliverySite;
            Enabled = enabled;
        }

        public global::System.String __typename { get; }

        ///<summary>Value that uniquely identifies the supplier site internally to Oracle.</summary>
        public global::System.Int64? LocationId { get; }

        ///<summary>Value that uniquely identifies the supplier site for use on interfaces and in the Oracle UI.</summary>
        public global::System.String? LocationCode { get; }

        ///<summary>Address Line 1</summary>
        public global::System.String? AddressLine1 { get; }

        ///<summary>Address Line 2</summary>
        public global::System.String? AddressLine2 { get; }

        ///<summary>Address Line 3</summary>
        public global::System.String? AddressLine3 { get; }

        ///<summary>Address Line 4</summary>
        public global::System.String? AddressLine4 { get; }

        ///<summary>City Name</summary>
        public global::System.String? City { get; }

        ///<summary>State Code</summary>
        public global::System.String? State { get; }

        ///<summary>Postal code</summary>
        public global::System.String? PostalCode { get; }

        ///<summary>Whether the location can be used as the receiving address for a purchase order.</summary>
        public global::System.Boolean? ReceivingSite { get; }

        ///<summary>Whether the location can be used as the delivery address for a requisition.</summary>
        public global::System.Boolean? DeliverySite { get; }

        ///<summary>Whether this address is enabled for current use.</summary>
        public global::System.Boolean? Enabled { get; }
    }

    ///<summary>Wrapper object for search results for ErpUnitOfMeasure</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpUnitOfMeasureSearchResultsData
    {
        public ErpUnitOfMeasureSearchResultsData(global::System.String __typename, global::AggieEnterpriseApi.State.SearchResultMetadataData? metadata = default !, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ErpUnitOfMeasureData>? data = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Metadata = metadata;
            Data = data;
        }

        public global::System.String __typename { get; }

        ///<summary>Information about the search results returned.</summary>
        public global::AggieEnterpriseApi.State.SearchResultMetadataData? Metadata { get; }

        ///<summary>Results of the search</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ErpUnitOfMeasureData>? Data { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpUnitOfMeasureData
    {
        public ErpUnitOfMeasureData(global::System.String __typename, global::System.String? uomCode = default !, global::System.String? name = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            UomCode = uomCode;
            Name = name;
        }

        public global::System.String __typename { get; }

        ///<summary>Unique short code assigned to a Unit of Measure (UOM)</summary>
        public global::System.String? UomCode { get; }

        ///<summary>Translatable Unit of Measure (UOM) name</summary>
        public global::System.String? Name { get; }
    }

    ///<summary>Output type for GLJournal requests and follow-up status updates.Contains the overall request status.  After a successful creation of the journal, will also contain the Oracle Financials assigned journal ID.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusOutputData
    {
        public GlJournalRequestStatusOutputData(global::System.String __typename, global::AggieEnterpriseApi.State.ActionRequestStatusData? requestStatus = default !, global::AggieEnterpriseApi.State.ValidationResponseData? validationResults = default !, global::AggieEnterpriseApi.State.ProcessingResultData? processingResult = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            RequestStatus = requestStatus;
            ValidationResults = validationResults;
            ProcessingResult = processingResult;
        }

        public global::System.String __typename { get; }

        ///<summary>Overall status of the action request</summary>
        public global::AggieEnterpriseApi.State.ActionRequestStatusData? RequestStatus { get; }

        ///<summary>Errors found when validating the payload data.  These must be corrected before the request will be accepted.</summary>
        public global::AggieEnterpriseApi.State.ValidationResponseData? ValidationResults { get; }

        ///<summary>Results of the Job or Jobs required to submit this request to the ERP.</summary>
        public global::AggieEnterpriseApi.State.ProcessingResultData? ProcessingResult { get; }
    }

    ///<summary>Fields common to all action status requests.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ActionRequestStatusData
    {
        public ActionRequestStatusData(global::System.String __typename, global::System.Guid? requestId = default !, global::System.String? consumerId = default !, global::System.DateTimeOffset? requestDateTime = default !, global::AggieEnterpriseApi.RequestStatus? requestStatus = default !, global::System.String? operationName = default !, global::System.String? statusRequestPayload = default !, global::System.DateTimeOffset? lastStatusDateTime = default !, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages = default !, global::System.DateTimeOffset? processedDateTime = default !, global::System.String? boundaryApplicationName = default !, global::System.String? consumerNotes = default !, global::System.String? consumerReferenceId = default !, global::System.String? consumerTrackingId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            RequestId = requestId;
            ConsumerId = consumerId;
            RequestDateTime = requestDateTime;
            RequestStatus = requestStatus;
            OperationName = operationName;
            StatusRequestPayload = statusRequestPayload;
            LastStatusDateTime = lastStatusDateTime;
            ErrorMessages = errorMessages;
            ProcessedDateTime = processedDateTime;
            BoundaryApplicationName = boundaryApplicationName;
            ConsumerNotes = consumerNotes;
            ConsumerReferenceId = consumerReferenceId;
            ConsumerTrackingId = consumerTrackingId;
        }

        public global::System.String __typename { get; }

        ///<summary>Unique identifier assigned to the request</summary>
        public global::System.Guid? RequestId { get; }

        ///<summary>ID of the consumer who made the request extracted from the service authentication data</summary>
        public global::System.String? ConsumerId { get; }

        public global::System.DateTimeOffset? RequestDateTime { get; }

        public global::AggieEnterpriseApi.RequestStatus? RequestStatus { get; }

        ///<summary>Name of the operation called.</summary>
        public global::System.String? OperationName { get; }

        ///<summary>GraphQL Payload to post back to this server to check on the status of the request.</summary>
        public global::System.String? StatusRequestPayload { get; }

        ///<summary>When the status last changed</summary>
        public global::System.DateTimeOffset? LastStatusDateTime { get; }

        ///<summary>Error information if the request failed during processing.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        ///<summary>When the request was processed by the ERP system</summary>
        public global::System.DateTimeOffset? ProcessedDateTime { get; }

        ///<summary>Identifier for the boundary application originating the request.</summary>
        public global::System.String? BoundaryApplicationName { get; }

        ///<summary>Any notes to include with the request, this is stored as metadata to provide context to the request.</summary>
        public global::System.String? ConsumerNotes { get; }

        ///<summary>Identifier provided by the consumer which usually references the source record within their system.  Does not need to be unique.</summary>
        public global::System.String? ConsumerReferenceId { get; }

        ///<summary>Identifier provided by the consumer to track requests internally.  It is recommended that this be a globally unique identfier tracked in their system.  Can be used to match up data in the caller's system.</summary>
        public global::System.String? ConsumerTrackingId { get; }
    }

    ///<summary>Contains the validation overall status and any error messages and the properties they belong to.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ValidationResponseData
    {
        public ValidationResponseData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages = default !, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties = default !, global::System.Boolean? valid = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
            Valid = valid;
        }

        public global::System.String __typename { get; }

        ///<summary>Array of all errors found during validation.  The failed property is in the matching index in the `messageProperties` list.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        ///<summary>Property names which failed validation.  May be blank if the validation applies to the entire payload or no particular property.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        ///<summary>Whether the overall validation succeeded or failed.</summary>
        public global::System.Boolean? Valid { get; }
    }

    ///<summary>Result of the attempt to process the action request in the destination system</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ProcessingResultData
    {
        public ProcessingResultData(global::System.String __typename, global::System.String? status = default !, global::System.DateTimeOffset? processedDateTime = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Status = status;
            ProcessedDateTime = processedDateTime;
        }

        public global::System.String __typename { get; }

        public global::System.String? Status { get; }

        ///<summary>Time the request was noted as completed processing, whether successful or not.</summary>
        public global::System.DateTimeOffset? ProcessedDateTime { get; }
    }

    ///<summary>Return type when requesting conversion of a KFS Account to the Oracle costing segments.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class KfsConvertAccountOutputData
    {
        public KfsConvertAccountOutputData(global::System.String __typename, global::System.Boolean? mappingFound = default !, global::AggieEnterpriseApi.State.GlCostCenterSegmentsData? glSegments = default !, global::AggieEnterpriseApi.State.PpmCostCenterSegmentsData? ppmSegments = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            MappingFound = mappingFound;
            GlSegments = glSegments;
            PpmSegments = ppmSegments;
        }

        public global::System.String __typename { get; }

        ///<summary>Whether the account was found in the mapping table</summary>
        public global::System.Boolean? MappingFound { get; }

        ///<summary>If a GL cost center, the segments which could be derived from the given chart-account.</summary>
        public global::AggieEnterpriseApi.State.GlCostCenterSegmentsData? GlSegments { get; }

        ///<summary>If a POET cost center, the segments which could be derived from the given chart-account.</summary>
        public global::AggieEnterpriseApi.State.PpmCostCenterSegmentsData? PpmSegments { get; }
    }

    ///<summary>Cost-center components of Oracle GL Segments which can be derived from the KFS Chart-Account-Sub Account-Project.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlCostCenterSegmentsData
    {
        public GlCostCenterSegmentsData(global::System.String __typename, global::System.String? entity = default !, global::System.String? fund = default !, global::System.String? department = default !, global::System.String? purpose = default !, global::System.String? project = default !, global::System.String? program = default !, global::System.String? activity = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Entity = entity;
            Fund = fund;
            Department = department;
            Purpose = purpose;
            Project = project;
            Program = program;
            Activity = activity;
        }

        public global::System.String __typename { get; }

        public global::System.String? Entity { get; }

        public global::System.String? Fund { get; }

        public global::System.String? Department { get; }

        public global::System.String? Purpose { get; }

        public global::System.String? Project { get; }

        public global::System.String? Program { get; }

        public global::System.String? Activity { get; }
    }

    ///<summary>Cost-center components of the POET Segments which can be derived from the KFS Chart-Account-Sub Account-Project.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmCostCenterSegmentsData
    {
        public PpmCostCenterSegmentsData(global::System.String __typename, global::System.String? project = default !, global::System.String? organization = default !, global::System.Collections.Generic.IReadOnlyList<global::System.String>? task = default !, global::System.String? award = default !, global::System.String? fundingSource = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Project = project;
            Organization = organization;
            Task = task;
            Award = award;
            FundingSource = fundingSource;
        }

        public global::System.String __typename { get; }

        public global::System.String? Project { get; }

        public global::System.String? Organization { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? Task { get; }

        public global::System.String? Award { get; }

        public global::System.String? FundingSource { get; }
    }

    ///<summary>Return data structure when validating a set of PPM segment values.The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.The operation will complete any missing segments with their defaults and return them populated in the "segments" property.  This property is structured such that they could be included as accounting line or distribution data in other operations.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateOutputData
    {
        public PpmSegmentsValidateOutputData(global::System.String __typename, global::AggieEnterpriseApi.State.ValidationResponseData? validationResponse = default !, global::System.String? segmentString = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ValidationResponse = validationResponse;
            SegmentString = segmentString;
        }

        public global::System.String __typename { get; }

        ///<summary>Validation result and error messages, if any.</summary>
        public global::AggieEnterpriseApi.State.ValidationResponseData? ValidationResponse { get; }

        ///<summary>PPM segment string matching the segments object.  Only populated if the validation passes.</summary>
        public global::System.String? SegmentString { get; }
    }

    ///<summary>Output type for ScmPurchaseRequisition creation and follow-up status updates.Contains the overall request status.  After a successful creation of the document, will also contain the Oracle Financials assigned ID.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchaseRequisitionRequestStatusOutputData
    {
        public ScmPurchaseRequisitionRequestStatusOutputData(global::System.String __typename, global::AggieEnterpriseApi.State.ActionRequestStatusData? requestStatus = default !, global::AggieEnterpriseApi.State.ValidationResponseData? validationResults = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            RequestStatus = requestStatus;
            ValidationResults = validationResults;
        }

        public global::System.String __typename { get; }

        ///<summary>Status of the action request overall.</summary>
        public global::AggieEnterpriseApi.State.ActionRequestStatusData? RequestStatus { get; }

        ///<summary>Validation errors of payload data</summary>
        public global::AggieEnterpriseApi.State.ValidationResponseData? ValidationResults { get; }
    }

    ///<summary>Wrapper object for search results for ScmPurchasingCategory</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmPurchasingCategorySearchResultsData
    {
        public ScmPurchasingCategorySearchResultsData(global::System.String __typename, global::AggieEnterpriseApi.State.SearchResultMetadataData? metadata = default !, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? data = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Metadata = metadata;
            Data = data;
        }

        public global::System.String __typename { get; }

        ///<summary>Information about the search results returned.</summary>
        public global::AggieEnterpriseApi.State.SearchResultMetadataData? Metadata { get; }

        ///<summary>Results of the search</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Data { get; }
    }

    ///<summary>Search results object for ScmSupplier</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierSearchResultsData
    {
        public ScmSupplierSearchResultsData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ScmSupplierData>? data = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Data = data;
        }

        public global::System.String __typename { get; }

        ///<summary>Results of the search</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ScmSupplierData>? Data { get; }
    }

    ///<summary>A defined supplier of goods or services in the ERP system.Each supplier may have multiple sites at which they do business.  It is necessary to identify both the supplier and site when submitting a payment.Supplier in Oracle replaces Vendor in KFS.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierData
    {
        public ScmSupplierData(global::System.String __typename, global::System.String? name = default !, global::System.Int64? supplierNumber = default !, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ScmSupplierSiteData>? sites = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            SupplierNumber = supplierNumber;
            Sites = sites;
        }

        public global::System.String __typename { get; }

        ///<summary>Supplier: Name of the supplier.</summary>
        public global::System.String? Name { get; }

        ///<summary>Unique ID for the supplier used to reference it within the UI and in interfaces.  This largely corresponds to the Vendor ID in KFS.</summary>
        public global::System.Int64? SupplierNumber { get; }

        ///<summary>Supplier business locations referenced when making orders or payments to the supplier.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.ScmSupplierSiteData>? Sites { get; }
    }

    ///<summary>Supplier Site represents a business location referenced when making orders or payments to the supplier.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ScmSupplierSiteData
    {
        public ScmSupplierSiteData(global::System.String __typename, global::System.String? supplierSiteCode = default !, global::AggieEnterpriseApi.State.ErpLocationData? location = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            SupplierSiteCode = supplierSiteCode;
            Location = location;
        }

        public global::System.String __typename { get; }

        ///<summary>Code used to identify the site on the UI and in interfaces.</summary>
        public global::System.String? SupplierSiteCode { get; }

        ///<summary>Physical address of the site.</summary>
        public global::AggieEnterpriseApi.State.ErpLocationData? Location { get; }
    }

    ///<summary>Locations referenced by Supplier and AR Customer Sites</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpLocationData
    {
        public ErpLocationData(global::System.String __typename, global::System.String? addressLine1 = default !, global::System.String? addressLine2 = default !, global::System.String? addressLine3 = default !, global::System.String? addressLine4 = default !, global::System.String? city = default !, global::System.String? state = default !, global::System.String? postalCode = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            AddressLine1 = addressLine1;
            AddressLine2 = addressLine2;
            AddressLine3 = addressLine3;
            AddressLine4 = addressLine4;
            City = city;
            State = state;
            PostalCode = postalCode;
        }

        public global::System.String __typename { get; }

        ///<summary>Address Line 1</summary>
        public global::System.String? AddressLine1 { get; }

        ///<summary>Address Line 2</summary>
        public global::System.String? AddressLine2 { get; }

        ///<summary>Address Line 3</summary>
        public global::System.String? AddressLine3 { get; }

        ///<summary>Address Line 4</summary>
        public global::System.String? AddressLine4 { get; }

        ///<summary>City of the supplier address</summary>
        public global::System.String? City { get; }

        ///<summary>State of the supplier address</summary>
        public global::System.String? State { get; }

        ///<summary>Postal code of the supplier address</summary>
        public global::System.String? PostalCode { get; }
    }

    ///<summary>Wrapper object for search results for PpmExpenditureType</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmExpenditureTypeSearchResultsData
    {
        public PpmExpenditureTypeSearchResultsData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? data = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Data = data;
        }

        public global::System.String __typename { get; }

        ///<summary>Results of the search</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Data { get; }
    }

    ///<summary>Wrapper object for search results for PpmOrganization</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmOrganizationSearchResultsData
    {
        public PpmOrganizationSearchResultsData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? data = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Data = data;
        }

        public global::System.String __typename { get; }

        ///<summary>Results of the search</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Data { get; }
    }

    ///<summary>Wrapper object for search results for PpmProject</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmProjectSearchResultsData
    {
        public PpmProjectSearchResultsData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? data = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Data = data;
        }

        public global::System.String __typename { get; }

        ///<summary>Results of the search</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Data { get; }
    }

    ///<summary>Wrapper object for search results for PpmTask</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmTaskSearchResultsData
    {
        public PpmTaskSearchResultsData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? data = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Data = data;
        }

        public global::System.String __typename { get; }

        ///<summary>Results of the search</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Data { get; }
    }

    ///<summary>Return data structure when validating a set of GL segment values.The "result" property will contain the overall validation result and any error messages encountered during validation.  If any errors occur during data parsing (formats/required values), that will be returned as a GraphQL error per the specification in a top-level "errors" property.The operation will complete any missing segments with their defaults and return them populated in the "segments" property as well as the "completeChartstring" property.  Both of these are structured such that (if all properties requested) they could be included as accounting line or distribution data in other operations.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsOutputData
    {
        public GlValidateChartSegmentsOutputData(global::System.String __typename, global::AggieEnterpriseApi.State.ValidationResponseData? validationResponse = default !, global::AggieEnterpriseApi.State.GlSegmentsData? segments = default !, global::System.String? completeChartstring = default !, global::System.Int64? codeCombinationId = default !, global::AggieEnterpriseApi.State.GlSegmentNamesData? segmentNames = default !, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentWarningData>? warnings = default !, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentEndDateData>? endDates = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ValidationResponse = validationResponse;
            Segments = segments;
            CompleteChartstring = completeChartstring;
            CodeCombinationId = codeCombinationId;
            SegmentNames = segmentNames;
            Warnings = warnings;
            EndDates = endDates;
        }

        public global::System.String __typename { get; }

        ///<summary>Validation result and error messages, if any.</summary>
        public global::AggieEnterpriseApi.State.ValidationResponseData? ValidationResponse { get; }

        ///<summary>Fully populated object with the GL segments combination that was validated.</summary>
        public global::AggieEnterpriseApi.State.GlSegmentsData? Segments { get; }

        ///<summary>Full chartstring with the GL segments combination that was validated.</summary>
        public global::System.String? CompleteChartstring { get; }

        ///<summary>The "codeCombinationId" is an informational property only.  If populated, itindicates that the validated combination of segment values was previouslyknown to the financial system.  Validity still needs to be checked, aschartstrings can be disabled or expire.  However, segments which match anexisting valid combination can not fail validation when posted to thefinancial system.</summary>
        public global::System.Int64? CodeCombinationId { get; }

        public global::AggieEnterpriseApi.State.GlSegmentNamesData? SegmentNames { get; }

        ///<summary>Warnings, if any, related to segments validated during this operation.  The segmentName will be the same as the property name in the GlSegments object.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentWarningData>? Warnings { get; }

        ///<summary>End Dates, if defined, after which a given segment will no longer be accepted for processing.  The segmentName will be the same as the property name in the GlSegments type.  Only segments which have defined end dates will be included in this list.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentEndDateData>? EndDates { get; }
    }

    ///<summary>GL segment values as separate fields.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlSegmentsData
    {
        public GlSegmentsData(global::System.String __typename, global::System.String? account = default !, global::System.String? activity = default !, global::System.String? department = default !, global::System.String? entity = default !, global::System.String? fund = default !, global::System.String? program = default !, global::System.String? project = default !, global::System.String? purpose = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Account = account;
            Activity = activity;
            Department = department;
            Entity = entity;
            Fund = fund;
            Program = program;
            Project = project;
            Purpose = purpose;
        }

        public global::System.String __typename { get; }

        ///<summary>Required: Nature of the transaction, expense, income, liability, etc...</summary>
        public global::System.String? Account { get; }

        ///<summary>Optional: </summary>
        public global::System.String? Activity { get; }

        ///<summary>Required: Financial department to which to charge a transaction.</summary>
        public global::System.String? Department { get; }

        ///<summary>Required: Entity to which to charge a transaction.</summary>
        public global::System.String? Entity { get; }

        ///<summary>Required: Funding source to which to charge a transaction.</summary>
        public global::System.String? Fund { get; }

        ///<summary>Optional: </summary>
        public global::System.String? Program { get; }

        ///<summary>Optional: </summary>
        public global::System.String? Project { get; }

        ///<summary>Required for Expenses: Functional purpose of the expense.</summary>
        public global::System.String? Purpose { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlSegmentNamesData
    {
        public GlSegmentNamesData(global::System.String __typename, global::System.String? entityName = default !, global::System.String? fundName = default !, global::System.String? departmentName = default !, global::System.String? accountName = default !, global::System.String? purposeName = default !, global::System.String? projectName = default !, global::System.String? programName = default !, global::System.String? activityName = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            EntityName = entityName;
            FundName = fundName;
            DepartmentName = departmentName;
            AccountName = accountName;
            PurposeName = purposeName;
            ProjectName = projectName;
            ProgramName = programName;
            ActivityName = activityName;
        }

        public global::System.String __typename { get; }

        public global::System.String? EntityName { get; }

        public global::System.String? FundName { get; }

        public global::System.String? DepartmentName { get; }

        public global::System.String? AccountName { get; }

        public global::System.String? PurposeName { get; }

        public global::System.String? ProjectName { get; }

        public global::System.String? ProgramName { get; }

        public global::System.String? ActivityName { get; }
    }

    ///<summary>Warning issued when validating a given segment.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class SegmentWarningData
    {
        public SegmentWarningData(global::System.String __typename, global::System.String? segmentName = default !, global::System.String? warning = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            SegmentName = segmentName;
            Warning = warning;
        }

        public global::System.String __typename { get; }

        ///<summary>Name of the segment per the property name in the GlSegments or PpmSegments types.</summary>
        public global::System.String? SegmentName { get; }

        ///<summary>Warning message associated with the use of the given segment.</summary>
        public global::System.String? Warning { get; }
    }

    ///<summary>Valid end date for a given segment in a GL or PPM chartstring.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class SegmentEndDateData
    {
        public SegmentEndDateData(global::System.String __typename, global::System.String? segmentName = default !, global::System.String? endDate = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            SegmentName = segmentName;
            EndDate = endDate;
        }

        public global::System.String __typename { get; }

        ///<summary>Name of the segment per the property name in the GlSegments or PpmSegments types.</summary>
        public global::System.String? SegmentName { get; }

        ///<summary>End date of the given segment as defined in the associated table.</summary>
        public global::System.String? EndDate { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class AggieEnterpriseClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "ErpFinancialDepartment" => ParseErpFinancialDepartmentEntityId(obj, __typename),
                "ErpFund" => ParseErpFundEntityId(obj, __typename),
                "ErpEntity" => ParseErpEntityEntityId(obj, __typename),
                "ErpAccount" => ParseErpAccountEntityId(obj, __typename),
                "ErpPurpose" => ParseErpPurposeEntityId(obj, __typename),
                "PpmTask" => ParsePpmTaskEntityId(obj, __typename),
                "ScmPurchasingCategory" => ParseScmPurchasingCategoryEntityId(obj, __typename),
                "PpmExpenditureType" => ParsePpmExpenditureTypeEntityId(obj, __typename),
                "PpmOrganization" => ParsePpmOrganizationEntityId(obj, __typename),
                "PpmProject" => ParsePpmProjectEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "ErpFinancialDepartment" => FormatErpFinancialDepartmentEntityId(entityId),
                "ErpFund" => FormatErpFundEntityId(entityId),
                "ErpEntity" => FormatErpEntityEntityId(entityId),
                "ErpAccount" => FormatErpAccountEntityId(entityId),
                "ErpPurpose" => FormatErpPurposeEntityId(entityId),
                "PpmTask" => FormatPpmTaskEntityId(entityId),
                "ScmPurchasingCategory" => FormatScmPurchasingCategoryEntityId(entityId),
                "PpmExpenditureType" => FormatPpmExpenditureTypeEntityId(entityId),
                "PpmOrganization" => FormatPpmOrganizationEntityId(entityId),
                "PpmProject" => FormatPpmProjectEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseErpFinancialDepartmentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatErpFinancialDepartmentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseErpFundEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatErpFundEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseErpEntityEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatErpEntityEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseErpAccountEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatErpAccountEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseErpPurposeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatErpPurposeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePpmTaskEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatPpmTaskEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseScmPurchasingCategoryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatScmPurchasingCategoryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePpmExpenditureTypeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatPpmExpenditureTypeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePpmOrganizationEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatPpmOrganizationEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePpmProjectEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatPpmProjectEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class AggieEnterpriseClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public AggieEnterpriseClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public static partial class AggieEnterpriseClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::AggieEnterpriseApi.State.AggieEnterpriseClientStoreAccessor> AddAggieEnterpriseClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::AggieEnterpriseApi.State.AggieEnterpriseClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.DeptParentsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ErpInstitutionLocationSearchQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ErpUnitOfMeasureSearchQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.FundParentsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlJournalRequestMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlJournalRequestStatusQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.CoaDetailsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.KfsConvertAccountQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmStringSegmentsValidateQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmSegmentsValidateQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmTaskByProjectNumberAndTaskNumberQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ScmPurchaseRequisitionCreateMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ScmPurchaseRequisitionRequestStatusQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ScmPurchasingCategoryByCodeQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ScmPurchasingCategorySearchQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ScmSupplierSearchQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmExpenditureTypeSearchQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmOrganizationSearchQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmProjectSearchQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmTaskSearchQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlValidateChartSegmentsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlValidateChartstringQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.AggieEnterpriseClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IAggieEnterpriseClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::AggieEnterpriseApi.State.AggieEnterpriseClientStoreAccessor>("AggieEnterpriseClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("AggieEnterpriseClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_Parent_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpEntityEntity, global::AggieEnterpriseApi.CoaDetails_ErpEntity_ErpEntity>, global::AggieEnterpriseApi.State.CoaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.CoaDetails_ErpFund_ErpFund>, global::AggieEnterpriseApi.State.CoaDetails_ErpFund_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.CoaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpAccountEntity, global::AggieEnterpriseApi.CoaDetails_ErpAccount_ErpAccount>, global::AggieEnterpriseApi.State.CoaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpPurposeEntity, global::AggieEnterpriseApi.CoaDetails_ErpPurpose_ErpPurpose>, global::AggieEnterpriseApi.State.CoaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmTaskEntity, global::AggieEnterpriseApi.PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTask>, global::AggieEnterpriseApi.State.PpmTaskByProjectNumberAndTaskNumber_PpmTaskByProjectNumberAndTaskNumber_PpmTaskFromPpmTaskEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity, global::AggieEnterpriseApi.ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategory>, global::AggieEnterpriseApi.State.ScmPurchasingCategoryByCode_ScmPurchasingCategoryByCode_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ScmPurchasingCategoryEntity, global::AggieEnterpriseApi.ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategory>, global::AggieEnterpriseApi.State.ScmPurchasingCategorySearch_ScmPurchasingCategorySearch_Data_ScmPurchasingCategoryFromScmPurchasingCategoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity, global::AggieEnterpriseApi.PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureType>, global::AggieEnterpriseApi.State.PpmExpenditureTypeSearch_PpmExpenditureTypeByCode_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmExpenditureTypeEntity, global::AggieEnterpriseApi.PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureType>, global::AggieEnterpriseApi.State.PpmExpenditureTypeSearch_PpmExpenditureTypeSearch_Data_PpmExpenditureTypeFromPpmExpenditureTypeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmOrganizationEntity, global::AggieEnterpriseApi.PpmOrganizationSearch_PpmOrganization_PpmOrganization>, global::AggieEnterpriseApi.State.PpmOrganizationSearch_PpmOrganization_PpmOrganizationFromPpmOrganizationEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmOrganizationEntity, global::AggieEnterpriseApi.PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganization>, global::AggieEnterpriseApi.State.PpmOrganizationSearch_PpmOrganizationSearch_Data_PpmOrganizationFromPpmOrganizationEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmProjectEntity, global::AggieEnterpriseApi.PpmProjectSearch_PpmProjectByNumber_PpmProject>, global::AggieEnterpriseApi.State.PpmProjectSearch_PpmProjectByNumber_PpmProjectFromPpmProjectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmProjectEntity, global::AggieEnterpriseApi.PpmProjectSearch_PpmProjectSearch_Data_PpmProject>, global::AggieEnterpriseApi.State.PpmProjectSearch_PpmProjectSearch_Data_PpmProjectFromPpmProjectEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.PpmTaskEntity, global::AggieEnterpriseApi.PpmTaskSearch_PpmTaskSearch_Data_PpmTask>, global::AggieEnterpriseApi.State.PpmTaskSearch_PpmTaskSearch_Data_PpmTaskFromPpmTaskEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.RequestStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpDepartmentCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("NonEmptyTrimmedString240"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ScmAddressLine"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("CityName"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("NonEmptyTrimmedString60"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpPostalCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpUnitOfMeasureCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("NonEmptyTrimmedString25"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpFundCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("LocalDate"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("NonEmptyTrimmedString80"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpNameField100"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpDescriptionField240"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("GlReferenceField25"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("NonEmptyTrimmedString15"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("GlSegmentString"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmSegmentString"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("GlReferenceField10"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("GlDescriptionField40"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpEntityCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpAccountCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpPurposeCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpProjectCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpProgramCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpActivityCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpFlex1Code"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpFlex2Code"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmProjectNumber"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmTaskNumber"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmExpenseOrganizationCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmExpenseTypeCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmAwardNumber"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmFundingSourceNumber"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("JSON"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("KfsChartCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("KfsAccountNumber"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("KfsSubAccountNumber"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("NonEmptyTrimmedString100"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("NonEmptyTrimmedString30"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("EmailAddress"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("NonEmptyTrimmedString1000"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpUserId"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("NonEmptyTrimmedString360"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.ErpInstitutionLocationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.SearchCommonInputsInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.StringFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.BooleanFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.ErpUnitOfMeasureFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.GlJournalRequestInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.ActionRequestHeaderInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.GlJournalInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.GlJournalLineInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.GlSegmentInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.PpmSegmentInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.GlideInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.ScmPurchaseRequisitionRequestInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.ScmPurchaseRequisitionInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.ScmPurchaseRequisitionLineInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.ScmPurchaseRequisitionDistributionInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.ScmPurchasingCategoryFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.DateFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.ScmSupplierFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.PpmExpenditureTypeFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.PpmOrganizationFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.PpmProjectFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.PpmTaskFilterInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IDeptParentsResult>, global::AggieEnterpriseApi.State.DeptParentsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IDeptParentsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IDeptParentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IDeptParentsResult>, global::AggieEnterpriseApi.State.DeptParentsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IDeptParentsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IDeptParentsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IDeptParentsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.DeptParentsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IDeptParentsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.DeptParentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IErpInstitutionLocationSearchResult>, global::AggieEnterpriseApi.State.ErpInstitutionLocationSearchResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IErpInstitutionLocationSearchResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IErpInstitutionLocationSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IErpInstitutionLocationSearchResult>, global::AggieEnterpriseApi.State.ErpInstitutionLocationSearchBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IErpInstitutionLocationSearchResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IErpInstitutionLocationSearchResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IErpInstitutionLocationSearchResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.ErpInstitutionLocationSearchQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IErpInstitutionLocationSearchQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ErpInstitutionLocationSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IErpUnitOfMeasureSearchResult>, global::AggieEnterpriseApi.State.ErpUnitOfMeasureSearchResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IErpUnitOfMeasureSearchResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IErpUnitOfMeasureSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IErpUnitOfMeasureSearchResult>, global::AggieEnterpriseApi.State.ErpUnitOfMeasureSearchBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IErpUnitOfMeasureSearchResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IErpUnitOfMeasureSearchResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IErpUnitOfMeasureSearchResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.ErpUnitOfMeasureSearchQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IErpUnitOfMeasureSearchQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ErpUnitOfMeasureSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IFundParentsResult>, global::AggieEnterpriseApi.State.FundParentsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IFundParentsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IFundParentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IFundParentsResult>, global::AggieEnterpriseApi.State.FundParentsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IFundParentsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IFundParentsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IFundParentsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.FundParentsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IFundParentsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.FundParentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestResult>, global::AggieEnterpriseApi.State.GlJournalRequestResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IGlJournalRequestMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestResult>, global::AggieEnterpriseApi.State.GlJournalRequestBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IGlJournalRequestResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.GlJournalRequestMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IGlJournalRequestMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlJournalRequestMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestStatusResult>, global::AggieEnterpriseApi.State.GlJournalRequestStatusResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestStatusResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IGlJournalRequestStatusQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestStatusResult>, global::AggieEnterpriseApi.State.GlJournalRequestStatusBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IGlJournalRequestStatusResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestStatusResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestStatusResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.GlJournalRequestStatusQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IGlJournalRequestStatusQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlJournalRequestStatusQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ICoaDetailsResult>, global::AggieEnterpriseApi.State.CoaDetailsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ICoaDetailsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ICoaDetailsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.ICoaDetailsResult>, global::AggieEnterpriseApi.State.CoaDetailsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.ICoaDetailsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.ICoaDetailsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.ICoaDetailsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.CoaDetailsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.ICoaDetailsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.CoaDetailsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IKfsConvertAccountResult>, global::AggieEnterpriseApi.State.KfsConvertAccountResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IKfsConvertAccountResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IKfsConvertAccountQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IKfsConvertAccountResult>, global::AggieEnterpriseApi.State.KfsConvertAccountBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IKfsConvertAccountResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IKfsConvertAccountResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IKfsConvertAccountResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.KfsConvertAccountQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IKfsConvertAccountQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.KfsConvertAccountQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>, global::AggieEnterpriseApi.State.PpmStringSegmentsValidateResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>, global::AggieEnterpriseApi.State.PpmStringSegmentsValidateBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.PpmStringSegmentsValidateQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmStringSegmentsValidateQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmSegmentsValidateResult>, global::AggieEnterpriseApi.State.PpmSegmentsValidateResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmSegmentsValidateResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IPpmSegmentsValidateQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmSegmentsValidateResult>, global::AggieEnterpriseApi.State.PpmSegmentsValidateBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IPpmSegmentsValidateResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmSegmentsValidateResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmSegmentsValidateResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.PpmSegmentsValidateQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IPpmSegmentsValidateQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmSegmentsValidateQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberResult>, global::AggieEnterpriseApi.State.PpmTaskByProjectNumberAndTaskNumberResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberResult>, global::AggieEnterpriseApi.State.PpmTaskByProjectNumberAndTaskNumberBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.PpmTaskByProjectNumberAndTaskNumberQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IPpmTaskByProjectNumberAndTaskNumberQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmTaskByProjectNumberAndTaskNumberQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateResult>, global::AggieEnterpriseApi.State.ScmPurchaseRequisitionCreateResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateResult>, global::AggieEnterpriseApi.State.ScmPurchaseRequisitionCreateBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.ScmPurchaseRequisitionCreateMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IScmPurchaseRequisitionCreateMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ScmPurchaseRequisitionCreateMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusResult>, global::AggieEnterpriseApi.State.ScmPurchaseRequisitionRequestStatusResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusResult>, global::AggieEnterpriseApi.State.ScmPurchaseRequisitionRequestStatusBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.ScmPurchaseRequisitionRequestStatusQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IScmPurchaseRequisitionRequestStatusQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ScmPurchaseRequisitionRequestStatusQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeResult>, global::AggieEnterpriseApi.State.ScmPurchasingCategoryByCodeResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeResult>, global::AggieEnterpriseApi.State.ScmPurchasingCategoryByCodeBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.ScmPurchasingCategoryByCodeQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IScmPurchasingCategoryByCodeQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ScmPurchasingCategoryByCodeQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchasingCategorySearchResult>, global::AggieEnterpriseApi.State.ScmPurchasingCategorySearchResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmPurchasingCategorySearchResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IScmPurchasingCategorySearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchasingCategorySearchResult>, global::AggieEnterpriseApi.State.ScmPurchasingCategorySearchBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IScmPurchasingCategorySearchResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchasingCategorySearchResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmPurchasingCategorySearchResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.ScmPurchasingCategorySearchQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IScmPurchasingCategorySearchQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ScmPurchasingCategorySearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmSupplierSearchResult>, global::AggieEnterpriseApi.State.ScmSupplierSearchResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IScmSupplierSearchResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IScmSupplierSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmSupplierSearchResult>, global::AggieEnterpriseApi.State.ScmSupplierSearchBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IScmSupplierSearchResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmSupplierSearchResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IScmSupplierSearchResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.ScmSupplierSearchQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IScmSupplierSearchQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ScmSupplierSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmExpenditureTypeSearchResult>, global::AggieEnterpriseApi.State.PpmExpenditureTypeSearchResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmExpenditureTypeSearchResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IPpmExpenditureTypeSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmExpenditureTypeSearchResult>, global::AggieEnterpriseApi.State.PpmExpenditureTypeSearchBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IPpmExpenditureTypeSearchResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmExpenditureTypeSearchResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmExpenditureTypeSearchResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.PpmExpenditureTypeSearchQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IPpmExpenditureTypeSearchQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmExpenditureTypeSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmOrganizationSearchResult>, global::AggieEnterpriseApi.State.PpmOrganizationSearchResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmOrganizationSearchResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IPpmOrganizationSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmOrganizationSearchResult>, global::AggieEnterpriseApi.State.PpmOrganizationSearchBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IPpmOrganizationSearchResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmOrganizationSearchResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmOrganizationSearchResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.PpmOrganizationSearchQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IPpmOrganizationSearchQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmOrganizationSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmProjectSearchResult>, global::AggieEnterpriseApi.State.PpmProjectSearchResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmProjectSearchResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IPpmProjectSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmProjectSearchResult>, global::AggieEnterpriseApi.State.PpmProjectSearchBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IPpmProjectSearchResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmProjectSearchResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmProjectSearchResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.PpmProjectSearchQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IPpmProjectSearchQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmProjectSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmTaskSearchResult>, global::AggieEnterpriseApi.State.PpmTaskSearchResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmTaskSearchResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IPpmTaskSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmTaskSearchResult>, global::AggieEnterpriseApi.State.PpmTaskSearchBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IPpmTaskSearchResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmTaskSearchResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmTaskSearchResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.PpmTaskSearchQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IPpmTaskSearchQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmTaskSearchQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>, global::AggieEnterpriseApi.State.GlValidateChartSegmentsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>, global::AggieEnterpriseApi.State.GlValidateChartSegmentsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.GlValidateChartSegmentsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlValidateChartSegmentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartstringResult>, global::AggieEnterpriseApi.State.GlValidateChartstringResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartstringResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IGlValidateChartstringQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartstringResult>, global::AggieEnterpriseApi.State.GlValidateChartstringBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IGlValidateChartstringResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartstringResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartstringResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.GlValidateChartstringQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IGlValidateChartstringQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlValidateChartstringQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::AggieEnterpriseApi.State.AggieEnterpriseClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.AggieEnterpriseClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IAggieEnterpriseClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.AggieEnterpriseClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

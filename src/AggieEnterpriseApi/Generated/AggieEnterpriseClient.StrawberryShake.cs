// <auto-generated/>
#nullable enable

namespace AggieEnterpriseApi
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParentsResult : global::System.IEquatable<DeptParentsResult>, IDeptParentsResult
    {
        public DeptParentsResult(global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment? erpFinancialDepartment)
        {
            ErpFinancialDepartment = erpFinancialDepartment;
        }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment? ErpFinancialDepartment { get; }

        public virtual global::System.Boolean Equals(DeptParentsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ErpFinancialDepartment is null && other.ErpFinancialDepartment is null) || ErpFinancialDepartment != null && ErpFinancialDepartment.Equals(other.ErpFinancialDepartment)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParentsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErpFinancialDepartment != null)
                {
                    hash ^= 397 * ErpFinancialDepartment.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_ErpFinancialDepartment(global::System.String code, global::System.String name, global::System.Boolean enabled, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent? parent)
        {
            Code = code;
            Name = name;
            Enabled = enabled;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Boolean Enabled { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && Enabled == other.Enabled && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Enabled.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name, global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment : global::System.IEquatable<DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment
    {
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment(global::System.String code, global::System.String name)
        {
            Code = code;
            Name = name;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParentsResult
    {
        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment? ErpFinancialDepartment { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Boolean Enabled { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment : IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParentsResult : global::System.IEquatable<FundParentsResult>, IFundParentsResult
    {
        public FundParentsResult(global::AggieEnterpriseApi.IFundParents_ErpFund? erpFund)
        {
            ErpFund = erpFund;
        }

        public global::AggieEnterpriseApi.IFundParents_ErpFund? ErpFund { get; }

        public virtual global::System.Boolean Equals(FundParentsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ErpFund is null && other.ErpFund is null) || ErpFund != null && ErpFund.Equals(other.ErpFund)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParentsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErpFund != null)
                {
                    hash ^= 397 * ErpFund.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_ErpFund : global::System.IEquatable<FundParents_ErpFund_ErpFund>, IFundParents_ErpFund_ErpFund
    {
        public FundParents_ErpFund_ErpFund(global::System.String code, global::System.String name, global::System.Boolean? budgeted, global::System.Boolean eligibleForUse, global::System.Boolean enabled, global::System.String? endDate, global::System.Int64 id, global::System.String? startDate, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent? parent)
        {
            Code = code;
            Name = name;
            Budgeted = budgeted;
            EligibleForUse = eligibleForUse;
            Enabled = enabled;
            EndDate = endDate;
            Id = id;
            StartDate = startDate;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Boolean? Budgeted { get; }

        public global::System.Boolean EligibleForUse { get; }

        public global::System.Boolean Enabled { get; }

        public global::System.String? EndDate { get; }

        public global::System.Int64 Id { get; }

        public global::System.String? StartDate { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && Budgeted == other.Budgeted && EligibleForUse == other.EligibleForUse && Enabled == other.Enabled && ((EndDate is null && other.EndDate is null) || EndDate != null && EndDate.Equals(other.EndDate)) && Id == other.Id && ((StartDate is null && other.StartDate is null) || StartDate != null && StartDate.Equals(other.StartDate)) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (Budgeted != null)
                {
                    hash ^= 397 * Budgeted.GetHashCode();
                }

                hash ^= 397 * EligibleForUse.GetHashCode();
                hash ^= 397 * Enabled.GetHashCode();
                if (EndDate != null)
                {
                    hash ^= 397 * EndDate.GetHashCode();
                }

                hash ^= 397 * Id.GetHashCode();
                if (StartDate != null)
                {
                    hash ^= 397 * StartDate.GetHashCode();
                }

                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_ErpFund>, IFundParents_ErpFund_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_Parent_ErpFund>, IFundParents_ErpFund_Parent_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_Parent_Parent_ErpFund>, IFundParents_ErpFund_Parent_Parent_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_Parent_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_Parent_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_Parent_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund>, IFundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund>, IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund>, IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth, global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? parent)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth && ((Parent is null && other.Parent is null) || Parent != null && Parent.Equals(other.Parent));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                if (Parent != null)
                {
                    hash ^= 397 * Parent.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund : global::System.IEquatable<FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund>, IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund
    {
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund(global::System.String code, global::System.String name, global::System.Int32? hierarchyDepth)
        {
            Code = code;
            Name = name;
            HierarchyDepth = hierarchyDepth;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public virtual global::System.Boolean Equals(FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && HierarchyDepth == other.HierarchyDepth;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (HierarchyDepth != null)
                {
                    hash ^= 397 * HierarchyDepth.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParentsResult
    {
        public global::AggieEnterpriseApi.IFundParents_ErpFund? ErpFund { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Boolean? Budgeted { get; }

        public global::System.Boolean EligibleForUse { get; }

        public global::System.Boolean Enabled { get; }

        public global::System.String? EndDate { get; }

        public global::System.Int64 Id { get; }

        public global::System.String? StartDate { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_ErpFund : IFundParents_ErpFund
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_ErpFund : IFundParents_ErpFund_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_ErpFund : IFundParents_ErpFund_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_ErpFund : IFundParents_ErpFund_Parent_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund : IFundParents_ErpFund_Parent_Parent_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund : IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund : IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Int32? HierarchyDepth { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund : IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestResult : global::System.IEquatable<GlJournalRequestResult>, IGlJournalRequestResult
    {
        public GlJournalRequestResult(global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest glJournalRequest)
        {
            GlJournalRequest = glJournalRequest;
        }

        public global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest GlJournalRequest { get; }

        public virtual global::System.Boolean Equals(GlJournalRequestResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GlJournalRequest.Equals(other.GlJournalRequest));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GlJournalRequest.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput : global::System.IEquatable<GlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput>, IGlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput
    {
        public GlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput(global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_RequestStatus requestStatus, global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_ValidationResults? validationResults)
        {
            RequestStatus = requestStatus;
            ValidationResults = validationResults;
        }

        public global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_RequestStatus RequestStatus { get; }

        public global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_ValidationResults? ValidationResults { get; }

        public virtual global::System.Boolean Equals(GlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RequestStatus.Equals(other.RequestStatus)) && ((ValidationResults is null && other.ValidationResults is null) || ValidationResults != null && ValidationResults.Equals(other.ValidationResults));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RequestStatus.GetHashCode();
                if (ValidationResults != null)
                {
                    hash ^= 397 * ValidationResults.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus : global::System.IEquatable<GlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus>, IGlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus
    {
        public GlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus(global::System.Guid? requestId, global::System.String consumerId, global::System.DateTimeOffset requestDateTime, global::AggieEnterpriseApi.RequestStatus requestStatus, global::System.String operationName)
        {
            RequestId = requestId;
            ConsumerId = consumerId;
            RequestDateTime = requestDateTime;
            RequestStatus = requestStatus;
            OperationName = operationName;
        }

        public global::System.Guid? RequestId { get; }

        public global::System.String ConsumerId { get; }

        public global::System.DateTimeOffset RequestDateTime { get; }

        public global::AggieEnterpriseApi.RequestStatus RequestStatus { get; }

        public global::System.String OperationName { get; }

        public virtual global::System.Boolean Equals(GlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((RequestId is null && other.RequestId is null) || RequestId != null && RequestId.Equals(other.RequestId))) && ConsumerId.Equals(other.ConsumerId) && RequestDateTime.Equals(other.RequestDateTime) && RequestStatus.Equals(other.RequestStatus) && OperationName.Equals(other.OperationName);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (RequestId != null)
                {
                    hash ^= 397 * RequestId.GetHashCode();
                }

                hash ^= 397 * ConsumerId.GetHashCode();
                hash ^= 397 * RequestDateTime.GetHashCode();
                hash ^= 397 * RequestStatus.GetHashCode();
                hash ^= 397 * OperationName.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse : global::System.IEquatable<GlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse>, IGlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse
    {
        public GlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse(global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties)
        {
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        public virtual global::System.Boolean Equals(GlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MessageProperties, other.MessageProperties);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (MessageProperties != null)
                {
                    foreach (var MessageProperties_elm in MessageProperties)
                    {
                        hash ^= 397 * MessageProperties_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestResult
    {
        public global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest GlJournalRequest { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequest_GlJournalRequest
    {
        public global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_RequestStatus RequestStatus { get; }

        public global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_ValidationResults? ValidationResults { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput : IGlJournalRequest_GlJournalRequest
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequest_GlJournalRequest_RequestStatus
    {
        public global::System.Guid? RequestId { get; }

        public global::System.String ConsumerId { get; }

        public global::System.DateTimeOffset RequestDateTime { get; }

        public global::AggieEnterpriseApi.RequestStatus RequestStatus { get; }

        public global::System.String OperationName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus : IGlJournalRequest_GlJournalRequest_RequestStatus
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequest_GlJournalRequest_ValidationResults
    {
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse : IGlJournalRequest_GlJournalRequest_ValidationResults
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusResult : global::System.IEquatable<GlJournalRequestStatusResult>, IGlJournalRequestStatusResult
    {
        public GlJournalRequestStatusResult(global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus? glJournalRequestStatus)
        {
            GlJournalRequestStatus = glJournalRequestStatus;
        }

        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus? GlJournalRequestStatus { get; }

        public virtual global::System.Boolean Equals(GlJournalRequestStatusResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((GlJournalRequestStatus is null && other.GlJournalRequestStatus is null) || GlJournalRequestStatus != null && GlJournalRequestStatus.Equals(other.GlJournalRequestStatus)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestStatusResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GlJournalRequestStatus != null)
                {
                    hash ^= 397 * GlJournalRequestStatus.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput : global::System.IEquatable<GlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput>, IGlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput
    {
        public GlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput(global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus requestStatus, global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult? processingResult, global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults? validationResults)
        {
            RequestStatus = requestStatus;
            ProcessingResult = processingResult;
            ValidationResults = validationResults;
        }

        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus RequestStatus { get; }

        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult? ProcessingResult { get; }

        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults? ValidationResults { get; }

        public virtual global::System.Boolean Equals(GlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (RequestStatus.Equals(other.RequestStatus)) && ((ProcessingResult is null && other.ProcessingResult is null) || ProcessingResult != null && ProcessingResult.Equals(other.ProcessingResult)) && ((ValidationResults is null && other.ValidationResults is null) || ValidationResults != null && ValidationResults.Equals(other.ValidationResults));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * RequestStatus.GetHashCode();
                if (ProcessingResult != null)
                {
                    hash ^= 397 * ProcessingResult.GetHashCode();
                }

                if (ValidationResults != null)
                {
                    hash ^= 397 * ValidationResults.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus : global::System.IEquatable<GlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus>, IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus
    {
        public GlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus(global::System.String? statusRequestPayload, global::System.String operationName, global::AggieEnterpriseApi.RequestStatus requestStatus, global::System.DateTimeOffset requestDateTime, global::System.DateTimeOffset lastStatusDateTime, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.DateTimeOffset? processedDateTime, global::System.String boundaryApplicationName, global::System.String consumerId, global::System.String? consumerNotes, global::System.String consumerReferenceId)
        {
            StatusRequestPayload = statusRequestPayload;
            OperationName = operationName;
            RequestStatus = requestStatus;
            RequestDateTime = requestDateTime;
            LastStatusDateTime = lastStatusDateTime;
            ErrorMessages = errorMessages;
            ProcessedDateTime = processedDateTime;
            BoundaryApplicationName = boundaryApplicationName;
            ConsumerId = consumerId;
            ConsumerNotes = consumerNotes;
            ConsumerReferenceId = consumerReferenceId;
        }

        public global::System.String? StatusRequestPayload { get; }

        public global::System.String OperationName { get; }

        public global::AggieEnterpriseApi.RequestStatus RequestStatus { get; }

        public global::System.DateTimeOffset RequestDateTime { get; }

        public global::System.DateTimeOffset LastStatusDateTime { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.DateTimeOffset? ProcessedDateTime { get; }

        public global::System.String BoundaryApplicationName { get; }

        public global::System.String ConsumerId { get; }

        public global::System.String? ConsumerNotes { get; }

        public global::System.String ConsumerReferenceId { get; }

        public virtual global::System.Boolean Equals(GlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((StatusRequestPayload is null && other.StatusRequestPayload is null) || StatusRequestPayload != null && StatusRequestPayload.Equals(other.StatusRequestPayload))) && OperationName.Equals(other.OperationName) && RequestStatus.Equals(other.RequestStatus) && RequestDateTime.Equals(other.RequestDateTime) && LastStatusDateTime.Equals(other.LastStatusDateTime) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages) && ((ProcessedDateTime is null && other.ProcessedDateTime is null) || ProcessedDateTime != null && ProcessedDateTime.Equals(other.ProcessedDateTime)) && BoundaryApplicationName.Equals(other.BoundaryApplicationName) && ConsumerId.Equals(other.ConsumerId) && ((ConsumerNotes is null && other.ConsumerNotes is null) || ConsumerNotes != null && ConsumerNotes.Equals(other.ConsumerNotes)) && ConsumerReferenceId.Equals(other.ConsumerReferenceId);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (StatusRequestPayload != null)
                {
                    hash ^= 397 * StatusRequestPayload.GetHashCode();
                }

                hash ^= 397 * OperationName.GetHashCode();
                hash ^= 397 * RequestStatus.GetHashCode();
                hash ^= 397 * RequestDateTime.GetHashCode();
                hash ^= 397 * LastStatusDateTime.GetHashCode();
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (ProcessedDateTime != null)
                {
                    hash ^= 397 * ProcessedDateTime.GetHashCode();
                }

                hash ^= 397 * BoundaryApplicationName.GetHashCode();
                hash ^= 397 * ConsumerId.GetHashCode();
                if (ConsumerNotes != null)
                {
                    hash ^= 397 * ConsumerNotes.GetHashCode();
                }

                hash ^= 397 * ConsumerReferenceId.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult : global::System.IEquatable<GlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult>, IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult
    {
        public GlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult(global::System.String status, global::System.DateTimeOffset? processedDateTime)
        {
            Status = status;
            ProcessedDateTime = processedDateTime;
        }

        public global::System.String Status { get; }

        public global::System.DateTimeOffset? ProcessedDateTime { get; }

        public virtual global::System.Boolean Equals(GlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Status.Equals(other.Status)) && ((ProcessedDateTime is null && other.ProcessedDateTime is null) || ProcessedDateTime != null && ProcessedDateTime.Equals(other.ProcessedDateTime));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Status.GetHashCode();
                if (ProcessedDateTime != null)
                {
                    hash ^= 397 * ProcessedDateTime.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse : global::System.IEquatable<GlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse>, IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse
    {
        public GlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse(global::System.Boolean valid, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages)
        {
            Valid = valid;
            ErrorMessages = errorMessages;
        }

        public global::System.Boolean Valid { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public virtual global::System.Boolean Equals(GlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Valid == other.Valid) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Valid.GetHashCode();
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatusResult
    {
        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus? GlJournalRequestStatus { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus
    {
        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus RequestStatus { get; }

        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult? ProcessingResult { get; }

        public global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults? ValidationResults { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput : IGlJournalRequestStatus_GlJournalRequestStatus
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus
    {
        public global::System.String? StatusRequestPayload { get; }

        public global::System.String OperationName { get; }

        public global::AggieEnterpriseApi.RequestStatus RequestStatus { get; }

        public global::System.DateTimeOffset RequestDateTime { get; }

        public global::System.DateTimeOffset LastStatusDateTime { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.DateTimeOffset? ProcessedDateTime { get; }

        public global::System.String BoundaryApplicationName { get; }

        public global::System.String ConsumerId { get; }

        public global::System.String? ConsumerNotes { get; }

        public global::System.String ConsumerReferenceId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus : IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult
    {
        public global::System.String Status { get; }

        public global::System.DateTimeOffset? ProcessedDateTime { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult : IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults
    {
        public global::System.Boolean Valid { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse : IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetailsResult : global::System.IEquatable<CoaDetailsResult>, ICoaDetailsResult
    {
        public CoaDetailsResult(global::AggieEnterpriseApi.ICoaDetails_ErpEntity? erpEntity, global::AggieEnterpriseApi.ICoaDetails_ErpFund? erpFund, global::AggieEnterpriseApi.ICoaDetails_ErpFinancialDepartment? erpFinancialDepartment, global::AggieEnterpriseApi.ICoaDetails_ErpAccount? erpAccount, global::AggieEnterpriseApi.ICoaDetails_ErpPurpose? erpPurpose)
        {
            ErpEntity = erpEntity;
            ErpFund = erpFund;
            ErpFinancialDepartment = erpFinancialDepartment;
            ErpAccount = erpAccount;
            ErpPurpose = erpPurpose;
        }

        public global::AggieEnterpriseApi.ICoaDetails_ErpEntity? ErpEntity { get; }

        public global::AggieEnterpriseApi.ICoaDetails_ErpFund? ErpFund { get; }

        public global::AggieEnterpriseApi.ICoaDetails_ErpFinancialDepartment? ErpFinancialDepartment { get; }

        public global::AggieEnterpriseApi.ICoaDetails_ErpAccount? ErpAccount { get; }

        public global::AggieEnterpriseApi.ICoaDetails_ErpPurpose? ErpPurpose { get; }

        public virtual global::System.Boolean Equals(CoaDetailsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((ErpEntity is null && other.ErpEntity is null) || ErpEntity != null && ErpEntity.Equals(other.ErpEntity))) && ((ErpFund is null && other.ErpFund is null) || ErpFund != null && ErpFund.Equals(other.ErpFund)) && ((ErpFinancialDepartment is null && other.ErpFinancialDepartment is null) || ErpFinancialDepartment != null && ErpFinancialDepartment.Equals(other.ErpFinancialDepartment)) && ((ErpAccount is null && other.ErpAccount is null) || ErpAccount != null && ErpAccount.Equals(other.ErpAccount)) && ((ErpPurpose is null && other.ErpPurpose is null) || ErpPurpose != null && ErpPurpose.Equals(other.ErpPurpose));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CoaDetailsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErpEntity != null)
                {
                    hash ^= 397 * ErpEntity.GetHashCode();
                }

                if (ErpFund != null)
                {
                    hash ^= 397 * ErpFund.GetHashCode();
                }

                if (ErpFinancialDepartment != null)
                {
                    hash ^= 397 * ErpFinancialDepartment.GetHashCode();
                }

                if (ErpAccount != null)
                {
                    hash ^= 397 * ErpAccount.GetHashCode();
                }

                if (ErpPurpose != null)
                {
                    hash ^= 397 * ErpPurpose.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpEntity_ErpEntity : global::System.IEquatable<CoaDetails_ErpEntity_ErpEntity>, ICoaDetails_ErpEntity_ErpEntity
    {
        public CoaDetails_ErpEntity_ErpEntity(global::System.String code, global::System.String name)
        {
            Code = code;
            Name = name;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(CoaDetails_ErpEntity_ErpEntity? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CoaDetails_ErpEntity_ErpEntity)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpFund_ErpFund : global::System.IEquatable<CoaDetails_ErpFund_ErpFund>, ICoaDetails_ErpFund_ErpFund
    {
        public CoaDetails_ErpFund_ErpFund(global::System.String code, global::System.String name)
        {
            Code = code;
            Name = name;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(CoaDetails_ErpFund_ErpFund? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CoaDetails_ErpFund_ErpFund)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment : global::System.IEquatable<CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment>, ICoaDetails_ErpFinancialDepartment_ErpFinancialDepartment
    {
        public CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment(global::System.String code, global::System.String name, global::System.String? fiscalOfficerName, global::System.Boolean eligibleForUse)
        {
            Code = code;
            Name = name;
            FiscalOfficerName = fiscalOfficerName;
            EligibleForUse = eligibleForUse;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.String? FiscalOfficerName { get; }

        public global::System.Boolean EligibleForUse { get; }

        public virtual global::System.Boolean Equals(CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name) && ((FiscalOfficerName is null && other.FiscalOfficerName is null) || FiscalOfficerName != null && FiscalOfficerName.Equals(other.FiscalOfficerName)) && EligibleForUse == other.EligibleForUse;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                if (FiscalOfficerName != null)
                {
                    hash ^= 397 * FiscalOfficerName.GetHashCode();
                }

                hash ^= 397 * EligibleForUse.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpAccount_ErpAccount : global::System.IEquatable<CoaDetails_ErpAccount_ErpAccount>, ICoaDetails_ErpAccount_ErpAccount
    {
        public CoaDetails_ErpAccount_ErpAccount(global::System.String code, global::System.String name)
        {
            Code = code;
            Name = name;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(CoaDetails_ErpAccount_ErpAccount? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CoaDetails_ErpAccount_ErpAccount)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpPurpose_ErpPurpose : global::System.IEquatable<CoaDetails_ErpPurpose_ErpPurpose>, ICoaDetails_ErpPurpose_ErpPurpose
    {
        public CoaDetails_ErpPurpose_ErpPurpose(global::System.String code, global::System.String name)
        {
            Code = code;
            Name = name;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(CoaDetails_ErpPurpose_ErpPurpose? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Code.Equals(other.Code)) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((CoaDetails_ErpPurpose_ErpPurpose)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Code.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetailsResult
    {
        public global::AggieEnterpriseApi.ICoaDetails_ErpEntity? ErpEntity { get; }

        public global::AggieEnterpriseApi.ICoaDetails_ErpFund? ErpFund { get; }

        public global::AggieEnterpriseApi.ICoaDetails_ErpFinancialDepartment? ErpFinancialDepartment { get; }

        public global::AggieEnterpriseApi.ICoaDetails_ErpAccount? ErpAccount { get; }

        public global::AggieEnterpriseApi.ICoaDetails_ErpPurpose? ErpPurpose { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpEntity
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpEntity_ErpEntity : ICoaDetails_ErpEntity
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpFund
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpFund_ErpFund : ICoaDetails_ErpFund
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpFinancialDepartment
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.String? FiscalOfficerName { get; }

        public global::System.Boolean EligibleForUse { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpFinancialDepartment_ErpFinancialDepartment : ICoaDetails_ErpFinancialDepartment
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpAccount
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpAccount_ErpAccount : ICoaDetails_ErpAccount
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpPurpose
    {
        public global::System.String Code { get; }

        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetails_ErpPurpose_ErpPurpose : ICoaDetails_ErpPurpose
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidateResult : global::System.IEquatable<PpmStringSegmentsValidateResult>, IPpmStringSegmentsValidateResult
    {
        public PpmStringSegmentsValidateResult(global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate ppmStringSegmentsValidate)
        {
            PpmStringSegmentsValidate = ppmStringSegmentsValidate;
        }

        public global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate PpmStringSegmentsValidate { get; }

        public virtual global::System.Boolean Equals(PpmStringSegmentsValidateResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PpmStringSegmentsValidate.Equals(other.PpmStringSegmentsValidate));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmStringSegmentsValidateResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PpmStringSegmentsValidate.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput : global::System.IEquatable<PpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput>, IPpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput
    {
        public PpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput(global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse validationResponse, global::System.String? segmentString)
        {
            ValidationResponse = validationResponse;
            SegmentString = segmentString;
        }

        public global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse ValidationResponse { get; }

        public global::System.String? SegmentString { get; }

        public virtual global::System.Boolean Equals(PpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ValidationResponse.Equals(other.ValidationResponse)) && ((SegmentString is null && other.SegmentString is null) || SegmentString != null && SegmentString.Equals(other.SegmentString));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ValidationResponse.GetHashCode();
                if (SegmentString != null)
                {
                    hash ^= 397 * SegmentString.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse : global::System.IEquatable<PpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse>, IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse
    {
        public PpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse(global::System.Boolean valid, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties)
        {
            Valid = valid;
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
        }

        public global::System.Boolean Valid { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        public virtual global::System.Boolean Equals(PpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Valid == other.Valid) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MessageProperties, other.MessageProperties);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Valid.GetHashCode();
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (MessageProperties != null)
                {
                    foreach (var MessageProperties_elm in MessageProperties)
                    {
                        hash ^= 397 * MessageProperties_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmStringSegmentsValidateResult
    {
        public global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate PpmStringSegmentsValidate { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmStringSegmentsValidate_PpmStringSegmentsValidate
    {
        public global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse ValidationResponse { get; }

        public global::System.String? SegmentString { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput : IPpmStringSegmentsValidate_PpmStringSegmentsValidate
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse
    {
        public global::System.Boolean Valid { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse : IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateResult : global::System.IEquatable<PpmSegmentsValidateResult>, IPpmSegmentsValidateResult
    {
        public PpmSegmentsValidateResult(global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate ppmSegmentsValidate)
        {
            PpmSegmentsValidate = ppmSegmentsValidate;
        }

        public global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate PpmSegmentsValidate { get; }

        public virtual global::System.Boolean Equals(PpmSegmentsValidateResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (PpmSegmentsValidate.Equals(other.PpmSegmentsValidate));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmSegmentsValidateResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * PpmSegmentsValidate.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput : global::System.IEquatable<PpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput>, IPpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput
    {
        public PpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput(global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse validationResponse, global::System.String? segmentString)
        {
            ValidationResponse = validationResponse;
            SegmentString = segmentString;
        }

        public global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse ValidationResponse { get; }

        public global::System.String? SegmentString { get; }

        public virtual global::System.Boolean Equals(PpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ValidationResponse.Equals(other.ValidationResponse)) && ((SegmentString is null && other.SegmentString is null) || SegmentString != null && SegmentString.Equals(other.SegmentString));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ValidationResponse.GetHashCode();
                if (SegmentString != null)
                {
                    hash ^= 397 * SegmentString.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse : global::System.IEquatable<PpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse>, IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse
    {
        public PpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse(global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties, global::System.Boolean valid)
        {
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
            Valid = valid;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        public global::System.Boolean Valid { get; }

        public virtual global::System.Boolean Equals(PpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MessageProperties, other.MessageProperties) && Valid == other.Valid;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (MessageProperties != null)
                {
                    foreach (var MessageProperties_elm in MessageProperties)
                    {
                        hash ^= 397 * MessageProperties_elm.GetHashCode();
                    }
                }

                hash ^= 397 * Valid.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmSegmentsValidateResult
    {
        public global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate PpmSegmentsValidate { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmSegmentsValidate_PpmSegmentsValidate
    {
        public global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse ValidationResponse { get; }

        public global::System.String? SegmentString { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput : IPpmSegmentsValidate_PpmSegmentsValidate
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse
    {
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        public global::System.Boolean Valid { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse : IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsResult : global::System.IEquatable<GlValidateChartSegmentsResult>, IGlValidateChartSegmentsResult
    {
        public GlValidateChartSegmentsResult(global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments glValidateChartSegments)
        {
            GlValidateChartSegments = glValidateChartSegments;
        }

        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments GlValidateChartSegments { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegmentsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GlValidateChartSegments.Equals(other.GlValidateChartSegments));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegmentsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GlValidateChartSegments.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput : global::System.IEquatable<GlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput>, IGlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput
    {
        public GlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput(global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse validationResponse, global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Segments segments, global::System.String? completeChartstring, global::System.Int64? codeCombinationId, global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_SegmentNames segmentNames, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Warnings>? warnings, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_EndDates>? endDates)
        {
            ValidationResponse = validationResponse;
            Segments = segments;
            CompleteChartstring = completeChartstring;
            CodeCombinationId = codeCombinationId;
            SegmentNames = segmentNames;
            Warnings = warnings;
            EndDates = endDates;
        }

        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse ValidationResponse { get; }

        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Segments Segments { get; }

        public global::System.String? CompleteChartstring { get; }

        public global::System.Int64? CodeCombinationId { get; }

        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_SegmentNames SegmentNames { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Warnings>? Warnings { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_EndDates>? EndDates { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ValidationResponse.Equals(other.ValidationResponse)) && Segments.Equals(other.Segments) && ((CompleteChartstring is null && other.CompleteChartstring is null) || CompleteChartstring != null && CompleteChartstring.Equals(other.CompleteChartstring)) && CodeCombinationId == other.CodeCombinationId && SegmentNames.Equals(other.SegmentNames) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Warnings, other.Warnings) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(EndDates, other.EndDates);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ValidationResponse.GetHashCode();
                hash ^= 397 * Segments.GetHashCode();
                if (CompleteChartstring != null)
                {
                    hash ^= 397 * CompleteChartstring.GetHashCode();
                }

                if (CodeCombinationId != null)
                {
                    hash ^= 397 * CodeCombinationId.GetHashCode();
                }

                hash ^= 397 * SegmentNames.GetHashCode();
                if (Warnings != null)
                {
                    foreach (var Warnings_elm in Warnings)
                    {
                        hash ^= 397 * Warnings_elm.GetHashCode();
                    }
                }

                if (EndDates != null)
                {
                    foreach (var EndDates_elm in EndDates)
                    {
                        hash ^= 397 * EndDates_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse : global::System.IEquatable<GlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse>, IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse
    {
        public GlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse(global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties, global::System.Boolean valid)
        {
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
            Valid = valid;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        public global::System.Boolean Valid { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MessageProperties, other.MessageProperties) && Valid == other.Valid;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (MessageProperties != null)
                {
                    foreach (var MessageProperties_elm in MessageProperties)
                    {
                        hash ^= 397 * MessageProperties_elm.GetHashCode();
                    }
                }

                hash ^= 397 * Valid.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments : global::System.IEquatable<GlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments>, IGlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments
    {
        public GlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments(global::System.String? account, global::System.String? activity, global::System.String? department, global::System.String? entity, global::System.String? fund, global::System.String? program, global::System.String? project, global::System.String? purpose)
        {
            Account = account;
            Activity = activity;
            Department = department;
            Entity = entity;
            Fund = fund;
            Program = program;
            Project = project;
            Purpose = purpose;
        }

        public global::System.String? Account { get; }

        public global::System.String? Activity { get; }

        public global::System.String? Department { get; }

        public global::System.String? Entity { get; }

        public global::System.String? Fund { get; }

        public global::System.String? Program { get; }

        public global::System.String? Project { get; }

        public global::System.String? Purpose { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Account is null && other.Account is null) || Account != null && Account.Equals(other.Account))) && ((Activity is null && other.Activity is null) || Activity != null && Activity.Equals(other.Activity)) && ((Department is null && other.Department is null) || Department != null && Department.Equals(other.Department)) && ((Entity is null && other.Entity is null) || Entity != null && Entity.Equals(other.Entity)) && ((Fund is null && other.Fund is null) || Fund != null && Fund.Equals(other.Fund)) && ((Program is null && other.Program is null) || Program != null && Program.Equals(other.Program)) && ((Project is null && other.Project is null) || Project != null && Project.Equals(other.Project)) && ((Purpose is null && other.Purpose is null) || Purpose != null && Purpose.Equals(other.Purpose));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Account != null)
                {
                    hash ^= 397 * Account.GetHashCode();
                }

                if (Activity != null)
                {
                    hash ^= 397 * Activity.GetHashCode();
                }

                if (Department != null)
                {
                    hash ^= 397 * Department.GetHashCode();
                }

                if (Entity != null)
                {
                    hash ^= 397 * Entity.GetHashCode();
                }

                if (Fund != null)
                {
                    hash ^= 397 * Fund.GetHashCode();
                }

                if (Program != null)
                {
                    hash ^= 397 * Program.GetHashCode();
                }

                if (Project != null)
                {
                    hash ^= 397 * Project.GetHashCode();
                }

                if (Purpose != null)
                {
                    hash ^= 397 * Purpose.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames : global::System.IEquatable<GlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames>, IGlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames
    {
        public GlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames(global::System.String? entityName, global::System.String? fundName, global::System.String? departmentName, global::System.String? accountName, global::System.String? purposeName, global::System.String? projectName, global::System.String? programName, global::System.String? activityName)
        {
            EntityName = entityName;
            FundName = fundName;
            DepartmentName = departmentName;
            AccountName = accountName;
            PurposeName = purposeName;
            ProjectName = projectName;
            ProgramName = programName;
            ActivityName = activityName;
        }

        public global::System.String? EntityName { get; }

        public global::System.String? FundName { get; }

        public global::System.String? DepartmentName { get; }

        public global::System.String? AccountName { get; }

        public global::System.String? PurposeName { get; }

        public global::System.String? ProjectName { get; }

        public global::System.String? ProgramName { get; }

        public global::System.String? ActivityName { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((EntityName is null && other.EntityName is null) || EntityName != null && EntityName.Equals(other.EntityName))) && ((FundName is null && other.FundName is null) || FundName != null && FundName.Equals(other.FundName)) && ((DepartmentName is null && other.DepartmentName is null) || DepartmentName != null && DepartmentName.Equals(other.DepartmentName)) && ((AccountName is null && other.AccountName is null) || AccountName != null && AccountName.Equals(other.AccountName)) && ((PurposeName is null && other.PurposeName is null) || PurposeName != null && PurposeName.Equals(other.PurposeName)) && ((ProjectName is null && other.ProjectName is null) || ProjectName != null && ProjectName.Equals(other.ProjectName)) && ((ProgramName is null && other.ProgramName is null) || ProgramName != null && ProgramName.Equals(other.ProgramName)) && ((ActivityName is null && other.ActivityName is null) || ActivityName != null && ActivityName.Equals(other.ActivityName));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (EntityName != null)
                {
                    hash ^= 397 * EntityName.GetHashCode();
                }

                if (FundName != null)
                {
                    hash ^= 397 * FundName.GetHashCode();
                }

                if (DepartmentName != null)
                {
                    hash ^= 397 * DepartmentName.GetHashCode();
                }

                if (AccountName != null)
                {
                    hash ^= 397 * AccountName.GetHashCode();
                }

                if (PurposeName != null)
                {
                    hash ^= 397 * PurposeName.GetHashCode();
                }

                if (ProjectName != null)
                {
                    hash ^= 397 * ProjectName.GetHashCode();
                }

                if (ProgramName != null)
                {
                    hash ^= 397 * ProgramName.GetHashCode();
                }

                if (ActivityName != null)
                {
                    hash ^= 397 * ActivityName.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning : global::System.IEquatable<GlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning>, IGlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning
    {
        public GlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning(global::System.String segmentName, global::System.String warning)
        {
            SegmentName = segmentName;
            Warning = warning;
        }

        public global::System.String SegmentName { get; }

        public global::System.String Warning { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SegmentName.Equals(other.SegmentName)) && Warning.Equals(other.Warning);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SegmentName.GetHashCode();
                hash ^= 397 * Warning.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate : global::System.IEquatable<GlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate>, IGlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate
    {
        public GlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate(global::System.String segmentName, global::System.String endDate)
        {
            SegmentName = segmentName;
            EndDate = endDate;
        }

        public global::System.String SegmentName { get; }

        public global::System.String EndDate { get; }

        public virtual global::System.Boolean Equals(GlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SegmentName.Equals(other.SegmentName)) && EndDate.Equals(other.EndDate);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SegmentName.GetHashCode();
                hash ^= 397 * EndDate.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegmentsResult
    {
        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments GlValidateChartSegments { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments
    {
        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse ValidationResponse { get; }

        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Segments Segments { get; }

        public global::System.String? CompleteChartstring { get; }

        public global::System.Int64? CodeCombinationId { get; }

        public global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_SegmentNames SegmentNames { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Warnings>? Warnings { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_EndDates>? EndDates { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput : IGlValidateChartSegments_GlValidateChartSegments
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse
    {
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        public global::System.Boolean Valid { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse : IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_Segments
    {
        public global::System.String? Account { get; }

        public global::System.String? Activity { get; }

        public global::System.String? Department { get; }

        public global::System.String? Entity { get; }

        public global::System.String? Fund { get; }

        public global::System.String? Program { get; }

        public global::System.String? Project { get; }

        public global::System.String? Purpose { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments : IGlValidateChartSegments_GlValidateChartSegments_Segments
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_SegmentNames
    {
        public global::System.String? EntityName { get; }

        public global::System.String? FundName { get; }

        public global::System.String? DepartmentName { get; }

        public global::System.String? AccountName { get; }

        public global::System.String? PurposeName { get; }

        public global::System.String? ProjectName { get; }

        public global::System.String? ProgramName { get; }

        public global::System.String? ActivityName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames : IGlValidateChartSegments_GlValidateChartSegments_SegmentNames
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_Warnings
    {
        public global::System.String SegmentName { get; }

        public global::System.String Warning { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning : IGlValidateChartSegments_GlValidateChartSegments_Warnings
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_EndDates
    {
        public global::System.String SegmentName { get; }

        public global::System.String EndDate { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate : IGlValidateChartSegments_GlValidateChartSegments_EndDates
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstringResult : global::System.IEquatable<GlValidateChartstringResult>, IGlValidateChartstringResult
    {
        public GlValidateChartstringResult(global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring glValidateChartstring)
        {
            GlValidateChartstring = glValidateChartstring;
        }

        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring GlValidateChartstring { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstringResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (GlValidateChartstring.Equals(other.GlValidateChartstring));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstringResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * GlValidateChartstring.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput : global::System.IEquatable<GlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput>, IGlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput
    {
        public GlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput(global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_ValidationResponse validationResponse, global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Segments segments, global::System.String? completeChartstring, global::System.Int64? codeCombinationId, global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_SegmentNames segmentNames, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Warnings>? warnings, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_EndDates>? endDates)
        {
            ValidationResponse = validationResponse;
            Segments = segments;
            CompleteChartstring = completeChartstring;
            CodeCombinationId = codeCombinationId;
            SegmentNames = segmentNames;
            Warnings = warnings;
            EndDates = endDates;
        }

        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_ValidationResponse ValidationResponse { get; }

        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Segments Segments { get; }

        public global::System.String? CompleteChartstring { get; }

        public global::System.Int64? CodeCombinationId { get; }

        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_SegmentNames SegmentNames { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Warnings>? Warnings { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_EndDates>? EndDates { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ValidationResponse.Equals(other.ValidationResponse)) && Segments.Equals(other.Segments) && ((CompleteChartstring is null && other.CompleteChartstring is null) || CompleteChartstring != null && CompleteChartstring.Equals(other.CompleteChartstring)) && CodeCombinationId == other.CodeCombinationId && SegmentNames.Equals(other.SegmentNames) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Warnings, other.Warnings) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(EndDates, other.EndDates);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ValidationResponse.GetHashCode();
                hash ^= 397 * Segments.GetHashCode();
                if (CompleteChartstring != null)
                {
                    hash ^= 397 * CompleteChartstring.GetHashCode();
                }

                if (CodeCombinationId != null)
                {
                    hash ^= 397 * CodeCombinationId.GetHashCode();
                }

                hash ^= 397 * SegmentNames.GetHashCode();
                if (Warnings != null)
                {
                    foreach (var Warnings_elm in Warnings)
                    {
                        hash ^= 397 * Warnings_elm.GetHashCode();
                    }
                }

                if (EndDates != null)
                {
                    foreach (var EndDates_elm in EndDates)
                    {
                        hash ^= 397 * EndDates_elm.GetHashCode();
                    }
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse : global::System.IEquatable<GlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse>, IGlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse
    {
        public GlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse(global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties, global::System.Boolean valid)
        {
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
            Valid = valid;
        }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        public global::System.Boolean Valid { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(ErrorMessages, other.ErrorMessages)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(MessageProperties, other.MessageProperties) && Valid == other.Valid;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (ErrorMessages != null)
                {
                    foreach (var ErrorMessages_elm in ErrorMessages)
                    {
                        hash ^= 397 * ErrorMessages_elm.GetHashCode();
                    }
                }

                if (MessageProperties != null)
                {
                    foreach (var MessageProperties_elm in MessageProperties)
                    {
                        hash ^= 397 * MessageProperties_elm.GetHashCode();
                    }
                }

                hash ^= 397 * Valid.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstring_GlValidateChartstring_Segments_GlSegments : global::System.IEquatable<GlValidateChartstring_GlValidateChartstring_Segments_GlSegments>, IGlValidateChartstring_GlValidateChartstring_Segments_GlSegments
    {
        public GlValidateChartstring_GlValidateChartstring_Segments_GlSegments(global::System.String? account, global::System.String? activity, global::System.String? department, global::System.String? entity, global::System.String? fund, global::System.String? program, global::System.String? project, global::System.String? purpose)
        {
            Account = account;
            Activity = activity;
            Department = department;
            Entity = entity;
            Fund = fund;
            Program = program;
            Project = project;
            Purpose = purpose;
        }

        public global::System.String? Account { get; }

        public global::System.String? Activity { get; }

        public global::System.String? Department { get; }

        public global::System.String? Entity { get; }

        public global::System.String? Fund { get; }

        public global::System.String? Program { get; }

        public global::System.String? Project { get; }

        public global::System.String? Purpose { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstring_GlValidateChartstring_Segments_GlSegments? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Account is null && other.Account is null) || Account != null && Account.Equals(other.Account))) && ((Activity is null && other.Activity is null) || Activity != null && Activity.Equals(other.Activity)) && ((Department is null && other.Department is null) || Department != null && Department.Equals(other.Department)) && ((Entity is null && other.Entity is null) || Entity != null && Entity.Equals(other.Entity)) && ((Fund is null && other.Fund is null) || Fund != null && Fund.Equals(other.Fund)) && ((Program is null && other.Program is null) || Program != null && Program.Equals(other.Program)) && ((Project is null && other.Project is null) || Project != null && Project.Equals(other.Project)) && ((Purpose is null && other.Purpose is null) || Purpose != null && Purpose.Equals(other.Purpose));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstring_GlValidateChartstring_Segments_GlSegments)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Account != null)
                {
                    hash ^= 397 * Account.GetHashCode();
                }

                if (Activity != null)
                {
                    hash ^= 397 * Activity.GetHashCode();
                }

                if (Department != null)
                {
                    hash ^= 397 * Department.GetHashCode();
                }

                if (Entity != null)
                {
                    hash ^= 397 * Entity.GetHashCode();
                }

                if (Fund != null)
                {
                    hash ^= 397 * Fund.GetHashCode();
                }

                if (Program != null)
                {
                    hash ^= 397 * Program.GetHashCode();
                }

                if (Project != null)
                {
                    hash ^= 397 * Project.GetHashCode();
                }

                if (Purpose != null)
                {
                    hash ^= 397 * Purpose.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames : global::System.IEquatable<GlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames>, IGlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames
    {
        public GlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames(global::System.String? entityName, global::System.String? fundName, global::System.String? departmentName, global::System.String? accountName, global::System.String? purposeName, global::System.String? projectName, global::System.String? programName, global::System.String? activityName)
        {
            EntityName = entityName;
            FundName = fundName;
            DepartmentName = departmentName;
            AccountName = accountName;
            PurposeName = purposeName;
            ProjectName = projectName;
            ProgramName = programName;
            ActivityName = activityName;
        }

        public global::System.String? EntityName { get; }

        public global::System.String? FundName { get; }

        public global::System.String? DepartmentName { get; }

        public global::System.String? AccountName { get; }

        public global::System.String? PurposeName { get; }

        public global::System.String? ProjectName { get; }

        public global::System.String? ProgramName { get; }

        public global::System.String? ActivityName { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((EntityName is null && other.EntityName is null) || EntityName != null && EntityName.Equals(other.EntityName))) && ((FundName is null && other.FundName is null) || FundName != null && FundName.Equals(other.FundName)) && ((DepartmentName is null && other.DepartmentName is null) || DepartmentName != null && DepartmentName.Equals(other.DepartmentName)) && ((AccountName is null && other.AccountName is null) || AccountName != null && AccountName.Equals(other.AccountName)) && ((PurposeName is null && other.PurposeName is null) || PurposeName != null && PurposeName.Equals(other.PurposeName)) && ((ProjectName is null && other.ProjectName is null) || ProjectName != null && ProjectName.Equals(other.ProjectName)) && ((ProgramName is null && other.ProgramName is null) || ProgramName != null && ProgramName.Equals(other.ProgramName)) && ((ActivityName is null && other.ActivityName is null) || ActivityName != null && ActivityName.Equals(other.ActivityName));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (EntityName != null)
                {
                    hash ^= 397 * EntityName.GetHashCode();
                }

                if (FundName != null)
                {
                    hash ^= 397 * FundName.GetHashCode();
                }

                if (DepartmentName != null)
                {
                    hash ^= 397 * DepartmentName.GetHashCode();
                }

                if (AccountName != null)
                {
                    hash ^= 397 * AccountName.GetHashCode();
                }

                if (PurposeName != null)
                {
                    hash ^= 397 * PurposeName.GetHashCode();
                }

                if (ProjectName != null)
                {
                    hash ^= 397 * ProjectName.GetHashCode();
                }

                if (ProgramName != null)
                {
                    hash ^= 397 * ProgramName.GetHashCode();
                }

                if (ActivityName != null)
                {
                    hash ^= 397 * ActivityName.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning : global::System.IEquatable<GlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning>, IGlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning
    {
        public GlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning(global::System.String segmentName, global::System.String warning)
        {
            SegmentName = segmentName;
            Warning = warning;
        }

        public global::System.String SegmentName { get; }

        public global::System.String Warning { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SegmentName.Equals(other.SegmentName)) && Warning.Equals(other.Warning);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SegmentName.GetHashCode();
                hash ^= 397 * Warning.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate : global::System.IEquatable<GlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate>, IGlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate
    {
        public GlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate(global::System.String segmentName, global::System.String endDate)
        {
            SegmentName = segmentName;
            EndDate = endDate;
        }

        public global::System.String SegmentName { get; }

        public global::System.String EndDate { get; }

        public virtual global::System.Boolean Equals(GlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (SegmentName.Equals(other.SegmentName)) && EndDate.Equals(other.EndDate);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * SegmentName.GetHashCode();
                hash ^= 397 * EndDate.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstringResult
    {
        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring GlValidateChartstring { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring
    {
        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_ValidationResponse ValidationResponse { get; }

        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Segments Segments { get; }

        public global::System.String? CompleteChartstring { get; }

        public global::System.Int64? CodeCombinationId { get; }

        public global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_SegmentNames SegmentNames { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Warnings>? Warnings { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_EndDates>? EndDates { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput : IGlValidateChartstring_GlValidateChartstring
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_ValidationResponse
    {
        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        public global::System.Boolean Valid { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse : IGlValidateChartstring_GlValidateChartstring_ValidationResponse
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_Segments
    {
        public global::System.String? Account { get; }

        public global::System.String? Activity { get; }

        public global::System.String? Department { get; }

        public global::System.String? Entity { get; }

        public global::System.String? Fund { get; }

        public global::System.String? Program { get; }

        public global::System.String? Project { get; }

        public global::System.String? Purpose { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_Segments_GlSegments : IGlValidateChartstring_GlValidateChartstring_Segments
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_SegmentNames
    {
        public global::System.String? EntityName { get; }

        public global::System.String? FundName { get; }

        public global::System.String? DepartmentName { get; }

        public global::System.String? AccountName { get; }

        public global::System.String? PurposeName { get; }

        public global::System.String? ProjectName { get; }

        public global::System.String? ProgramName { get; }

        public global::System.String? ActivityName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames : IGlValidateChartstring_GlValidateChartstring_SegmentNames
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_Warnings
    {
        public global::System.String SegmentName { get; }

        public global::System.String Warning { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning : IGlValidateChartstring_GlValidateChartstring_Warnings
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_EndDates
    {
        public global::System.String SegmentName { get; }

        public global::System.String EndDate { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate : IGlValidateChartstring_GlValidateChartstring_EndDates
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _actionRequestHeaderInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glJournalInputFormatter = default !;
        public global::System.String TypeName => "GlJournalRequestInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _actionRequestHeaderInputFormatter = serializerResolver.GetInputValueFormatter("ActionRequestHeaderInput");
            _glJournalInputFormatter = serializerResolver.GetInputValueFormatter("GlJournalInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.GlJournalRequestInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IGlJournalRequestInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsHeaderSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("header", FormatHeader(input.Header)));
            }

            if (inputInfo.IsPayloadSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("payload", FormatPayload(input.Payload)));
            }

            return fields;
        }

        private global::System.Object? FormatHeader(global::AggieEnterpriseApi.ActionRequestHeaderInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _actionRequestHeaderInputFormatter.Format(input);
        }

        private global::System.Object? FormatPayload(global::AggieEnterpriseApi.GlJournalInput input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _glJournalInputFormatter.Format(input);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestInput : global::AggieEnterpriseApi.State.IGlJournalRequestInputInfo, global::System.IEquatable<GlJournalRequestInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalRequestInput)obj);
        }

        public virtual global::System.Boolean Equals(GlJournalRequestInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Header.Equals(other.Header)) && Payload.Equals(other.Payload);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Header.GetHashCode();
                hash ^= 397 * Payload.GetHashCode();
                return hash;
            }
        }

        private global::AggieEnterpriseApi.ActionRequestHeaderInput _value_header = default !;
        private global::System.Boolean _set_header;
        private global::AggieEnterpriseApi.GlJournalInput _value_payload = default !;
        private global::System.Boolean _set_payload;
        public global::AggieEnterpriseApi.ActionRequestHeaderInput Header
        {
            get => _value_header;
            set
            {
                _set_header = true;
                _value_header = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalRequestInputInfo.IsHeaderSet => _set_header;
        public global::AggieEnterpriseApi.GlJournalInput Payload
        {
            get => _value_payload;
            set
            {
                _set_payload = true;
                _value_payload = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalRequestInputInfo.IsPayloadSet => _set_payload;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ActionRequestHeaderInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString80Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString240Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter = default !;
        public global::System.String TypeName => "ActionRequestHeaderInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _nonEmptyTrimmedString80Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString80");
            _nonEmptyTrimmedString240Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString240");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.ActionRequestHeaderInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsConsumerTrackingIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("consumerTrackingId", FormatConsumerTrackingId(input.ConsumerTrackingId)));
            }

            if (inputInfo.IsConsumerReferenceIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("consumerReferenceId", FormatConsumerReferenceId(input.ConsumerReferenceId)));
            }

            if (inputInfo.IsConsumerNotesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("consumerNotes", FormatConsumerNotes(input.ConsumerNotes)));
            }

            if (inputInfo.IsBoundaryApplicationNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("boundaryApplicationName", FormatBoundaryApplicationName(input.BoundaryApplicationName)));
            }

            if (inputInfo.IsConsumerIdSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("consumerId", FormatConsumerId(input.ConsumerId)));
            }

            if (inputInfo.IsBatchRequestSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("batchRequest", FormatBatchRequest(input.BatchRequest)));
            }

            return fields;
        }

        private global::System.Object? FormatConsumerTrackingId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString80Formatter.Format(input);
        }

        private global::System.Object? FormatConsumerReferenceId(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString80Formatter.Format(input);
        }

        private global::System.Object? FormatConsumerNotes(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonEmptyTrimmedString240Formatter.Format(input);
            }
        }

        private global::System.Object? FormatBoundaryApplicationName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString80Formatter.Format(input);
        }

        private global::System.Object? FormatConsumerId(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonEmptyTrimmedString80Formatter.Format(input);
            }
        }

        private global::System.Object? FormatBatchRequest(global::System.Boolean? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _booleanFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ActionRequestHeaderInput : global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo, global::System.IEquatable<ActionRequestHeaderInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((ActionRequestHeaderInput)obj);
        }

        public virtual global::System.Boolean Equals(ActionRequestHeaderInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (ConsumerTrackingId.Equals(other.ConsumerTrackingId)) && ConsumerReferenceId.Equals(other.ConsumerReferenceId) && ((ConsumerNotes is null && other.ConsumerNotes is null) || ConsumerNotes != null && ConsumerNotes.Equals(other.ConsumerNotes)) && BoundaryApplicationName.Equals(other.BoundaryApplicationName) && ((ConsumerId is null && other.ConsumerId is null) || ConsumerId != null && ConsumerId.Equals(other.ConsumerId)) && BatchRequest == other.BatchRequest;
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * ConsumerTrackingId.GetHashCode();
                hash ^= 397 * ConsumerReferenceId.GetHashCode();
                if (ConsumerNotes != null)
                {
                    hash ^= 397 * ConsumerNotes.GetHashCode();
                }

                hash ^= 397 * BoundaryApplicationName.GetHashCode();
                if (ConsumerId != null)
                {
                    hash ^= 397 * ConsumerId.GetHashCode();
                }

                if (BatchRequest != null)
                {
                    hash ^= 397 * BatchRequest.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String _value_consumerTrackingId = default !;
        private global::System.Boolean _set_consumerTrackingId;
        private global::System.String _value_consumerReferenceId = default !;
        private global::System.Boolean _set_consumerReferenceId;
        private global::System.String? _value_consumerNotes;
        private global::System.Boolean _set_consumerNotes;
        private global::System.String _value_boundaryApplicationName = default !;
        private global::System.Boolean _set_boundaryApplicationName;
        private global::System.String? _value_consumerId;
        private global::System.Boolean _set_consumerId;
        private global::System.Boolean? _value_batchRequest;
        private global::System.Boolean _set_batchRequest;
        public global::System.String ConsumerTrackingId
        {
            get => _value_consumerTrackingId;
            set
            {
                _set_consumerTrackingId = true;
                _value_consumerTrackingId = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo.IsConsumerTrackingIdSet => _set_consumerTrackingId;
        public global::System.String ConsumerReferenceId
        {
            get => _value_consumerReferenceId;
            set
            {
                _set_consumerReferenceId = true;
                _value_consumerReferenceId = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo.IsConsumerReferenceIdSet => _set_consumerReferenceId;
        public global::System.String? ConsumerNotes
        {
            get => _value_consumerNotes;
            set
            {
                _set_consumerNotes = true;
                _value_consumerNotes = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo.IsConsumerNotesSet => _set_consumerNotes;
        public global::System.String BoundaryApplicationName
        {
            get => _value_boundaryApplicationName;
            set
            {
                _set_boundaryApplicationName = true;
                _value_boundaryApplicationName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo.IsBoundaryApplicationNameSet => _set_boundaryApplicationName;
        public global::System.String? ConsumerId
        {
            get => _value_consumerId;
            set
            {
                _set_consumerId = true;
                _value_consumerId = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo.IsConsumerIdSet => _set_consumerId;
        public global::System.Boolean? BatchRequest
        {
            get => _value_batchRequest;
            set
            {
                _set_batchRequest = true;
                _value_batchRequest = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IActionRequestHeaderInputInfo.IsBatchRequestSet => _set_batchRequest;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString80Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpNameField100Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpDescriptionField240Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glReferenceField25Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _localDateFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonEmptyTrimmedString15Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glJournalLineInputFormatter = default !;
        public global::System.String TypeName => "GlJournalInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _nonEmptyTrimmedString80Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString80");
            _erpNameField100Formatter = serializerResolver.GetInputValueFormatter("ErpNameField100");
            _erpDescriptionField240Formatter = serializerResolver.GetInputValueFormatter("ErpDescriptionField240");
            _glReferenceField25Formatter = serializerResolver.GetInputValueFormatter("GlReferenceField25");
            _localDateFormatter = serializerResolver.GetInputValueFormatter("LocalDate");
            _nonEmptyTrimmedString15Formatter = serializerResolver.GetInputValueFormatter("NonEmptyTrimmedString15");
            _glJournalLineInputFormatter = serializerResolver.GetInputValueFormatter("GlJournalLineInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.GlJournalInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IGlJournalInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsJournalSourceNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalSourceName", FormatJournalSourceName(input.JournalSourceName)));
            }

            if (inputInfo.IsJournalCategoryNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalCategoryName", FormatJournalCategoryName(input.JournalCategoryName)));
            }

            if (inputInfo.IsJournalNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalName", FormatJournalName(input.JournalName)));
            }

            if (inputInfo.IsJournalDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalDescription", FormatJournalDescription(input.JournalDescription)));
            }

            if (inputInfo.IsJournalReferenceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalReference", FormatJournalReference(input.JournalReference)));
            }

            if (inputInfo.IsAccountingDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("accountingDate", FormatAccountingDate(input.AccountingDate)));
            }

            if (inputInfo.IsAccountingPeriodNameSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("accountingPeriodName", FormatAccountingPeriodName(input.AccountingPeriodName)));
            }

            if (inputInfo.IsJournalLinesSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalLines", FormatJournalLines(input.JournalLines)));
            }

            return fields;
        }

        private global::System.Object? FormatJournalSourceName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString80Formatter.Format(input);
        }

        private global::System.Object? FormatJournalCategoryName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _nonEmptyTrimmedString80Formatter.Format(input);
        }

        private global::System.Object? FormatJournalName(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _erpNameField100Formatter.Format(input);
        }

        private global::System.Object? FormatJournalDescription(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpDescriptionField240Formatter.Format(input);
            }
        }

        private global::System.Object? FormatJournalReference(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _glReferenceField25Formatter.Format(input);
        }

        private global::System.Object? FormatAccountingDate(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _localDateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatAccountingPeriodName(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonEmptyTrimmedString15Formatter.Format(input);
            }
        }

        private global::System.Object? FormatJournalLines(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.GlJournalLineInput> input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            var input_list = new global::System.Collections.Generic.List<global::System.Object?>();
            foreach (var input_elm in input)
            {
                if (input_elm is null)
                {
                    throw new global::System.ArgumentNullException(nameof(input_elm));
                }

                input_list.Add(_glJournalLineInputFormatter.Format(input_elm));
            }

            return input_list;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalInput : global::AggieEnterpriseApi.State.IGlJournalInputInfo, global::System.IEquatable<GlJournalInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalInput)obj);
        }

        public virtual global::System.Boolean Equals(GlJournalInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (JournalSourceName.Equals(other.JournalSourceName)) && JournalCategoryName.Equals(other.JournalCategoryName) && JournalName.Equals(other.JournalName) && ((JournalDescription is null && other.JournalDescription is null) || JournalDescription != null && JournalDescription.Equals(other.JournalDescription)) && JournalReference.Equals(other.JournalReference) && ((AccountingDate is null && other.AccountingDate is null) || AccountingDate != null && AccountingDate.Equals(other.AccountingDate)) && ((AccountingPeriodName is null && other.AccountingPeriodName is null) || AccountingPeriodName != null && AccountingPeriodName.Equals(other.AccountingPeriodName)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(JournalLines, other.JournalLines);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * JournalSourceName.GetHashCode();
                hash ^= 397 * JournalCategoryName.GetHashCode();
                hash ^= 397 * JournalName.GetHashCode();
                if (JournalDescription != null)
                {
                    hash ^= 397 * JournalDescription.GetHashCode();
                }

                hash ^= 397 * JournalReference.GetHashCode();
                if (AccountingDate != null)
                {
                    hash ^= 397 * AccountingDate.GetHashCode();
                }

                if (AccountingPeriodName != null)
                {
                    hash ^= 397 * AccountingPeriodName.GetHashCode();
                }

                foreach (var JournalLines_elm in JournalLines)
                {
                    hash ^= 397 * JournalLines_elm.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String _value_journalSourceName = default !;
        private global::System.Boolean _set_journalSourceName;
        private global::System.String _value_journalCategoryName = default !;
        private global::System.Boolean _set_journalCategoryName;
        private global::System.String _value_journalName = default !;
        private global::System.Boolean _set_journalName;
        private global::System.String? _value_journalDescription;
        private global::System.Boolean _set_journalDescription;
        private global::System.String _value_journalReference = default !;
        private global::System.Boolean _set_journalReference;
        private global::System.String? _value_accountingDate;
        private global::System.Boolean _set_accountingDate;
        private global::System.String? _value_accountingPeriodName;
        private global::System.Boolean _set_accountingPeriodName;
        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.GlJournalLineInput> _value_journalLines = default !;
        private global::System.Boolean _set_journalLines;
        public global::System.String JournalSourceName
        {
            get => _value_journalSourceName;
            set
            {
                _set_journalSourceName = true;
                _value_journalSourceName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsJournalSourceNameSet => _set_journalSourceName;
        public global::System.String JournalCategoryName
        {
            get => _value_journalCategoryName;
            set
            {
                _set_journalCategoryName = true;
                _value_journalCategoryName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsJournalCategoryNameSet => _set_journalCategoryName;
        public global::System.String JournalName
        {
            get => _value_journalName;
            set
            {
                _set_journalName = true;
                _value_journalName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsJournalNameSet => _set_journalName;
        public global::System.String? JournalDescription
        {
            get => _value_journalDescription;
            set
            {
                _set_journalDescription = true;
                _value_journalDescription = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsJournalDescriptionSet => _set_journalDescription;
        public global::System.String JournalReference
        {
            get => _value_journalReference;
            set
            {
                _set_journalReference = true;
                _value_journalReference = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsJournalReferenceSet => _set_journalReference;
        public global::System.String? AccountingDate
        {
            get => _value_accountingDate;
            set
            {
                _set_accountingDate = true;
                _value_accountingDate = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsAccountingDateSet => _set_accountingDate;
        public global::System.String? AccountingPeriodName
        {
            get => _value_accountingPeriodName;
            set
            {
                _set_accountingPeriodName = true;
                _value_accountingPeriodName = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsAccountingPeriodNameSet => _set_accountingPeriodName;
        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.GlJournalLineInput> JournalLines
        {
            get => _value_journalLines;
            set
            {
                _set_journalLines = true;
                _value_journalLines = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalInputInfo.IsJournalLinesSet => _set_journalLines;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalLineInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _glSegmentInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glSegmentStringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmSegmentInputFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmSegmentStringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _nonNegativeFloatFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glReferenceField10Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glReferenceField25Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glDescriptionField40Formatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _glideInputFormatter = default !;
        public global::System.String TypeName => "GlJournalLineInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _glSegmentInputFormatter = serializerResolver.GetInputValueFormatter("GlSegmentInput");
            _glSegmentStringFormatter = serializerResolver.GetInputValueFormatter("GlSegmentString");
            _ppmSegmentInputFormatter = serializerResolver.GetInputValueFormatter("PpmSegmentInput");
            _ppmSegmentStringFormatter = serializerResolver.GetInputValueFormatter("PpmSegmentString");
            _nonNegativeFloatFormatter = serializerResolver.GetInputValueFormatter("NonNegativeFloat");
            _glReferenceField10Formatter = serializerResolver.GetInputValueFormatter("GlReferenceField10");
            _glReferenceField25Formatter = serializerResolver.GetInputValueFormatter("GlReferenceField25");
            _glDescriptionField40Formatter = serializerResolver.GetInputValueFormatter("GlDescriptionField40");
            _glideInputFormatter = serializerResolver.GetInputValueFormatter("GlideInput");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.GlJournalLineInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IGlJournalLineInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsGlSegmentsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("glSegments", FormatGlSegments(input.GlSegments)));
            }

            if (inputInfo.IsGlSegmentStringSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("glSegmentString", FormatGlSegmentString(input.GlSegmentString)));
            }

            if (inputInfo.IsPpmSegmentsSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ppmSegments", FormatPpmSegments(input.PpmSegments)));
            }

            if (inputInfo.IsPpmSegmentStringSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ppmSegmentString", FormatPpmSegmentString(input.PpmSegmentString)));
            }

            if (inputInfo.IsDebitAmountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("debitAmount", FormatDebitAmount(input.DebitAmount)));
            }

            if (inputInfo.IsCreditAmountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("creditAmount", FormatCreditAmount(input.CreditAmount)));
            }

            if (inputInfo.IsExternalSystemIdentifierSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("externalSystemIdentifier", FormatExternalSystemIdentifier(input.ExternalSystemIdentifier)));
            }

            if (inputInfo.IsExternalSystemReferenceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("externalSystemReference", FormatExternalSystemReference(input.ExternalSystemReference)));
            }

            if (inputInfo.IsPpmCommentSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("ppmComment", FormatPpmComment(input.PpmComment)));
            }

            if (inputInfo.IsGlideSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("glide", FormatGlide(input.Glide)));
            }

            return fields;
        }

        private global::System.Object? FormatGlSegments(global::AggieEnterpriseApi.GlSegmentInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _glSegmentInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatGlSegmentString(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _glSegmentStringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPpmSegments(global::AggieEnterpriseApi.PpmSegmentInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _ppmSegmentInputFormatter.Format(input);
            }
        }

        private global::System.Object? FormatPpmSegmentString(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _ppmSegmentStringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatDebitAmount(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonNegativeFloatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatCreditAmount(global::System.Decimal? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _nonNegativeFloatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatExternalSystemIdentifier(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _glReferenceField10Formatter.Format(input);
        }

        private global::System.Object? FormatExternalSystemReference(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _glReferenceField25Formatter.Format(input);
            }
        }

        private global::System.Object? FormatPpmComment(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _glDescriptionField40Formatter.Format(input);
            }
        }

        private global::System.Object? FormatGlide(global::AggieEnterpriseApi.GlideInput? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _glideInputFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalLineInput : global::AggieEnterpriseApi.State.IGlJournalLineInputInfo, global::System.IEquatable<GlJournalLineInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlJournalLineInput)obj);
        }

        public virtual global::System.Boolean Equals(GlJournalLineInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((GlSegments is null && other.GlSegments is null) || GlSegments != null && GlSegments.Equals(other.GlSegments))) && ((GlSegmentString is null && other.GlSegmentString is null) || GlSegmentString != null && GlSegmentString.Equals(other.GlSegmentString)) && ((PpmSegments is null && other.PpmSegments is null) || PpmSegments != null && PpmSegments.Equals(other.PpmSegments)) && ((PpmSegmentString is null && other.PpmSegmentString is null) || PpmSegmentString != null && PpmSegmentString.Equals(other.PpmSegmentString)) && DebitAmount == other.DebitAmount && CreditAmount == other.CreditAmount && ExternalSystemIdentifier.Equals(other.ExternalSystemIdentifier) && ((ExternalSystemReference is null && other.ExternalSystemReference is null) || ExternalSystemReference != null && ExternalSystemReference.Equals(other.ExternalSystemReference)) && ((PpmComment is null && other.PpmComment is null) || PpmComment != null && PpmComment.Equals(other.PpmComment)) && ((Glide is null && other.Glide is null) || Glide != null && Glide.Equals(other.Glide));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (GlSegments != null)
                {
                    hash ^= 397 * GlSegments.GetHashCode();
                }

                if (GlSegmentString != null)
                {
                    hash ^= 397 * GlSegmentString.GetHashCode();
                }

                if (PpmSegments != null)
                {
                    hash ^= 397 * PpmSegments.GetHashCode();
                }

                if (PpmSegmentString != null)
                {
                    hash ^= 397 * PpmSegmentString.GetHashCode();
                }

                if (DebitAmount != null)
                {
                    hash ^= 397 * DebitAmount.GetHashCode();
                }

                if (CreditAmount != null)
                {
                    hash ^= 397 * CreditAmount.GetHashCode();
                }

                hash ^= 397 * ExternalSystemIdentifier.GetHashCode();
                if (ExternalSystemReference != null)
                {
                    hash ^= 397 * ExternalSystemReference.GetHashCode();
                }

                if (PpmComment != null)
                {
                    hash ^= 397 * PpmComment.GetHashCode();
                }

                if (Glide != null)
                {
                    hash ^= 397 * Glide.GetHashCode();
                }

                return hash;
            }
        }

        private global::AggieEnterpriseApi.GlSegmentInput? _value_glSegments;
        private global::System.Boolean _set_glSegments;
        private global::System.String? _value_glSegmentString;
        private global::System.Boolean _set_glSegmentString;
        private global::AggieEnterpriseApi.PpmSegmentInput? _value_ppmSegments;
        private global::System.Boolean _set_ppmSegments;
        private global::System.String? _value_ppmSegmentString;
        private global::System.Boolean _set_ppmSegmentString;
        private global::System.Decimal? _value_debitAmount;
        private global::System.Boolean _set_debitAmount;
        private global::System.Decimal? _value_creditAmount;
        private global::System.Boolean _set_creditAmount;
        private global::System.String _value_externalSystemIdentifier = default !;
        private global::System.Boolean _set_externalSystemIdentifier;
        private global::System.String? _value_externalSystemReference;
        private global::System.Boolean _set_externalSystemReference;
        private global::System.String? _value_ppmComment;
        private global::System.Boolean _set_ppmComment;
        private global::AggieEnterpriseApi.GlideInput? _value_glide;
        private global::System.Boolean _set_glide;
        public global::AggieEnterpriseApi.GlSegmentInput? GlSegments
        {
            get => _value_glSegments;
            set
            {
                _set_glSegments = true;
                _value_glSegments = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsGlSegmentsSet => _set_glSegments;
        public global::System.String? GlSegmentString
        {
            get => _value_glSegmentString;
            set
            {
                _set_glSegmentString = true;
                _value_glSegmentString = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsGlSegmentStringSet => _set_glSegmentString;
        public global::AggieEnterpriseApi.PpmSegmentInput? PpmSegments
        {
            get => _value_ppmSegments;
            set
            {
                _set_ppmSegments = true;
                _value_ppmSegments = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsPpmSegmentsSet => _set_ppmSegments;
        public global::System.String? PpmSegmentString
        {
            get => _value_ppmSegmentString;
            set
            {
                _set_ppmSegmentString = true;
                _value_ppmSegmentString = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsPpmSegmentStringSet => _set_ppmSegmentString;
        public global::System.Decimal? DebitAmount
        {
            get => _value_debitAmount;
            set
            {
                _set_debitAmount = true;
                _value_debitAmount = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsDebitAmountSet => _set_debitAmount;
        public global::System.Decimal? CreditAmount
        {
            get => _value_creditAmount;
            set
            {
                _set_creditAmount = true;
                _value_creditAmount = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsCreditAmountSet => _set_creditAmount;
        public global::System.String ExternalSystemIdentifier
        {
            get => _value_externalSystemIdentifier;
            set
            {
                _set_externalSystemIdentifier = true;
                _value_externalSystemIdentifier = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsExternalSystemIdentifierSet => _set_externalSystemIdentifier;
        public global::System.String? ExternalSystemReference
        {
            get => _value_externalSystemReference;
            set
            {
                _set_externalSystemReference = true;
                _value_externalSystemReference = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsExternalSystemReferenceSet => _set_externalSystemReference;
        public global::System.String? PpmComment
        {
            get => _value_ppmComment;
            set
            {
                _set_ppmComment = true;
                _value_ppmComment = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsPpmCommentSet => _set_ppmComment;
        public global::AggieEnterpriseApi.GlideInput? Glide
        {
            get => _value_glide;
            set
            {
                _set_glide = true;
                _value_glide = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlJournalLineInputInfo.IsGlideSet => _set_glide;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlSegmentInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpEntityCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpFundCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpDepartmentCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpAccountCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpPurposeCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpProjectCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpProgramCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpActivityCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpFlex1CodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _erpFlex2CodeFormatter = default !;
        public global::System.String TypeName => "GlSegmentInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _erpEntityCodeFormatter = serializerResolver.GetInputValueFormatter("ErpEntityCode");
            _erpFundCodeFormatter = serializerResolver.GetInputValueFormatter("ErpFundCode");
            _erpDepartmentCodeFormatter = serializerResolver.GetInputValueFormatter("ErpDepartmentCode");
            _erpAccountCodeFormatter = serializerResolver.GetInputValueFormatter("ErpAccountCode");
            _erpPurposeCodeFormatter = serializerResolver.GetInputValueFormatter("ErpPurposeCode");
            _erpProjectCodeFormatter = serializerResolver.GetInputValueFormatter("ErpProjectCode");
            _erpProgramCodeFormatter = serializerResolver.GetInputValueFormatter("ErpProgramCode");
            _erpActivityCodeFormatter = serializerResolver.GetInputValueFormatter("ErpActivityCode");
            _erpFlex1CodeFormatter = serializerResolver.GetInputValueFormatter("ErpFlex1Code");
            _erpFlex2CodeFormatter = serializerResolver.GetInputValueFormatter("ErpFlex2Code");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.GlSegmentInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IGlSegmentInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsEntitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("entity", FormatEntity(input.Entity)));
            }

            if (inputInfo.IsFundSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("fund", FormatFund(input.Fund)));
            }

            if (inputInfo.IsDepartmentSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("department", FormatDepartment(input.Department)));
            }

            if (inputInfo.IsAccountSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("account", FormatAccount(input.Account)));
            }

            if (inputInfo.IsPurposeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("purpose", FormatPurpose(input.Purpose)));
            }

            if (inputInfo.IsProjectSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("project", FormatProject(input.Project)));
            }

            if (inputInfo.IsProgramSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("program", FormatProgram(input.Program)));
            }

            if (inputInfo.IsActivitySet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("activity", FormatActivity(input.Activity)));
            }

            if (inputInfo.IsFlex1Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("flex1", FormatFlex1(input.Flex1)));
            }

            if (inputInfo.IsFlex2Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("flex2", FormatFlex2(input.Flex2)));
            }

            return fields;
        }

        private global::System.Object? FormatEntity(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _erpEntityCodeFormatter.Format(input);
        }

        private global::System.Object? FormatFund(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _erpFundCodeFormatter.Format(input);
        }

        private global::System.Object? FormatDepartment(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _erpDepartmentCodeFormatter.Format(input);
        }

        private global::System.Object? FormatAccount(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _erpAccountCodeFormatter.Format(input);
        }

        private global::System.Object? FormatPurpose(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpPurposeCodeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatProject(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpProjectCodeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatProgram(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpProgramCodeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatActivity(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpActivityCodeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFlex1(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpFlex1CodeFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFlex2(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _erpFlex2CodeFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlSegmentInput : global::AggieEnterpriseApi.State.IGlSegmentInputInfo, global::System.IEquatable<GlSegmentInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlSegmentInput)obj);
        }

        public virtual global::System.Boolean Equals(GlSegmentInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Entity.Equals(other.Entity)) && Fund.Equals(other.Fund) && Department.Equals(other.Department) && Account.Equals(other.Account) && ((Purpose is null && other.Purpose is null) || Purpose != null && Purpose.Equals(other.Purpose)) && ((Project is null && other.Project is null) || Project != null && Project.Equals(other.Project)) && ((Program is null && other.Program is null) || Program != null && Program.Equals(other.Program)) && ((Activity is null && other.Activity is null) || Activity != null && Activity.Equals(other.Activity)) && ((Flex1 is null && other.Flex1 is null) || Flex1 != null && Flex1.Equals(other.Flex1)) && ((Flex2 is null && other.Flex2 is null) || Flex2 != null && Flex2.Equals(other.Flex2));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Entity.GetHashCode();
                hash ^= 397 * Fund.GetHashCode();
                hash ^= 397 * Department.GetHashCode();
                hash ^= 397 * Account.GetHashCode();
                if (Purpose != null)
                {
                    hash ^= 397 * Purpose.GetHashCode();
                }

                if (Project != null)
                {
                    hash ^= 397 * Project.GetHashCode();
                }

                if (Program != null)
                {
                    hash ^= 397 * Program.GetHashCode();
                }

                if (Activity != null)
                {
                    hash ^= 397 * Activity.GetHashCode();
                }

                if (Flex1 != null)
                {
                    hash ^= 397 * Flex1.GetHashCode();
                }

                if (Flex2 != null)
                {
                    hash ^= 397 * Flex2.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String _value_entity = default !;
        private global::System.Boolean _set_entity;
        private global::System.String _value_fund = default !;
        private global::System.Boolean _set_fund;
        private global::System.String _value_department = default !;
        private global::System.Boolean _set_department;
        private global::System.String _value_account = default !;
        private global::System.Boolean _set_account;
        private global::System.String? _value_purpose;
        private global::System.Boolean _set_purpose;
        private global::System.String? _value_project;
        private global::System.Boolean _set_project;
        private global::System.String? _value_program;
        private global::System.Boolean _set_program;
        private global::System.String? _value_activity;
        private global::System.Boolean _set_activity;
        private global::System.String? _value_flex1;
        private global::System.Boolean _set_flex1;
        private global::System.String? _value_flex2;
        private global::System.Boolean _set_flex2;
        public global::System.String Entity
        {
            get => _value_entity;
            set
            {
                _set_entity = true;
                _value_entity = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsEntitySet => _set_entity;
        public global::System.String Fund
        {
            get => _value_fund;
            set
            {
                _set_fund = true;
                _value_fund = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsFundSet => _set_fund;
        public global::System.String Department
        {
            get => _value_department;
            set
            {
                _set_department = true;
                _value_department = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsDepartmentSet => _set_department;
        public global::System.String Account
        {
            get => _value_account;
            set
            {
                _set_account = true;
                _value_account = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsAccountSet => _set_account;
        public global::System.String? Purpose
        {
            get => _value_purpose;
            set
            {
                _set_purpose = true;
                _value_purpose = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsPurposeSet => _set_purpose;
        public global::System.String? Project
        {
            get => _value_project;
            set
            {
                _set_project = true;
                _value_project = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsProjectSet => _set_project;
        public global::System.String? Program
        {
            get => _value_program;
            set
            {
                _set_program = true;
                _value_program = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsProgramSet => _set_program;
        public global::System.String? Activity
        {
            get => _value_activity;
            set
            {
                _set_activity = true;
                _value_activity = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsActivitySet => _set_activity;
        public global::System.String? Flex1
        {
            get => _value_flex1;
            set
            {
                _set_flex1 = true;
                _value_flex1 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsFlex1Set => _set_flex1;
        public global::System.String? Flex2
        {
            get => _value_flex2;
            set
            {
                _set_flex2 = true;
                _value_flex2 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlSegmentInputInfo.IsFlex2Set => _set_flex2;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmProjectNumberFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmTaskNumberFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmExpenseOrganizationCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmExpenseTypeCodeFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmAwardNumberFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _ppmFundingSourceNumberFormatter = default !;
        public global::System.String TypeName => "PpmSegmentInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _ppmProjectNumberFormatter = serializerResolver.GetInputValueFormatter("PpmProjectNumber");
            _ppmTaskNumberFormatter = serializerResolver.GetInputValueFormatter("PpmTaskNumber");
            _ppmExpenseOrganizationCodeFormatter = serializerResolver.GetInputValueFormatter("PpmExpenseOrganizationCode");
            _ppmExpenseTypeCodeFormatter = serializerResolver.GetInputValueFormatter("PpmExpenseTypeCode");
            _ppmAwardNumberFormatter = serializerResolver.GetInputValueFormatter("PpmAwardNumber");
            _ppmFundingSourceNumberFormatter = serializerResolver.GetInputValueFormatter("PpmFundingSourceNumber");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.PpmSegmentInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IPpmSegmentInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsProjectSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("project", FormatProject(input.Project)));
            }

            if (inputInfo.IsTaskSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("task", FormatTask(input.Task)));
            }

            if (inputInfo.IsOrganizationSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("organization", FormatOrganization(input.Organization)));
            }

            if (inputInfo.IsExpenditureTypeSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("expenditureType", FormatExpenditureType(input.ExpenditureType)));
            }

            if (inputInfo.IsAwardSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("award", FormatAward(input.Award)));
            }

            if (inputInfo.IsFundingSourceSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("fundingSource", FormatFundingSource(input.FundingSource)));
            }

            return fields;
        }

        private global::System.Object? FormatProject(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _ppmProjectNumberFormatter.Format(input);
        }

        private global::System.Object? FormatTask(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _ppmTaskNumberFormatter.Format(input);
        }

        private global::System.Object? FormatOrganization(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _ppmExpenseOrganizationCodeFormatter.Format(input);
        }

        private global::System.Object? FormatExpenditureType(global::System.String input)
        {
            if (input is null)
            {
                throw new global::System.ArgumentNullException(nameof(input));
            }

            return _ppmExpenseTypeCodeFormatter.Format(input);
        }

        private global::System.Object? FormatAward(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _ppmAwardNumberFormatter.Format(input);
            }
        }

        private global::System.Object? FormatFundingSource(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _ppmFundingSourceNumberFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentInput : global::AggieEnterpriseApi.State.IPpmSegmentInputInfo, global::System.IEquatable<PpmSegmentInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((PpmSegmentInput)obj);
        }

        public virtual global::System.Boolean Equals(PpmSegmentInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Project.Equals(other.Project)) && Task.Equals(other.Task) && Organization.Equals(other.Organization) && ExpenditureType.Equals(other.ExpenditureType) && ((Award is null && other.Award is null) || Award != null && Award.Equals(other.Award)) && ((FundingSource is null && other.FundingSource is null) || FundingSource != null && FundingSource.Equals(other.FundingSource));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Project.GetHashCode();
                hash ^= 397 * Task.GetHashCode();
                hash ^= 397 * Organization.GetHashCode();
                hash ^= 397 * ExpenditureType.GetHashCode();
                if (Award != null)
                {
                    hash ^= 397 * Award.GetHashCode();
                }

                if (FundingSource != null)
                {
                    hash ^= 397 * FundingSource.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String _value_project = default !;
        private global::System.Boolean _set_project;
        private global::System.String _value_task = default !;
        private global::System.Boolean _set_task;
        private global::System.String _value_organization = default !;
        private global::System.Boolean _set_organization;
        private global::System.String _value_expenditureType = default !;
        private global::System.Boolean _set_expenditureType;
        private global::System.String? _value_award;
        private global::System.Boolean _set_award;
        private global::System.String? _value_fundingSource;
        private global::System.Boolean _set_fundingSource;
        public global::System.String Project
        {
            get => _value_project;
            set
            {
                _set_project = true;
                _value_project = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmSegmentInputInfo.IsProjectSet => _set_project;
        public global::System.String Task
        {
            get => _value_task;
            set
            {
                _set_task = true;
                _value_task = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmSegmentInputInfo.IsTaskSet => _set_task;
        public global::System.String Organization
        {
            get => _value_organization;
            set
            {
                _set_organization = true;
                _value_organization = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmSegmentInputInfo.IsOrganizationSet => _set_organization;
        public global::System.String ExpenditureType
        {
            get => _value_expenditureType;
            set
            {
                _set_expenditureType = true;
                _value_expenditureType = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmSegmentInputInfo.IsExpenditureTypeSet => _set_expenditureType;
        public global::System.String? Award
        {
            get => _value_award;
            set
            {
                _set_award = true;
                _value_award = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmSegmentInputInfo.IsAwardSet => _set_award;
        public global::System.String? FundingSource
        {
            get => _value_fundingSource;
            set
            {
                _set_fundingSource = true;
                _value_fundingSource = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IPpmSegmentInputInfo.IsFundingSourceSet => _set_fundingSource;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlideInputInputValueFormatter : global::StrawberryShake.Serialization.IInputObjectFormatter
    {
        private global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _floatFormatter = default !;
        private global::StrawberryShake.Serialization.IInputValueFormatter _dateFormatter = default !;
        public global::System.String TypeName => "GlideInput";
        public void Initialize(global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
            _floatFormatter = serializerResolver.GetInputValueFormatter("Float");
            _dateFormatter = serializerResolver.GetInputValueFormatter("Date");
        }

        public global::System.Object? Format(global::System.Object? runtimeValue)
        {
            if (runtimeValue is null)
            {
                return null;
            }

            var input = runtimeValue as global::AggieEnterpriseApi.GlideInput;
            var inputInfo = runtimeValue as global::AggieEnterpriseApi.State.IGlideInputInfo;
            if (input is null || inputInfo is null)
            {
                throw new global::System.ArgumentException(nameof(runtimeValue));
            }

            var fields = new global::System.Collections.Generic.List<global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>>();
            if (inputInfo.IsLineDescriptionSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("lineDescription", FormatLineDescription(input.LineDescription)));
            }

            if (inputInfo.IsJournalLineNumberSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("journalLineNumber", FormatJournalLineNumber(input.JournalLineNumber)));
            }

            if (inputInfo.IsTransactionDateSet)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("transactionDate", FormatTransactionDate(input.TransactionDate)));
            }

            if (inputInfo.IsUdfNumeric1Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfNumeric1", FormatUdfNumeric1(input.UdfNumeric1)));
            }

            if (inputInfo.IsUdfNumeric2Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfNumeric2", FormatUdfNumeric2(input.UdfNumeric2)));
            }

            if (inputInfo.IsUdfNumeric3Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfNumeric3", FormatUdfNumeric3(input.UdfNumeric3)));
            }

            if (inputInfo.IsUdfDate1Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfDate1", FormatUdfDate1(input.UdfDate1)));
            }

            if (inputInfo.IsUdfDate2Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfDate2", FormatUdfDate2(input.UdfDate2)));
            }

            if (inputInfo.IsUdfString1Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfString1", FormatUdfString1(input.UdfString1)));
            }

            if (inputInfo.IsUdfString2Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfString2", FormatUdfString2(input.UdfString2)));
            }

            if (inputInfo.IsUdfString3Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfString3", FormatUdfString3(input.UdfString3)));
            }

            if (inputInfo.IsUdfString4Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfString4", FormatUdfString4(input.UdfString4)));
            }

            if (inputInfo.IsUdfString5Set)
            {
                fields.Add(new global::System.Collections.Generic.KeyValuePair<global::System.String, global::System.Object?>("udfString5", FormatUdfString5(input.UdfString5)));
            }

            return fields;
        }

        private global::System.Object? FormatLineDescription(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatJournalLineNumber(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatTransactionDate(global::System.DateTime? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfNumeric1(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfNumeric2(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfNumeric3(global::System.Double? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _floatFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfDate1(global::System.DateTime? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfDate2(global::System.DateTime? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _dateFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfString1(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfString2(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfString3(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfString4(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }

        private global::System.Object? FormatUdfString5(global::System.String? input)
        {
            if (input is null)
            {
                return input;
            }
            else
            {
                return _stringFormatter.Format(input);
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlideInput : global::AggieEnterpriseApi.State.IGlideInputInfo, global::System.IEquatable<GlideInput>
    {
        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GlideInput)obj);
        }

        public virtual global::System.Boolean Equals(GlideInput? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((LineDescription is null && other.LineDescription is null) || LineDescription != null && LineDescription.Equals(other.LineDescription))) && JournalLineNumber == other.JournalLineNumber && ((TransactionDate is null && other.TransactionDate is null) || TransactionDate != null && TransactionDate.Equals(other.TransactionDate)) && UdfNumeric1 == other.UdfNumeric1 && UdfNumeric2 == other.UdfNumeric2 && UdfNumeric3 == other.UdfNumeric3 && ((UdfDate1 is null && other.UdfDate1 is null) || UdfDate1 != null && UdfDate1.Equals(other.UdfDate1)) && ((UdfDate2 is null && other.UdfDate2 is null) || UdfDate2 != null && UdfDate2.Equals(other.UdfDate2)) && ((UdfString1 is null && other.UdfString1 is null) || UdfString1 != null && UdfString1.Equals(other.UdfString1)) && ((UdfString2 is null && other.UdfString2 is null) || UdfString2 != null && UdfString2.Equals(other.UdfString2)) && ((UdfString3 is null && other.UdfString3 is null) || UdfString3 != null && UdfString3.Equals(other.UdfString3)) && ((UdfString4 is null && other.UdfString4 is null) || UdfString4 != null && UdfString4.Equals(other.UdfString4)) && ((UdfString5 is null && other.UdfString5 is null) || UdfString5 != null && UdfString5.Equals(other.UdfString5));
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (LineDescription != null)
                {
                    hash ^= 397 * LineDescription.GetHashCode();
                }

                if (JournalLineNumber != null)
                {
                    hash ^= 397 * JournalLineNumber.GetHashCode();
                }

                if (TransactionDate != null)
                {
                    hash ^= 397 * TransactionDate.GetHashCode();
                }

                if (UdfNumeric1 != null)
                {
                    hash ^= 397 * UdfNumeric1.GetHashCode();
                }

                if (UdfNumeric2 != null)
                {
                    hash ^= 397 * UdfNumeric2.GetHashCode();
                }

                if (UdfNumeric3 != null)
                {
                    hash ^= 397 * UdfNumeric3.GetHashCode();
                }

                if (UdfDate1 != null)
                {
                    hash ^= 397 * UdfDate1.GetHashCode();
                }

                if (UdfDate2 != null)
                {
                    hash ^= 397 * UdfDate2.GetHashCode();
                }

                if (UdfString1 != null)
                {
                    hash ^= 397 * UdfString1.GetHashCode();
                }

                if (UdfString2 != null)
                {
                    hash ^= 397 * UdfString2.GetHashCode();
                }

                if (UdfString3 != null)
                {
                    hash ^= 397 * UdfString3.GetHashCode();
                }

                if (UdfString4 != null)
                {
                    hash ^= 397 * UdfString4.GetHashCode();
                }

                if (UdfString5 != null)
                {
                    hash ^= 397 * UdfString5.GetHashCode();
                }

                return hash;
            }
        }

        private global::System.String? _value_lineDescription;
        private global::System.Boolean _set_lineDescription;
        private global::System.Double? _value_journalLineNumber;
        private global::System.Boolean _set_journalLineNumber;
        private global::System.DateTime? _value_transactionDate;
        private global::System.Boolean _set_transactionDate;
        private global::System.Double? _value_udfNumeric1;
        private global::System.Boolean _set_udfNumeric1;
        private global::System.Double? _value_udfNumeric2;
        private global::System.Boolean _set_udfNumeric2;
        private global::System.Double? _value_udfNumeric3;
        private global::System.Boolean _set_udfNumeric3;
        private global::System.DateTime? _value_udfDate1;
        private global::System.Boolean _set_udfDate1;
        private global::System.DateTime? _value_udfDate2;
        private global::System.Boolean _set_udfDate2;
        private global::System.String? _value_udfString1;
        private global::System.Boolean _set_udfString1;
        private global::System.String? _value_udfString2;
        private global::System.Boolean _set_udfString2;
        private global::System.String? _value_udfString3;
        private global::System.Boolean _set_udfString3;
        private global::System.String? _value_udfString4;
        private global::System.Boolean _set_udfString4;
        private global::System.String? _value_udfString5;
        private global::System.Boolean _set_udfString5;
        public global::System.String? LineDescription
        {
            get => _value_lineDescription;
            set
            {
                _set_lineDescription = true;
                _value_lineDescription = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsLineDescriptionSet => _set_lineDescription;
        public global::System.Double? JournalLineNumber
        {
            get => _value_journalLineNumber;
            set
            {
                _set_journalLineNumber = true;
                _value_journalLineNumber = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsJournalLineNumberSet => _set_journalLineNumber;
        public global::System.DateTime? TransactionDate
        {
            get => _value_transactionDate;
            set
            {
                _set_transactionDate = true;
                _value_transactionDate = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsTransactionDateSet => _set_transactionDate;
        public global::System.Double? UdfNumeric1
        {
            get => _value_udfNumeric1;
            set
            {
                _set_udfNumeric1 = true;
                _value_udfNumeric1 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfNumeric1Set => _set_udfNumeric1;
        public global::System.Double? UdfNumeric2
        {
            get => _value_udfNumeric2;
            set
            {
                _set_udfNumeric2 = true;
                _value_udfNumeric2 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfNumeric2Set => _set_udfNumeric2;
        public global::System.Double? UdfNumeric3
        {
            get => _value_udfNumeric3;
            set
            {
                _set_udfNumeric3 = true;
                _value_udfNumeric3 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfNumeric3Set => _set_udfNumeric3;
        public global::System.DateTime? UdfDate1
        {
            get => _value_udfDate1;
            set
            {
                _set_udfDate1 = true;
                _value_udfDate1 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfDate1Set => _set_udfDate1;
        public global::System.DateTime? UdfDate2
        {
            get => _value_udfDate2;
            set
            {
                _set_udfDate2 = true;
                _value_udfDate2 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfDate2Set => _set_udfDate2;
        public global::System.String? UdfString1
        {
            get => _value_udfString1;
            set
            {
                _set_udfString1 = true;
                _value_udfString1 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfString1Set => _set_udfString1;
        public global::System.String? UdfString2
        {
            get => _value_udfString2;
            set
            {
                _set_udfString2 = true;
                _value_udfString2 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfString2Set => _set_udfString2;
        public global::System.String? UdfString3
        {
            get => _value_udfString3;
            set
            {
                _set_udfString3 = true;
                _value_udfString3 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfString3Set => _set_udfString3;
        public global::System.String? UdfString4
        {
            get => _value_udfString4;
            set
            {
                _set_udfString4 = true;
                _value_udfString4 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfString4Set => _set_udfString4;
        public global::System.String? UdfString5
        {
            get => _value_udfString5;
            set
            {
                _set_udfString5 = true;
                _value_udfString5 = value;
            }
        }

        global::System.Boolean global::AggieEnterpriseApi.State.IGlideInputInfo.IsUdfString5Set => _set_udfString5;
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public enum RequestStatus
    {
        Pending,
        Inprocess,
        Error,
        Processed,
        Complete,
        Stale,
        Rejected
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class RequestStatusSerializer : global::StrawberryShake.Serialization.IInputValueFormatter, global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, RequestStatus>
    {
        public global::System.String TypeName => "RequestStatus";
        public RequestStatus Parse(global::System.String serializedValue)
        {
            return serializedValue switch
            {
                "PENDING" => RequestStatus.Pending,
                "INPROCESS" => RequestStatus.Inprocess,
                "ERROR" => RequestStatus.Error,
                "PROCESSED" => RequestStatus.Processed,
                "COMPLETE" => RequestStatus.Complete,
                "STALE" => RequestStatus.Stale,
                "REJECTED" => RequestStatus.Rejected,
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }

        public global::System.Object Format(global::System.Object? runtimeValue)
        {
            return runtimeValue switch
            {
                RequestStatus.Pending => "PENDING",
                RequestStatus.Inprocess => "INPROCESS",
                RequestStatus.Error => "ERROR",
                RequestStatus.Processed => "PROCESSED",
                RequestStatus.Complete => "COMPLETE",
                RequestStatus.Stale => "STALE",
                RequestStatus.Rejected => "REJECTED",
                _ => throw new global::StrawberryShake.GraphQLClientException()};
        }
    }

    /// <summary>
    /// Represents the operation service of the DeptParents GraphQL operation
    /// <code>
    /// query DeptParents($code: String!) {
    ///   erpFinancialDepartment(code: $code) {
    ///     __typename
    ///     code
    ///     name
    ///     enabled
    ///     parent {
    ///       __typename
    ///       code
    ///       name
    ///       parent {
    ///         __typename
    ///         code
    ///         name
    ///         parent {
    ///           __typename
    ///           code
    ///           name
    ///           parent {
    ///             __typename
    ///             code
    ///             name
    ///             parent {
    ///               __typename
    ///               code
    ///               name
    ///               parent {
    ///                 __typename
    ///                 code
    ///                 name
    ///                 parent {
    ///                   __typename
    ///                   code
    ///                   name
    ///                   ... on ErpFinancialDepartment {
    ///                     id
    ///                   }
    ///                 }
    ///                 ... on ErpFinancialDepartment {
    ///                   id
    ///                 }
    ///               }
    ///               ... on ErpFinancialDepartment {
    ///                 id
    ///               }
    ///             }
    ///             ... on ErpFinancialDepartment {
    ///               id
    ///             }
    ///           }
    ///           ... on ErpFinancialDepartment {
    ///             id
    ///           }
    ///         }
    ///         ... on ErpFinancialDepartment {
    ///           id
    ///         }
    ///       }
    ///       ... on ErpFinancialDepartment {
    ///         id
    ///       }
    ///     }
    ///     ... on ErpFinancialDepartment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParentsQueryDocument : global::StrawberryShake.IDocument
    {
        private DeptParentsQueryDocument()
        {
        }

        public static DeptParentsQueryDocument Instance { get; } = new DeptParentsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x44, 0x65, 0x70, 0x74, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "4229b7d040fbb92b69f4f29e451bca68");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the DeptParents GraphQL operation
    /// <code>
    /// query DeptParents($code: String!) {
    ///   erpFinancialDepartment(code: $code) {
    ///     __typename
    ///     code
    ///     name
    ///     enabled
    ///     parent {
    ///       __typename
    ///       code
    ///       name
    ///       parent {
    ///         __typename
    ///         code
    ///         name
    ///         parent {
    ///           __typename
    ///           code
    ///           name
    ///           parent {
    ///             __typename
    ///             code
    ///             name
    ///             parent {
    ///               __typename
    ///               code
    ///               name
    ///               parent {
    ///                 __typename
    ///                 code
    ///                 name
    ///                 parent {
    ///                   __typename
    ///                   code
    ///                   name
    ///                   ... on ErpFinancialDepartment {
    ///                     id
    ///                   }
    ///                 }
    ///                 ... on ErpFinancialDepartment {
    ///                   id
    ///                 }
    ///               }
    ///               ... on ErpFinancialDepartment {
    ///                 id
    ///               }
    ///             }
    ///             ... on ErpFinancialDepartment {
    ///               id
    ///             }
    ///           }
    ///           ... on ErpFinancialDepartment {
    ///             id
    ///           }
    ///         }
    ///         ... on ErpFinancialDepartment {
    ///           id
    ///         }
    ///       }
    ///       ... on ErpFinancialDepartment {
    ///         id
    ///       }
    ///     }
    ///     ... on ErpFinancialDepartment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParentsQuery : global::AggieEnterpriseApi.IDeptParentsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IDeptParentsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public DeptParentsQuery(global::StrawberryShake.IOperationExecutor<IDeptParentsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IDeptParentsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeptParentsResult>> ExecuteAsync(global::System.String code, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(code);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IDeptParentsResult>> Watch(global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(code);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String code)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("code", FormatCode(code));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: DeptParentsQueryDocument.Instance.Hash.Value, name: "DeptParents", document: DeptParentsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCode(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the DeptParents GraphQL operation
    /// <code>
    /// query DeptParents($code: String!) {
    ///   erpFinancialDepartment(code: $code) {
    ///     __typename
    ///     code
    ///     name
    ///     enabled
    ///     parent {
    ///       __typename
    ///       code
    ///       name
    ///       parent {
    ///         __typename
    ///         code
    ///         name
    ///         parent {
    ///           __typename
    ///           code
    ///           name
    ///           parent {
    ///             __typename
    ///             code
    ///             name
    ///             parent {
    ///               __typename
    ///               code
    ///               name
    ///               parent {
    ///                 __typename
    ///                 code
    ///                 name
    ///                 parent {
    ///                   __typename
    ///                   code
    ///                   name
    ///                   ... on ErpFinancialDepartment {
    ///                     id
    ///                   }
    ///                 }
    ///                 ... on ErpFinancialDepartment {
    ///                   id
    ///                 }
    ///               }
    ///               ... on ErpFinancialDepartment {
    ///                 id
    ///               }
    ///             }
    ///             ... on ErpFinancialDepartment {
    ///               id
    ///             }
    ///           }
    ///           ... on ErpFinancialDepartment {
    ///             id
    ///           }
    ///         }
    ///         ... on ErpFinancialDepartment {
    ///           id
    ///         }
    ///       }
    ///       ... on ErpFinancialDepartment {
    ///         id
    ///       }
    ///     }
    ///     ... on ErpFinancialDepartment {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IDeptParentsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IDeptParentsResult>> ExecuteAsync(global::System.String code, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IDeptParentsResult>> Watch(global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the FundParents GraphQL operation
    /// <code>
    /// query FundParents($code: String!) {
    ///   erpFund(code: $code) {
    ///     __typename
    ///     code
    ///     name
    ///     budgeted
    ///     eligibleForUse
    ///     enabled
    ///     endDate
    ///     id
    ///     startDate
    ///     hierarchyDepth
    ///     parent {
    ///       __typename
    ///       code
    ///       name
    ///       hierarchyDepth
    ///       parent {
    ///         __typename
    ///         code
    ///         name
    ///         hierarchyDepth
    ///         parent {
    ///           __typename
    ///           code
    ///           name
    ///           hierarchyDepth
    ///           parent {
    ///             __typename
    ///             code
    ///             name
    ///             hierarchyDepth
    ///             parent {
    ///               __typename
    ///               code
    ///               name
    ///               hierarchyDepth
    ///               parent {
    ///                 __typename
    ///                 code
    ///                 name
    ///                 hierarchyDepth
    ///                 parent {
    ///                   __typename
    ///                   code
    ///                   name
    ///                   hierarchyDepth
    ///                   ... on ErpFund {
    ///                     id
    ///                   }
    ///                 }
    ///                 ... on ErpFund {
    ///                   id
    ///                 }
    ///               }
    ///               ... on ErpFund {
    ///                 id
    ///               }
    ///             }
    ///             ... on ErpFund {
    ///               id
    ///             }
    ///           }
    ///           ... on ErpFund {
    ///             id
    ///           }
    ///         }
    ///         ... on ErpFund {
    ///           id
    ///         }
    ///       }
    ///       ... on ErpFund {
    ///         id
    ///       }
    ///     }
    ///     ... on ErpFund {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParentsQueryDocument : global::StrawberryShake.IDocument
    {
        private FundParentsQueryDocument()
        {
        }

        public static FundParentsQueryDocument Instance { get; } = new FundParentsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x46, 0x75, 0x6e, 0x64, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x63, 0x6f, 0x64, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x62, 0x75, 0x64, 0x67, 0x65, 0x74, 0x65, 0x64, 0x20, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x20, 0x69, 0x64, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x68, 0x69, 0x65, 0x72, 0x61, 0x72, 0x63, 0x68, 0x79, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "31dec67c3b41b2d5e93f100ea6984e2d");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the FundParents GraphQL operation
    /// <code>
    /// query FundParents($code: String!) {
    ///   erpFund(code: $code) {
    ///     __typename
    ///     code
    ///     name
    ///     budgeted
    ///     eligibleForUse
    ///     enabled
    ///     endDate
    ///     id
    ///     startDate
    ///     hierarchyDepth
    ///     parent {
    ///       __typename
    ///       code
    ///       name
    ///       hierarchyDepth
    ///       parent {
    ///         __typename
    ///         code
    ///         name
    ///         hierarchyDepth
    ///         parent {
    ///           __typename
    ///           code
    ///           name
    ///           hierarchyDepth
    ///           parent {
    ///             __typename
    ///             code
    ///             name
    ///             hierarchyDepth
    ///             parent {
    ///               __typename
    ///               code
    ///               name
    ///               hierarchyDepth
    ///               parent {
    ///                 __typename
    ///                 code
    ///                 name
    ///                 hierarchyDepth
    ///                 parent {
    ///                   __typename
    ///                   code
    ///                   name
    ///                   hierarchyDepth
    ///                   ... on ErpFund {
    ///                     id
    ///                   }
    ///                 }
    ///                 ... on ErpFund {
    ///                   id
    ///                 }
    ///               }
    ///               ... on ErpFund {
    ///                 id
    ///               }
    ///             }
    ///             ... on ErpFund {
    ///               id
    ///             }
    ///           }
    ///           ... on ErpFund {
    ///             id
    ///           }
    ///         }
    ///         ... on ErpFund {
    ///           id
    ///         }
    ///       }
    ///       ... on ErpFund {
    ///         id
    ///       }
    ///     }
    ///     ... on ErpFund {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParentsQuery : global::AggieEnterpriseApi.IFundParentsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IFundParentsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public FundParentsQuery(global::StrawberryShake.IOperationExecutor<IFundParentsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IFundParentsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFundParentsResult>> ExecuteAsync(global::System.String code, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(code);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IFundParentsResult>> Watch(global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(code);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String code)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("code", FormatCode(code));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: FundParentsQueryDocument.Instance.Hash.Value, name: "FundParents", document: FundParentsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatCode(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the FundParents GraphQL operation
    /// <code>
    /// query FundParents($code: String!) {
    ///   erpFund(code: $code) {
    ///     __typename
    ///     code
    ///     name
    ///     budgeted
    ///     eligibleForUse
    ///     enabled
    ///     endDate
    ///     id
    ///     startDate
    ///     hierarchyDepth
    ///     parent {
    ///       __typename
    ///       code
    ///       name
    ///       hierarchyDepth
    ///       parent {
    ///         __typename
    ///         code
    ///         name
    ///         hierarchyDepth
    ///         parent {
    ///           __typename
    ///           code
    ///           name
    ///           hierarchyDepth
    ///           parent {
    ///             __typename
    ///             code
    ///             name
    ///             hierarchyDepth
    ///             parent {
    ///               __typename
    ///               code
    ///               name
    ///               hierarchyDepth
    ///               parent {
    ///                 __typename
    ///                 code
    ///                 name
    ///                 hierarchyDepth
    ///                 parent {
    ///                   __typename
    ///                   code
    ///                   name
    ///                   hierarchyDepth
    ///                   ... on ErpFund {
    ///                     id
    ///                   }
    ///                 }
    ///                 ... on ErpFund {
    ///                   id
    ///                 }
    ///               }
    ///               ... on ErpFund {
    ///                 id
    ///               }
    ///             }
    ///             ... on ErpFund {
    ///               id
    ///             }
    ///           }
    ///           ... on ErpFund {
    ///             id
    ///           }
    ///         }
    ///         ... on ErpFund {
    ///           id
    ///         }
    ///       }
    ///       ... on ErpFund {
    ///         id
    ///       }
    ///     }
    ///     ... on ErpFund {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IFundParentsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IFundParentsResult>> ExecuteAsync(global::System.String code, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IFundParentsResult>> Watch(global::System.String code, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GlJournalRequest GraphQL operation
    /// <code>
    /// mutation GlJournalRequest($data: GlJournalRequestInput!) {
    ///   glJournalRequest(data: $data) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       requestId
    ///       consumerId
    ///       requestDateTime
    ///       requestStatus
    ///       operationName
    ///     }
    ///     validationResults {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestMutationDocument : global::StrawberryShake.IDocument
    {
        private GlJournalRequestMutationDocument()
        {
        }

        public static GlJournalRequestMutationDocument Instance { get; } = new GlJournalRequestMutationDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Mutation;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x6c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x28, 0x24, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x47, 0x6c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x6c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x28, 0x64, 0x61, 0x74, 0x61, 0x3a, 0x20, 0x24, 0x64, 0x61, 0x74, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "da96ac9c70d3e53b31bae883ff24eafb");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GlJournalRequest GraphQL operation
    /// <code>
    /// mutation GlJournalRequest($data: GlJournalRequestInput!) {
    ///   glJournalRequest(data: $data) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       requestId
    ///       consumerId
    ///       requestDateTime
    ///       requestStatus
    ///       operationName
    ///     }
    ///     validationResults {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestMutation : global::AggieEnterpriseApi.IGlJournalRequestMutation
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGlJournalRequestResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _glJournalRequestInputFormatter;
        public GlJournalRequestMutation(global::StrawberryShake.IOperationExecutor<IGlJournalRequestResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _glJournalRequestInputFormatter = serializerResolver.GetInputValueFormatter("GlJournalRequestInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGlJournalRequestResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlJournalRequestResult>> ExecuteAsync(global::AggieEnterpriseApi.GlJournalRequestInput data, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(data);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGlJournalRequestResult>> Watch(global::AggieEnterpriseApi.GlJournalRequestInput data, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(data);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.GlJournalRequestInput data)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("data", FormatData(data));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GlJournalRequestMutationDocument.Instance.Hash.Value, name: "GlJournalRequest", document: GlJournalRequestMutationDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatData(global::AggieEnterpriseApi.GlJournalRequestInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _glJournalRequestInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GlJournalRequest GraphQL operation
    /// <code>
    /// mutation GlJournalRequest($data: GlJournalRequestInput!) {
    ///   glJournalRequest(data: $data) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       requestId
    ///       consumerId
    ///       requestDateTime
    ///       requestStatus
    ///       operationName
    ///     }
    ///     validationResults {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestMutation : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlJournalRequestResult>> ExecuteAsync(global::AggieEnterpriseApi.GlJournalRequestInput data, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGlJournalRequestResult>> Watch(global::AggieEnterpriseApi.GlJournalRequestInput data, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GlJournalRequestStatus GraphQL operation
    /// <code>
    /// query GlJournalRequestStatus($requestId: String!) {
    ///   glJournalRequestStatus(requestId: $requestId) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       statusRequestPayload
    ///       operationName
    ///       requestStatus
    ///       requestDateTime
    ///       lastStatusDateTime
    ///       errorMessages
    ///       processedDateTime
    ///       boundaryApplicationName
    ///       consumerId
    ///       consumerNotes
    ///       consumerReferenceId
    ///     }
    ///     processingResult {
    ///       __typename
    ///       status
    ///       processedDateTime
    ///     }
    ///     validationResults {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusQueryDocument : global::StrawberryShake.IDocument
    {
        private GlJournalRequestStatusQueryDocument()
        {
        }

        public static GlJournalRequestStatusQueryDocument Instance { get; } = new GlJournalRequestStatusQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x6c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x24, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x6c, 0x4a, 0x6f, 0x75, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x28, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x3a, 0x20, 0x24, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x49, 0x64, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x20, 0x7d, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x20, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "73bdb48f69fb0e8238bcb26a5d7a47ac");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GlJournalRequestStatus GraphQL operation
    /// <code>
    /// query GlJournalRequestStatus($requestId: String!) {
    ///   glJournalRequestStatus(requestId: $requestId) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       statusRequestPayload
    ///       operationName
    ///       requestStatus
    ///       requestDateTime
    ///       lastStatusDateTime
    ///       errorMessages
    ///       processedDateTime
    ///       boundaryApplicationName
    ///       consumerId
    ///       consumerNotes
    ///       consumerReferenceId
    ///     }
    ///     processingResult {
    ///       __typename
    ///       status
    ///       processedDateTime
    ///     }
    ///     validationResults {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusQuery : global::AggieEnterpriseApi.IGlJournalRequestStatusQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGlJournalRequestStatusResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GlJournalRequestStatusQuery(global::StrawberryShake.IOperationExecutor<IGlJournalRequestStatusResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGlJournalRequestStatusResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlJournalRequestStatusResult>> ExecuteAsync(global::System.String requestId, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(requestId);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGlJournalRequestStatusResult>> Watch(global::System.String requestId, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(requestId);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String requestId)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("requestId", FormatRequestId(requestId));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GlJournalRequestStatusQueryDocument.Instance.Hash.Value, name: "GlJournalRequestStatus", document: GlJournalRequestStatusQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatRequestId(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GlJournalRequestStatus GraphQL operation
    /// <code>
    /// query GlJournalRequestStatus($requestId: String!) {
    ///   glJournalRequestStatus(requestId: $requestId) {
    ///     __typename
    ///     requestStatus {
    ///       __typename
    ///       statusRequestPayload
    ///       operationName
    ///       requestStatus
    ///       requestDateTime
    ///       lastStatusDateTime
    ///       errorMessages
    ///       processedDateTime
    ///       boundaryApplicationName
    ///       consumerId
    ///       consumerNotes
    ///       consumerReferenceId
    ///     }
    ///     processingResult {
    ///       __typename
    ///       status
    ///       processedDateTime
    ///     }
    ///     validationResults {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlJournalRequestStatusQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlJournalRequestStatusResult>> ExecuteAsync(global::System.String requestId, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGlJournalRequestStatusResult>> Watch(global::System.String requestId, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the CoaDetails GraphQL operation
    /// <code>
    /// query CoaDetails($entity: String!, $fund: String!, $dept: String!, $account: String!, $purpose: String!) {
    ///   erpEntity(code: $entity) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpEntity {
    ///       id
    ///     }
    ///   }
    ///   erpFund(code: $fund) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpFund {
    ///       id
    ///     }
    ///   }
    ///   erpFinancialDepartment(code: $dept) {
    ///     __typename
    ///     code
    ///     name
    ///     fiscalOfficerName
    ///     eligibleForUse
    ///     ... on ErpFinancialDepartment {
    ///       id
    ///     }
    ///   }
    ///   erpAccount(code: $account) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpAccount {
    ///       id
    ///     }
    ///   }
    ///   erpPurpose(code: $purpose) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpPurpose {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetailsQueryDocument : global::StrawberryShake.IDocument
    {
        private CoaDetailsQueryDocument()
        {
        }

        public static CoaDetailsQueryDocument Instance { get; } = new CoaDetailsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x43, 0x6f, 0x61, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x28, 0x24, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x66, 0x75, 0x6e, 0x64, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x64, 0x65, 0x70, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x65, 0x72, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x65, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x66, 0x75, 0x6e, 0x64, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x75, 0x6e, 0x64, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x65, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x64, 0x65, 0x70, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x73, 0x63, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6c, 0x69, 0x67, 0x69, 0x62, 0x6c, 0x65, 0x46, 0x6f, 0x72, 0x55, 0x73, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x46, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x69, 0x61, 0x6c, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x65, 0x72, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x65, 0x72, 0x70, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x24, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x45, 0x72, 0x70, 0x50, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "52e1db2ee41cb011d8d9cfe82128f1d5");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the CoaDetails GraphQL operation
    /// <code>
    /// query CoaDetails($entity: String!, $fund: String!, $dept: String!, $account: String!, $purpose: String!) {
    ///   erpEntity(code: $entity) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpEntity {
    ///       id
    ///     }
    ///   }
    ///   erpFund(code: $fund) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpFund {
    ///       id
    ///     }
    ///   }
    ///   erpFinancialDepartment(code: $dept) {
    ///     __typename
    ///     code
    ///     name
    ///     fiscalOfficerName
    ///     eligibleForUse
    ///     ... on ErpFinancialDepartment {
    ///       id
    ///     }
    ///   }
    ///   erpAccount(code: $account) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpAccount {
    ///       id
    ///     }
    ///   }
    ///   erpPurpose(code: $purpose) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpPurpose {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetailsQuery : global::AggieEnterpriseApi.ICoaDetailsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<ICoaDetailsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public CoaDetailsQuery(global::StrawberryShake.IOperationExecutor<ICoaDetailsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(ICoaDetailsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICoaDetailsResult>> ExecuteAsync(global::System.String entity, global::System.String fund, global::System.String dept, global::System.String account, global::System.String purpose, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(entity, fund, dept, account, purpose);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<ICoaDetailsResult>> Watch(global::System.String entity, global::System.String fund, global::System.String dept, global::System.String account, global::System.String purpose, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(entity, fund, dept, account, purpose);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String entity, global::System.String fund, global::System.String dept, global::System.String account, global::System.String purpose)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("entity", FormatEntity(entity));
            variables.Add("fund", FormatFund(fund));
            variables.Add("dept", FormatDept(dept));
            variables.Add("account", FormatAccount(account));
            variables.Add("purpose", FormatPurpose(purpose));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: CoaDetailsQueryDocument.Instance.Hash.Value, name: "CoaDetails", document: CoaDetailsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatEntity(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatFund(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatDept(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatAccount(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatPurpose(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the CoaDetails GraphQL operation
    /// <code>
    /// query CoaDetails($entity: String!, $fund: String!, $dept: String!, $account: String!, $purpose: String!) {
    ///   erpEntity(code: $entity) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpEntity {
    ///       id
    ///     }
    ///   }
    ///   erpFund(code: $fund) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpFund {
    ///       id
    ///     }
    ///   }
    ///   erpFinancialDepartment(code: $dept) {
    ///     __typename
    ///     code
    ///     name
    ///     fiscalOfficerName
    ///     eligibleForUse
    ///     ... on ErpFinancialDepartment {
    ///       id
    ///     }
    ///   }
    ///   erpAccount(code: $account) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpAccount {
    ///       id
    ///     }
    ///   }
    ///   erpPurpose(code: $purpose) {
    ///     __typename
    ///     code
    ///     name
    ///     ... on ErpPurpose {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface ICoaDetailsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<ICoaDetailsResult>> ExecuteAsync(global::System.String entity, global::System.String fund, global::System.String dept, global::System.String account, global::System.String purpose, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<ICoaDetailsResult>> Watch(global::System.String entity, global::System.String fund, global::System.String dept, global::System.String account, global::System.String purpose, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PpmStringSegmentsValidate GraphQL operation
    /// <code>
    /// query PpmStringSegmentsValidate($segmentString: PpmSegmentString!) {
    ///   ppmStringSegmentsValidate(segmentString: $segmentString) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///     segmentString
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidateQueryDocument : global::StrawberryShake.IDocument
    {
        private PpmStringSegmentsValidateQueryDocument()
        {
        }

        public static PpmStringSegmentsValidateQueryDocument Instance { get; } = new PpmStringSegmentsValidateQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x70, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x28, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x50, 0x70, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x70, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x28, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x7d, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "3489db9235f7c8cb89eac3cac1eaf42f");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmStringSegmentsValidate GraphQL operation
    /// <code>
    /// query PpmStringSegmentsValidate($segmentString: PpmSegmentString!) {
    ///   ppmStringSegmentsValidate(segmentString: $segmentString) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///     segmentString
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidateQuery : global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPpmStringSegmentsValidateResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _ppmSegmentStringFormatter;
        public PpmStringSegmentsValidateQuery(global::StrawberryShake.IOperationExecutor<IPpmStringSegmentsValidateResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _ppmSegmentStringFormatter = serializerResolver.GetInputValueFormatter("PpmSegmentString");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPpmStringSegmentsValidateResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmStringSegmentsValidateResult>> ExecuteAsync(global::System.String segmentString, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(segmentString);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmStringSegmentsValidateResult>> Watch(global::System.String segmentString, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(segmentString);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String segmentString)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("segmentString", FormatSegmentString(segmentString));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PpmStringSegmentsValidateQueryDocument.Instance.Hash.Value, name: "PpmStringSegmentsValidate", document: PpmStringSegmentsValidateQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSegmentString(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _ppmSegmentStringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmStringSegmentsValidate GraphQL operation
    /// <code>
    /// query PpmStringSegmentsValidate($segmentString: PpmSegmentString!) {
    ///   ppmStringSegmentsValidate(segmentString: $segmentString) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       valid
    ///       errorMessages
    ///       messageProperties
    ///     }
    ///     segmentString
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmStringSegmentsValidateQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmStringSegmentsValidateResult>> ExecuteAsync(global::System.String segmentString, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmStringSegmentsValidateResult>> Watch(global::System.String segmentString, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the PpmSegmentsValidate GraphQL operation
    /// <code>
    /// query PpmSegmentsValidate($segments: PpmSegmentInput!) {
    ///   ppmSegmentsValidate(segments: $segments) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segmentString
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateQueryDocument : global::StrawberryShake.IDocument
    {
        private PpmSegmentsValidateQueryDocument()
        {
        }

        public static PpmSegmentsValidateQueryDocument Instance { get; } = new PpmSegmentsValidateQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x50, 0x70, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x28, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x50, 0x70, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x70, 0x70, 0x6d, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x28, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "fe9fe1ba86f6eaa1e5afdc79fb13ddd9");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmSegmentsValidate GraphQL operation
    /// <code>
    /// query PpmSegmentsValidate($segments: PpmSegmentInput!) {
    ///   ppmSegmentsValidate(segments: $segments) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segmentString
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateQuery : global::AggieEnterpriseApi.IPpmSegmentsValidateQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IPpmSegmentsValidateResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _ppmSegmentInputFormatter;
        public PpmSegmentsValidateQuery(global::StrawberryShake.IOperationExecutor<IPpmSegmentsValidateResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _ppmSegmentInputFormatter = serializerResolver.GetInputValueFormatter("PpmSegmentInput");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IPpmSegmentsValidateResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmSegmentsValidateResult>> ExecuteAsync(global::AggieEnterpriseApi.PpmSegmentInput segments, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(segments);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmSegmentsValidateResult>> Watch(global::AggieEnterpriseApi.PpmSegmentInput segments, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(segments);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.PpmSegmentInput segments)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("segments", FormatSegments(segments));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: PpmSegmentsValidateQueryDocument.Instance.Hash.Value, name: "PpmSegmentsValidate", document: PpmSegmentsValidateQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSegments(global::AggieEnterpriseApi.PpmSegmentInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _ppmSegmentInputFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the PpmSegmentsValidate GraphQL operation
    /// <code>
    /// query PpmSegmentsValidate($segments: PpmSegmentInput!) {
    ///   ppmSegmentsValidate(segments: $segments) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segmentString
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IPpmSegmentsValidateQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IPpmSegmentsValidateResult>> ExecuteAsync(global::AggieEnterpriseApi.PpmSegmentInput segments, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IPpmSegmentsValidateResult>> Watch(global::AggieEnterpriseApi.PpmSegmentInput segments, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GlValidateChartSegments GraphQL operation
    /// <code>
    /// query GlValidateChartSegments($segments: GlSegmentInput!, $validateCVRs: Boolean) {
    ///   glValidateChartSegments(segments: $segments, validateCVRs: $validateCVRs) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segments {
    ///       __typename
    ///       account
    ///       activity
    ///       department
    ///       entity
    ///       fund
    ///       program
    ///       project
    ///       purpose
    ///     }
    ///     completeChartstring
    ///     codeCombinationId
    ///     segmentNames {
    ///       __typename
    ///       entityName
    ///       fundName
    ///       departmentName
    ///       accountName
    ///       purposeName
    ///       projectName
    ///       programName
    ///       activityName
    ///     }
    ///     warnings {
    ///       __typename
    ///       segmentName
    ///       warning
    ///     }
    ///     endDates {
    ///       __typename
    ///       segmentName
    ///       endDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsQueryDocument : global::StrawberryShake.IDocument
    {
        private GlValidateChartSegmentsQueryDocument()
        {
        }

        public static GlValidateChartSegmentsQueryDocument Instance { get; } = new GlValidateChartSegmentsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x47, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x21, 0x2c, 0x20, 0x24, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x52, 0x73, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x28, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2c, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x52, 0x73, 0x3a, 0x20, 0x24, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x52, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x7d, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x7d, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "17b0185e2c4723166adee57c3b6f637a");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GlValidateChartSegments GraphQL operation
    /// <code>
    /// query GlValidateChartSegments($segments: GlSegmentInput!, $validateCVRs: Boolean) {
    ///   glValidateChartSegments(segments: $segments, validateCVRs: $validateCVRs) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segments {
    ///       __typename
    ///       account
    ///       activity
    ///       department
    ///       entity
    ///       fund
    ///       program
    ///       project
    ///       purpose
    ///     }
    ///     completeChartstring
    ///     codeCombinationId
    ///     segmentNames {
    ///       __typename
    ///       entityName
    ///       fundName
    ///       departmentName
    ///       accountName
    ///       purposeName
    ///       projectName
    ///       programName
    ///       activityName
    ///     }
    ///     warnings {
    ///       __typename
    ///       segmentName
    ///       warning
    ///     }
    ///     endDates {
    ///       __typename
    ///       segmentName
    ///       endDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsQuery : global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGlValidateChartSegmentsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _glSegmentInputFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        public GlValidateChartSegmentsQuery(global::StrawberryShake.IOperationExecutor<IGlValidateChartSegmentsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _glSegmentInputFormatter = serializerResolver.GetInputValueFormatter("GlSegmentInput");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGlValidateChartSegmentsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlValidateChartSegmentsResult>> ExecuteAsync(global::AggieEnterpriseApi.GlSegmentInput segments, global::System.Boolean? validateCVRs, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(segments, validateCVRs);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGlValidateChartSegmentsResult>> Watch(global::AggieEnterpriseApi.GlSegmentInput segments, global::System.Boolean? validateCVRs, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(segments, validateCVRs);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::AggieEnterpriseApi.GlSegmentInput segments, global::System.Boolean? validateCVRs)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("segments", FormatSegments(segments));
            variables.Add("validateCVRs", FormatValidateCVRs(validateCVRs));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GlValidateChartSegmentsQueryDocument.Instance.Hash.Value, name: "GlValidateChartSegments", document: GlValidateChartSegmentsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSegments(global::AggieEnterpriseApi.GlSegmentInput value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _glSegmentInputFormatter.Format(value);
        }

        private global::System.Object? FormatValidateCVRs(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GlValidateChartSegments GraphQL operation
    /// <code>
    /// query GlValidateChartSegments($segments: GlSegmentInput!, $validateCVRs: Boolean) {
    ///   glValidateChartSegments(segments: $segments, validateCVRs: $validateCVRs) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segments {
    ///       __typename
    ///       account
    ///       activity
    ///       department
    ///       entity
    ///       fund
    ///       program
    ///       project
    ///       purpose
    ///     }
    ///     completeChartstring
    ///     codeCombinationId
    ///     segmentNames {
    ///       __typename
    ///       entityName
    ///       fundName
    ///       departmentName
    ///       accountName
    ///       purposeName
    ///       projectName
    ///       programName
    ///       activityName
    ///     }
    ///     warnings {
    ///       __typename
    ///       segmentName
    ///       warning
    ///     }
    ///     endDates {
    ///       __typename
    ///       segmentName
    ///       endDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartSegmentsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlValidateChartSegmentsResult>> ExecuteAsync(global::AggieEnterpriseApi.GlSegmentInput segments, global::System.Boolean? validateCVRs, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGlValidateChartSegmentsResult>> Watch(global::AggieEnterpriseApi.GlSegmentInput segments, global::System.Boolean? validateCVRs, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GlValidateChartstring GraphQL operation
    /// <code>
    /// query GlValidateChartstring($segmentString: GlSegmentString!, $validateCVRs: Boolean) {
    ///   glValidateChartstring(segmentString: $segmentString, validateCVRs: $validateCVRs) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segments {
    ///       __typename
    ///       account
    ///       activity
    ///       department
    ///       entity
    ///       fund
    ///       program
    ///       project
    ///       purpose
    ///     }
    ///     completeChartstring
    ///     codeCombinationId
    ///     segmentNames {
    ///       __typename
    ///       entityName
    ///       fundName
    ///       departmentName
    ///       accountName
    ///       purposeName
    ///       projectName
    ///       programName
    ///       activityName
    ///     }
    ///     warnings {
    ///       __typename
    ///       segmentName
    ///       warning
    ///     }
    ///     endDates {
    ///       __typename
    ///       segmentName
    ///       endDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstringQueryDocument : global::StrawberryShake.IDocument
    {
        private GlValidateChartstringQueryDocument()
        {
        }

        public static GlValidateChartstringQueryDocument Instance { get; } = new GlValidateChartstringQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x47, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x52, 0x73, 0x3a, 0x20, 0x42, 0x6f, 0x6f, 0x6c, 0x65, 0x61, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x67, 0x6c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x28, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3a, 0x20, 0x24, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2c, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x52, 0x73, 0x3a, 0x20, 0x24, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x56, 0x52, 0x73, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x20, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x20, 0x7d, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x74, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6d, 0x62, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x75, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x75, 0x72, 0x70, 0x6f, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x20, 0x7d, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "42dbc0ccf2b93482ef425e94de8755b4");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GlValidateChartstring GraphQL operation
    /// <code>
    /// query GlValidateChartstring($segmentString: GlSegmentString!, $validateCVRs: Boolean) {
    ///   glValidateChartstring(segmentString: $segmentString, validateCVRs: $validateCVRs) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segments {
    ///       __typename
    ///       account
    ///       activity
    ///       department
    ///       entity
    ///       fund
    ///       program
    ///       project
    ///       purpose
    ///     }
    ///     completeChartstring
    ///     codeCombinationId
    ///     segmentNames {
    ///       __typename
    ///       entityName
    ///       fundName
    ///       departmentName
    ///       accountName
    ///       purposeName
    ///       projectName
    ///       programName
    ///       activityName
    ///     }
    ///     warnings {
    ///       __typename
    ///       segmentName
    ///       warning
    ///     }
    ///     endDates {
    ///       __typename
    ///       segmentName
    ///       endDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstringQuery : global::AggieEnterpriseApi.IGlValidateChartstringQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGlValidateChartstringResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _glSegmentStringFormatter;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _booleanFormatter;
        public GlValidateChartstringQuery(global::StrawberryShake.IOperationExecutor<IGlValidateChartstringResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _glSegmentStringFormatter = serializerResolver.GetInputValueFormatter("GlSegmentString");
            _booleanFormatter = serializerResolver.GetInputValueFormatter("Boolean");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGlValidateChartstringResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlValidateChartstringResult>> ExecuteAsync(global::System.String segmentString, global::System.Boolean? validateCVRs, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(segmentString, validateCVRs);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGlValidateChartstringResult>> Watch(global::System.String segmentString, global::System.Boolean? validateCVRs, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(segmentString, validateCVRs);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String segmentString, global::System.Boolean? validateCVRs)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("segmentString", FormatSegmentString(segmentString));
            variables.Add("validateCVRs", FormatValidateCVRs(validateCVRs));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GlValidateChartstringQueryDocument.Instance.Hash.Value, name: "GlValidateChartstring", document: GlValidateChartstringQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatSegmentString(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _glSegmentStringFormatter.Format(value);
        }

        private global::System.Object? FormatValidateCVRs(global::System.Boolean? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _booleanFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GlValidateChartstring GraphQL operation
    /// <code>
    /// query GlValidateChartstring($segmentString: GlSegmentString!, $validateCVRs: Boolean) {
    ///   glValidateChartstring(segmentString: $segmentString, validateCVRs: $validateCVRs) {
    ///     __typename
    ///     validationResponse {
    ///       __typename
    ///       errorMessages
    ///       messageProperties
    ///       valid
    ///     }
    ///     segments {
    ///       __typename
    ///       account
    ///       activity
    ///       department
    ///       entity
    ///       fund
    ///       program
    ///       project
    ///       purpose
    ///     }
    ///     completeChartstring
    ///     codeCombinationId
    ///     segmentNames {
    ///       __typename
    ///       entityName
    ///       fundName
    ///       departmentName
    ///       accountName
    ///       purposeName
    ///       projectName
    ///       programName
    ///       activityName
    ///     }
    ///     warnings {
    ///       __typename
    ///       segmentName
    ///       warning
    ///     }
    ///     endDates {
    ///       __typename
    ///       segmentName
    ///       endDate
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IGlValidateChartstringQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGlValidateChartstringResult>> ExecuteAsync(global::System.String segmentString, global::System.Boolean? validateCVRs, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGlValidateChartstringResult>> Watch(global::System.String segmentString, global::System.Boolean? validateCVRs, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the AggieEnterpriseClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class AggieEnterpriseClient : global::AggieEnterpriseApi.IAggieEnterpriseClient
    {
        private readonly global::AggieEnterpriseApi.IDeptParentsQuery _deptParents;
        private readonly global::AggieEnterpriseApi.IFundParentsQuery _fundParents;
        private readonly global::AggieEnterpriseApi.IGlJournalRequestMutation _glJournalRequest;
        private readonly global::AggieEnterpriseApi.IGlJournalRequestStatusQuery _glJournalRequestStatus;
        private readonly global::AggieEnterpriseApi.ICoaDetailsQuery _coaDetails;
        private readonly global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery _ppmStringSegmentsValidate;
        private readonly global::AggieEnterpriseApi.IPpmSegmentsValidateQuery _ppmSegmentsValidate;
        private readonly global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery _glValidateChartSegments;
        private readonly global::AggieEnterpriseApi.IGlValidateChartstringQuery _glValidateChartstring;
        public AggieEnterpriseClient(global::AggieEnterpriseApi.IDeptParentsQuery deptParents, global::AggieEnterpriseApi.IFundParentsQuery fundParents, global::AggieEnterpriseApi.IGlJournalRequestMutation glJournalRequest, global::AggieEnterpriseApi.IGlJournalRequestStatusQuery glJournalRequestStatus, global::AggieEnterpriseApi.ICoaDetailsQuery coaDetails, global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery ppmStringSegmentsValidate, global::AggieEnterpriseApi.IPpmSegmentsValidateQuery ppmSegmentsValidate, global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery glValidateChartSegments, global::AggieEnterpriseApi.IGlValidateChartstringQuery glValidateChartstring)
        {
            _deptParents = deptParents ?? throw new global::System.ArgumentNullException(nameof(deptParents));
            _fundParents = fundParents ?? throw new global::System.ArgumentNullException(nameof(fundParents));
            _glJournalRequest = glJournalRequest ?? throw new global::System.ArgumentNullException(nameof(glJournalRequest));
            _glJournalRequestStatus = glJournalRequestStatus ?? throw new global::System.ArgumentNullException(nameof(glJournalRequestStatus));
            _coaDetails = coaDetails ?? throw new global::System.ArgumentNullException(nameof(coaDetails));
            _ppmStringSegmentsValidate = ppmStringSegmentsValidate ?? throw new global::System.ArgumentNullException(nameof(ppmStringSegmentsValidate));
            _ppmSegmentsValidate = ppmSegmentsValidate ?? throw new global::System.ArgumentNullException(nameof(ppmSegmentsValidate));
            _glValidateChartSegments = glValidateChartSegments ?? throw new global::System.ArgumentNullException(nameof(glValidateChartSegments));
            _glValidateChartstring = glValidateChartstring ?? throw new global::System.ArgumentNullException(nameof(glValidateChartstring));
        }

        public static global::System.String ClientName => "AggieEnterpriseClient";
        public global::AggieEnterpriseApi.IDeptParentsQuery DeptParents => _deptParents;
        public global::AggieEnterpriseApi.IFundParentsQuery FundParents => _fundParents;
        public global::AggieEnterpriseApi.IGlJournalRequestMutation GlJournalRequest => _glJournalRequest;
        public global::AggieEnterpriseApi.IGlJournalRequestStatusQuery GlJournalRequestStatus => _glJournalRequestStatus;
        public global::AggieEnterpriseApi.ICoaDetailsQuery CoaDetails => _coaDetails;
        public global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery PpmStringSegmentsValidate => _ppmStringSegmentsValidate;
        public global::AggieEnterpriseApi.IPpmSegmentsValidateQuery PpmSegmentsValidate => _ppmSegmentsValidate;
        public global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery GlValidateChartSegments => _glValidateChartSegments;
        public global::AggieEnterpriseApi.IGlValidateChartstringQuery GlValidateChartstring => _glValidateChartstring;
    }

    /// <summary>
    /// Represents the AggieEnterpriseClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial interface IAggieEnterpriseClient
    {
        global::AggieEnterpriseApi.IDeptParentsQuery DeptParents { get; }

        global::AggieEnterpriseApi.IFundParentsQuery FundParents { get; }

        global::AggieEnterpriseApi.IGlJournalRequestMutation GlJournalRequest { get; }

        global::AggieEnterpriseApi.IGlJournalRequestStatusQuery GlJournalRequestStatus { get; }

        global::AggieEnterpriseApi.ICoaDetailsQuery CoaDetails { get; }

        global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery PpmStringSegmentsValidate { get; }

        global::AggieEnterpriseApi.IPpmSegmentsValidateQuery PpmSegmentsValidate { get; }

        global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery GlValidateChartSegments { get; }

        global::AggieEnterpriseApi.IGlValidateChartstringQuery GlValidateChartstring { get; }
    }
}

namespace AggieEnterpriseApi.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpFinancialDepartmentEntity
    {
        public ErpFinancialDepartmentEntity(global::System.String code = default !, global::System.String name = default !, global::System.Boolean enabled = default !, global::StrawberryShake.EntityId? parent = default !, global::System.String? fiscalOfficerName = default !, global::System.Boolean eligibleForUse = default !)
        {
            Code = code;
            Name = name;
            Enabled = enabled;
            Parent = parent;
            FiscalOfficerName = fiscalOfficerName;
            EligibleForUse = eligibleForUse;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Boolean Enabled { get; }

        public global::StrawberryShake.EntityId? Parent { get; }

        public global::System.String? FiscalOfficerName { get; }

        public global::System.Boolean EligibleForUse { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpFundEntity
    {
        public ErpFundEntity(global::System.String code = default !, global::System.String name = default !, global::System.Boolean? budgeted = default !, global::System.Boolean eligibleForUse = default !, global::System.Boolean enabled = default !, global::System.String? endDate = default !, global::System.Int64 id = default !, global::System.String? startDate = default !, global::System.Int32? hierarchyDepth = default !, global::StrawberryShake.EntityId? parent = default !)
        {
            Code = code;
            Name = name;
            Budgeted = budgeted;
            EligibleForUse = eligibleForUse;
            Enabled = enabled;
            EndDate = endDate;
            Id = id;
            StartDate = startDate;
            HierarchyDepth = hierarchyDepth;
            Parent = parent;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }

        public global::System.Boolean? Budgeted { get; }

        public global::System.Boolean EligibleForUse { get; }

        public global::System.Boolean Enabled { get; }

        public global::System.String? EndDate { get; }

        public global::System.Int64 Id { get; }

        public global::System.String? StartDate { get; }

        public global::System.Int32? HierarchyDepth { get; }

        public global::StrawberryShake.EntityId? Parent { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpEntityEntity
    {
        public ErpEntityEntity(global::System.String code = default !, global::System.String name = default !)
        {
            Code = code;
            Name = name;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpAccountEntity
    {
        public ErpAccountEntity(global::System.String code = default !, global::System.String name = default !)
        {
            Code = code;
            Name = name;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ErpPurposeEntity
    {
        public ErpPurposeEntity(global::System.String code = default !, global::System.String name = default !)
        {
            Code = code;
            Name = name;
        }

        public global::System.String Code { get; }

        public global::System.String Name { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParentsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.DeptParentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParentsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IDeptParentsResult);
        public DeptParentsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is DeptParentsResultInfo info)
            {
                return new DeptParentsResult(MapIDeptParents_ErpFinancialDepartment(info.ErpFinancialDepartment, snapshot));
            }

            throw new global::System.ArgumentException("DeptParentsResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment? MapIDeptParents_ErpFinancialDepartment(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParentsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public DeptParentsResultInfo(global::StrawberryShake.EntityId? erpFinancialDepartment, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ErpFinancialDepartment = erpFinancialDepartment;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? ErpFinancialDepartment { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new DeptParentsResultInfo(ErpFinancialDepartment, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_ErpFinancialDepartment(entity.Code, entity.Name, entity.Enabled, MapIDeptParents_ErpFinancialDepartment_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent? MapIDeptParents_ErpFinancialDepartment_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment(entity.Code, entity.Name, MapIDeptParents_ErpFinancialDepartment_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment(entity.Code, entity.Name, MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment(entity.Code, entity.Name, MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment(entity.Code, entity.Name, MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment(entity.Code, entity.Name, MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment> deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
        }

        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment(entity.Code, entity.Name, MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _deptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment(entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParentsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.FundParentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_ErpFund> _fundParents_ErpFund_ErpFundFromErpFundEntityMapper;
        public FundParentsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_ErpFund> fundParents_ErpFund_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_ErpFundFromErpFundEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IFundParentsResult);
        public FundParentsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is FundParentsResultInfo info)
            {
                return new FundParentsResult(MapIFundParents_ErpFund(info.ErpFund, snapshot));
            }

            throw new global::System.ArgumentException("FundParentsResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund? MapIFundParents_ErpFund(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParentsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public FundParentsResultInfo(global::StrawberryShake.EntityId? erpFund, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ErpFund = erpFund;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? ErpFund { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new FundParentsResultInfo(ErpFund, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_ErpFund> _fundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_ErpFund> fundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_ErpFund(entity.Code, entity.Name, entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent? MapIFundParents_ErpFund_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_Parent_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_Parent_Parent_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_Parent_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper;
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund> fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper = fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper));
        }

        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth, MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(entity.Parent, snapshot));
        }

        private global::AggieEnterpriseApi.IFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent? MapIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _fundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund(entity.Code, entity.Name, entity.HierarchyDepth);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.GlJournalRequestResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GlJournalRequestResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IGlJournalRequestResult);
        public GlJournalRequestResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GlJournalRequestResultInfo info)
            {
                return new GlJournalRequestResult(MapNonNullableIGlJournalRequest_GlJournalRequest(info.GlJournalRequest, snapshot));
            }

            throw new global::System.ArgumentException("GlJournalRequestResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest MapNonNullableIGlJournalRequest_GlJournalRequest(global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlJournalRequest_GlJournalRequest returnValue = default !;
            if (data.__typename.Equals("GlJournalRequestStatusOutput", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlJournalRequest_GlJournalRequest_GlJournalRequestStatusOutput(MapNonNullableIGlJournalRequest_GlJournalRequest_RequestStatus(data.RequestStatus ?? throw new global::System.ArgumentNullException(), snapshot), MapIGlJournalRequest_GlJournalRequest_ValidationResults(data.ValidationResults, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_RequestStatus MapNonNullableIGlJournalRequest_GlJournalRequest_RequestStatus(global::AggieEnterpriseApi.State.ActionRequestStatusData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlJournalRequest_GlJournalRequest_RequestStatus returnValue = default !;
            if (data.__typename.Equals("ActionRequestStatus", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlJournalRequest_GlJournalRequest_RequestStatus_ActionRequestStatus(data.RequestId, data.ConsumerId ?? throw new global::System.ArgumentNullException(), data.RequestDateTime ?? throw new global::System.ArgumentNullException(), data.RequestStatus ?? throw new global::System.ArgumentNullException(), data.OperationName ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlJournalRequest_GlJournalRequest_ValidationResults? MapIGlJournalRequest_GlJournalRequest_ValidationResults(global::AggieEnterpriseApi.State.ValidationResponseData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGlJournalRequest_GlJournalRequest_ValidationResults returnValue = default !;
            if (data?.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GlJournalRequest_GlJournalRequest_ValidationResults_ValidationResponse(data.ErrorMessages, data.MessageProperties);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GlJournalRequestResultInfo(global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData glJournalRequest, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GlJournalRequest = glJournalRequest;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData GlJournalRequest { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GlJournalRequestResultInfo(GlJournalRequest, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.GlJournalRequestStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GlJournalRequestStatusResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IGlJournalRequestStatusResult);
        public GlJournalRequestStatusResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GlJournalRequestStatusResultInfo info)
            {
                return new GlJournalRequestStatusResult(MapIGlJournalRequestStatus_GlJournalRequestStatus(info.GlJournalRequestStatus, snapshot));
            }

            throw new global::System.ArgumentException("GlJournalRequestStatusResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus? MapIGlJournalRequestStatus_GlJournalRequestStatus(global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGlJournalRequestStatus_GlJournalRequestStatus returnValue = default !;
            if (data?.__typename.Equals("GlJournalRequestStatusOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GlJournalRequestStatus_GlJournalRequestStatus_GlJournalRequestStatusOutput(MapNonNullableIGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus(data.RequestStatus ?? throw new global::System.ArgumentNullException(), snapshot), MapIGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult(data.ProcessingResult, snapshot), MapIGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults(data.ValidationResults, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus MapNonNullableIGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus(global::AggieEnterpriseApi.State.ActionRequestStatusData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus returnValue = default !;
            if (data.__typename.Equals("ActionRequestStatus", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlJournalRequestStatus_GlJournalRequestStatus_RequestStatus_ActionRequestStatus(data.StatusRequestPayload, data.OperationName ?? throw new global::System.ArgumentNullException(), data.RequestStatus ?? throw new global::System.ArgumentNullException(), data.RequestDateTime ?? throw new global::System.ArgumentNullException(), data.LastStatusDateTime ?? throw new global::System.ArgumentNullException(), data.ErrorMessages, data.ProcessedDateTime, data.BoundaryApplicationName ?? throw new global::System.ArgumentNullException(), data.ConsumerId ?? throw new global::System.ArgumentNullException(), data.ConsumerNotes, data.ConsumerReferenceId ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult? MapIGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult(global::AggieEnterpriseApi.State.ProcessingResultData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult returnValue = default !;
            if (data?.__typename.Equals("ProcessingResult", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult_ProcessingResult(data.Status ?? throw new global::System.ArgumentNullException(), data.ProcessedDateTime);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults? MapIGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults(global::AggieEnterpriseApi.State.ValidationResponseData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults returnValue = default !;
            if (data?.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GlJournalRequestStatus_GlJournalRequestStatus_ValidationResults_ValidationResponse(data.Valid ?? throw new global::System.ArgumentNullException(), data.ErrorMessages);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GlJournalRequestStatusResultInfo(global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData? glJournalRequestStatus, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GlJournalRequestStatus = glJournalRequestStatus;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData? GlJournalRequestStatus { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GlJournalRequestStatusResultInfo(GlJournalRequestStatus, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetailsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.CoaDetailsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpEntityEntity, CoaDetails_ErpEntity_ErpEntity> _coaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, CoaDetails_ErpFund_ErpFund> _coaDetails_ErpFund_ErpFundFromErpFundEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment> _coaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpAccountEntity, CoaDetails_ErpAccount_ErpAccount> _coaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpPurposeEntity, CoaDetails_ErpPurpose_ErpPurpose> _coaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper;
        public CoaDetailsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpEntityEntity, CoaDetails_ErpEntity_ErpEntity> coaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, CoaDetails_ErpFund_ErpFund> coaDetails_ErpFund_ErpFundFromErpFundEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment> coaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpAccountEntity, CoaDetails_ErpAccount_ErpAccount> coaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper, global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpPurposeEntity, CoaDetails_ErpPurpose_ErpPurpose> coaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _coaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper = coaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper ?? throw new global::System.ArgumentNullException(nameof(coaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper));
            _coaDetails_ErpFund_ErpFundFromErpFundEntityMapper = coaDetails_ErpFund_ErpFundFromErpFundEntityMapper ?? throw new global::System.ArgumentNullException(nameof(coaDetails_ErpFund_ErpFundFromErpFundEntityMapper));
            _coaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper = coaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(coaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper));
            _coaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper = coaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper ?? throw new global::System.ArgumentNullException(nameof(coaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper));
            _coaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper = coaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(coaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.ICoaDetailsResult);
        public CoaDetailsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is CoaDetailsResultInfo info)
            {
                return new CoaDetailsResult(MapICoaDetails_ErpEntity(info.ErpEntity, snapshot), MapICoaDetails_ErpFund(info.ErpFund, snapshot), MapICoaDetails_ErpFinancialDepartment(info.ErpFinancialDepartment, snapshot), MapICoaDetails_ErpAccount(info.ErpAccount, snapshot), MapICoaDetails_ErpPurpose(info.ErpPurpose, snapshot));
            }

            throw new global::System.ArgumentException("CoaDetailsResultInfo expected.");
        }

        private global::AggieEnterpriseApi.ICoaDetails_ErpEntity? MapICoaDetails_ErpEntity(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpEntity", global::System.StringComparison.Ordinal))
            {
                return _coaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpEntityEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.ICoaDetails_ErpFund? MapICoaDetails_ErpFund(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                return _coaDetails_ErpFund_ErpFundFromErpFundEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFundEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.ICoaDetails_ErpFinancialDepartment? MapICoaDetails_ErpFinancialDepartment(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                return _coaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.ICoaDetails_ErpAccount? MapICoaDetails_ErpAccount(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpAccount", global::System.StringComparison.Ordinal))
            {
                return _coaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpAccountEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.ICoaDetails_ErpPurpose? MapICoaDetails_ErpPurpose(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("ErpPurpose", global::System.StringComparison.Ordinal))
            {
                return _coaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper.Map(snapshot.GetEntity<global::AggieEnterpriseApi.State.ErpPurposeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetailsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public CoaDetailsResultInfo(global::StrawberryShake.EntityId? erpEntity, global::StrawberryShake.EntityId? erpFund, global::StrawberryShake.EntityId? erpFinancialDepartment, global::StrawberryShake.EntityId? erpAccount, global::StrawberryShake.EntityId? erpPurpose, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            ErpEntity = erpEntity;
            ErpFund = erpFund;
            ErpFinancialDepartment = erpFinancialDepartment;
            ErpAccount = erpAccount;
            ErpPurpose = erpPurpose;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId? ErpEntity { get; }

        public global::StrawberryShake.EntityId? ErpFund { get; }

        public global::StrawberryShake.EntityId? ErpFinancialDepartment { get; }

        public global::StrawberryShake.EntityId? ErpAccount { get; }

        public global::StrawberryShake.EntityId? ErpPurpose { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new CoaDetailsResultInfo(ErpEntity, ErpFund, ErpFinancialDepartment, ErpAccount, ErpPurpose, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpEntityEntity, CoaDetails_ErpEntity_ErpEntity>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CoaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CoaDetails_ErpEntity_ErpEntity Map(global::AggieEnterpriseApi.State.ErpEntityEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CoaDetails_ErpEntity_ErpEntity(entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpFund_ErpFundFromErpFundEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, CoaDetails_ErpFund_ErpFund>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CoaDetails_ErpFund_ErpFundFromErpFundEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CoaDetails_ErpFund_ErpFund Map(global::AggieEnterpriseApi.State.ErpFundEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CoaDetails_ErpFund_ErpFund(entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CoaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment Map(global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment(entity.Code, entity.Name, entity.FiscalOfficerName, entity.EligibleForUse);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpAccountEntity, CoaDetails_ErpAccount_ErpAccount>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CoaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CoaDetails_ErpAccount_ErpAccount Map(global::AggieEnterpriseApi.State.ErpAccountEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CoaDetails_ErpAccount_ErpAccount(entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper : global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpPurposeEntity, CoaDetails_ErpPurpose_ErpPurpose>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public CoaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public CoaDetails_ErpPurpose_ErpPurpose Map(global::AggieEnterpriseApi.State.ErpPurposeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new CoaDetails_ErpPurpose_ErpPurpose(entity.Code, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidateResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.PpmStringSegmentsValidateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PpmStringSegmentsValidateResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult);
        public PpmStringSegmentsValidateResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PpmStringSegmentsValidateResultInfo info)
            {
                return new PpmStringSegmentsValidateResult(MapNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate(info.PpmStringSegmentsValidate, snapshot));
            }

            throw new global::System.ArgumentException("PpmStringSegmentsValidateResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate MapNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate(global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPpmStringSegmentsValidate_PpmStringSegmentsValidate returnValue = default !;
            if (data.__typename.Equals("PpmSegmentsValidateOutput", global::System.StringComparison.Ordinal))
            {
                returnValue = new PpmStringSegmentsValidate_PpmStringSegmentsValidate_PpmSegmentsValidateOutput(MapNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse(data.ValidationResponse ?? throw new global::System.ArgumentNullException(), snapshot), data.SegmentString);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse MapNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse(global::AggieEnterpriseApi.State.ValidationResponseData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse returnValue = default !;
            if (data.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal))
            {
                returnValue = new PpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse_ValidationResponse(data.Valid ?? throw new global::System.ArgumentNullException(), data.ErrorMessages, data.MessageProperties);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidateResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PpmStringSegmentsValidateResultInfo(global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData ppmStringSegmentsValidate, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PpmStringSegmentsValidate = ppmStringSegmentsValidate;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData PpmStringSegmentsValidate { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PpmStringSegmentsValidateResultInfo(PpmStringSegmentsValidate, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.PpmSegmentsValidateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public PpmSegmentsValidateResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IPpmSegmentsValidateResult);
        public PpmSegmentsValidateResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is PpmSegmentsValidateResultInfo info)
            {
                return new PpmSegmentsValidateResult(MapNonNullableIPpmSegmentsValidate_PpmSegmentsValidate(info.PpmSegmentsValidate, snapshot));
            }

            throw new global::System.ArgumentException("PpmSegmentsValidateResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate MapNonNullableIPpmSegmentsValidate_PpmSegmentsValidate(global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPpmSegmentsValidate_PpmSegmentsValidate returnValue = default !;
            if (data.__typename.Equals("PpmSegmentsValidateOutput", global::System.StringComparison.Ordinal))
            {
                returnValue = new PpmSegmentsValidate_PpmSegmentsValidate_PpmSegmentsValidateOutput(MapNonNullableIPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse(data.ValidationResponse ?? throw new global::System.ArgumentNullException(), snapshot), data.SegmentString);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse MapNonNullableIPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse(global::AggieEnterpriseApi.State.ValidationResponseData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse returnValue = default !;
            if (data.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal))
            {
                returnValue = new PpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse_ValidationResponse(data.ErrorMessages, data.MessageProperties, data.Valid ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public PpmSegmentsValidateResultInfo(global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData ppmSegmentsValidate, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            PpmSegmentsValidate = ppmSegmentsValidate;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData PpmSegmentsValidate { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new PpmSegmentsValidateResultInfo(PpmSegmentsValidate, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.GlValidateChartSegmentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GlValidateChartSegmentsResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IGlValidateChartSegmentsResult);
        public GlValidateChartSegmentsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GlValidateChartSegmentsResultInfo info)
            {
                return new GlValidateChartSegmentsResult(MapNonNullableIGlValidateChartSegments_GlValidateChartSegments(info.GlValidateChartSegments, snapshot));
            }

            throw new global::System.ArgumentException("GlValidateChartSegmentsResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments MapNonNullableIGlValidateChartSegments_GlValidateChartSegments(global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartSegments_GlValidateChartSegments returnValue = default !;
            if (data.__typename.Equals("GlValidateChartSegmentsOutput", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartSegments_GlValidateChartSegments_GlValidateChartSegmentsOutput(MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_ValidationResponse(data.ValidationResponse ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_Segments(data.Segments ?? throw new global::System.ArgumentNullException(), snapshot), data.CompleteChartstring, data.CodeCombinationId, MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_SegmentNames(data.SegmentNames ?? throw new global::System.ArgumentNullException(), snapshot), MapIGlValidateChartSegments_GlValidateChartSegments_WarningsNonNullableArray(data.Warnings, snapshot), MapIGlValidateChartSegments_GlValidateChartSegments_EndDatesNonNullableArray(data.EndDates, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_ValidationResponse(global::AggieEnterpriseApi.State.ValidationResponseData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartSegments_GlValidateChartSegments_ValidationResponse returnValue = default !;
            if (data.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartSegments_GlValidateChartSegments_ValidationResponse_ValidationResponse(data.ErrorMessages, data.MessageProperties, data.Valid ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Segments MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_Segments(global::AggieEnterpriseApi.State.GlSegmentsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartSegments_GlValidateChartSegments_Segments returnValue = default !;
            if (data.__typename.Equals("GlSegments", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartSegments_GlValidateChartSegments_Segments_GlSegments(data.Account, data.Activity, data.Department, data.Entity, data.Fund, data.Program, data.Project, data.Purpose);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_SegmentNames MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_SegmentNames(global::AggieEnterpriseApi.State.GlSegmentNamesData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartSegments_GlValidateChartSegments_SegmentNames returnValue = default !;
            if (data.__typename.Equals("GlSegmentNames", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartSegments_GlValidateChartSegments_SegmentNames_GlSegmentNames(data.EntityName, data.FundName, data.DepartmentName, data.AccountName, data.PurposeName, data.ProjectName, data.ProgramName, data.ActivityName);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Warnings>? MapIGlValidateChartSegments_GlValidateChartSegments_WarningsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentWarningData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var segmentWarnings = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Warnings>();
            foreach (global::AggieEnterpriseApi.State.SegmentWarningData child in list)
            {
                segmentWarnings.Add(MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_Warnings(child, snapshot));
            }

            return segmentWarnings;
        }

        private global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_Warnings MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_Warnings(global::AggieEnterpriseApi.State.SegmentWarningData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartSegments_GlValidateChartSegments_Warnings returnValue = default !;
            if (data.__typename.Equals("SegmentWarning", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartSegments_GlValidateChartSegments_Warnings_SegmentWarning(data.SegmentName ?? throw new global::System.ArgumentNullException(), data.Warning ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_EndDates>? MapIGlValidateChartSegments_GlValidateChartSegments_EndDatesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentEndDateData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var segmentEndDates = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_EndDates>();
            foreach (global::AggieEnterpriseApi.State.SegmentEndDateData child in list)
            {
                segmentEndDates.Add(MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_EndDates(child, snapshot));
            }

            return segmentEndDates;
        }

        private global::AggieEnterpriseApi.IGlValidateChartSegments_GlValidateChartSegments_EndDates MapNonNullableIGlValidateChartSegments_GlValidateChartSegments_EndDates(global::AggieEnterpriseApi.State.SegmentEndDateData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartSegments_GlValidateChartSegments_EndDates returnValue = default !;
            if (data.__typename.Equals("SegmentEndDate", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartSegments_GlValidateChartSegments_EndDates_SegmentEndDate(data.SegmentName ?? throw new global::System.ArgumentNullException(), data.EndDate ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GlValidateChartSegmentsResultInfo(global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData glValidateChartSegments, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GlValidateChartSegments = glValidateChartSegments;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData GlValidateChartSegments { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GlValidateChartSegmentsResultInfo(GlValidateChartSegments, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstringResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.GlValidateChartstringResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GlValidateChartstringResultFactory(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::AggieEnterpriseApi.IGlValidateChartstringResult);
        public GlValidateChartstringResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GlValidateChartstringResultInfo info)
            {
                return new GlValidateChartstringResult(MapNonNullableIGlValidateChartstring_GlValidateChartstring(info.GlValidateChartstring, snapshot));
            }

            throw new global::System.ArgumentException("GlValidateChartstringResultInfo expected.");
        }

        private global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring MapNonNullableIGlValidateChartstring_GlValidateChartstring(global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartstring_GlValidateChartstring returnValue = default !;
            if (data.__typename.Equals("GlValidateChartSegmentsOutput", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartstring_GlValidateChartstring_GlValidateChartSegmentsOutput(MapNonNullableIGlValidateChartstring_GlValidateChartstring_ValidationResponse(data.ValidationResponse ?? throw new global::System.ArgumentNullException(), snapshot), MapNonNullableIGlValidateChartstring_GlValidateChartstring_Segments(data.Segments ?? throw new global::System.ArgumentNullException(), snapshot), data.CompleteChartstring, data.CodeCombinationId, MapNonNullableIGlValidateChartstring_GlValidateChartstring_SegmentNames(data.SegmentNames ?? throw new global::System.ArgumentNullException(), snapshot), MapIGlValidateChartstring_GlValidateChartstring_WarningsNonNullableArray(data.Warnings, snapshot), MapIGlValidateChartstring_GlValidateChartstring_EndDatesNonNullableArray(data.EndDates, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_ValidationResponse MapNonNullableIGlValidateChartstring_GlValidateChartstring_ValidationResponse(global::AggieEnterpriseApi.State.ValidationResponseData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartstring_GlValidateChartstring_ValidationResponse returnValue = default !;
            if (data.__typename.Equals("ValidationResponse", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartstring_GlValidateChartstring_ValidationResponse_ValidationResponse(data.ErrorMessages, data.MessageProperties, data.Valid ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Segments MapNonNullableIGlValidateChartstring_GlValidateChartstring_Segments(global::AggieEnterpriseApi.State.GlSegmentsData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartstring_GlValidateChartstring_Segments returnValue = default !;
            if (data.__typename.Equals("GlSegments", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartstring_GlValidateChartstring_Segments_GlSegments(data.Account, data.Activity, data.Department, data.Entity, data.Fund, data.Program, data.Project, data.Purpose);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_SegmentNames MapNonNullableIGlValidateChartstring_GlValidateChartstring_SegmentNames(global::AggieEnterpriseApi.State.GlSegmentNamesData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartstring_GlValidateChartstring_SegmentNames returnValue = default !;
            if (data.__typename.Equals("GlSegmentNames", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartstring_GlValidateChartstring_SegmentNames_GlSegmentNames(data.EntityName, data.FundName, data.DepartmentName, data.AccountName, data.PurposeName, data.ProjectName, data.ProgramName, data.ActivityName);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Warnings>? MapIGlValidateChartstring_GlValidateChartstring_WarningsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentWarningData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var segmentWarnings = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Warnings>();
            foreach (global::AggieEnterpriseApi.State.SegmentWarningData child in list)
            {
                segmentWarnings.Add(MapNonNullableIGlValidateChartstring_GlValidateChartstring_Warnings(child, snapshot));
            }

            return segmentWarnings;
        }

        private global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_Warnings MapNonNullableIGlValidateChartstring_GlValidateChartstring_Warnings(global::AggieEnterpriseApi.State.SegmentWarningData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartstring_GlValidateChartstring_Warnings returnValue = default !;
            if (data.__typename.Equals("SegmentWarning", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartstring_GlValidateChartstring_Warnings_SegmentWarning(data.SegmentName ?? throw new global::System.ArgumentNullException(), data.Warning ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_EndDates>? MapIGlValidateChartstring_GlValidateChartstring_EndDatesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentEndDateData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var segmentEndDates = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_EndDates>();
            foreach (global::AggieEnterpriseApi.State.SegmentEndDateData child in list)
            {
                segmentEndDates.Add(MapNonNullableIGlValidateChartstring_GlValidateChartstring_EndDates(child, snapshot));
            }

            return segmentEndDates;
        }

        private global::AggieEnterpriseApi.IGlValidateChartstring_GlValidateChartstring_EndDates MapNonNullableIGlValidateChartstring_GlValidateChartstring_EndDates(global::AggieEnterpriseApi.State.SegmentEndDateData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGlValidateChartstring_GlValidateChartstring_EndDates returnValue = default !;
            if (data.__typename.Equals("SegmentEndDate", global::System.StringComparison.Ordinal))
            {
                returnValue = new GlValidateChartstring_GlValidateChartstring_EndDates_SegmentEndDate(data.SegmentName ?? throw new global::System.ArgumentNullException(), data.EndDate ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstringResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GlValidateChartstringResultInfo(global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData glValidateChartstring, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            GlValidateChartstring = glValidateChartstring;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData GlValidateChartstring { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GlValidateChartstringResultInfo(GlValidateChartstring, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IGlJournalRequestInputInfo
    {
        global::System.Boolean IsHeaderSet { get; }

        global::System.Boolean IsPayloadSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IActionRequestHeaderInputInfo
    {
        global::System.Boolean IsConsumerTrackingIdSet { get; }

        global::System.Boolean IsConsumerReferenceIdSet { get; }

        global::System.Boolean IsConsumerNotesSet { get; }

        global::System.Boolean IsBoundaryApplicationNameSet { get; }

        global::System.Boolean IsConsumerIdSet { get; }

        global::System.Boolean IsBatchRequestSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IGlJournalInputInfo
    {
        global::System.Boolean IsJournalSourceNameSet { get; }

        global::System.Boolean IsJournalCategoryNameSet { get; }

        global::System.Boolean IsJournalNameSet { get; }

        global::System.Boolean IsJournalDescriptionSet { get; }

        global::System.Boolean IsJournalReferenceSet { get; }

        global::System.Boolean IsAccountingDateSet { get; }

        global::System.Boolean IsAccountingPeriodNameSet { get; }

        global::System.Boolean IsJournalLinesSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IGlJournalLineInputInfo
    {
        global::System.Boolean IsGlSegmentsSet { get; }

        global::System.Boolean IsGlSegmentStringSet { get; }

        global::System.Boolean IsPpmSegmentsSet { get; }

        global::System.Boolean IsPpmSegmentStringSet { get; }

        global::System.Boolean IsDebitAmountSet { get; }

        global::System.Boolean IsCreditAmountSet { get; }

        global::System.Boolean IsExternalSystemIdentifierSet { get; }

        global::System.Boolean IsExternalSystemReferenceSet { get; }

        global::System.Boolean IsPpmCommentSet { get; }

        global::System.Boolean IsGlideSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IGlSegmentInputInfo
    {
        global::System.Boolean IsEntitySet { get; }

        global::System.Boolean IsFundSet { get; }

        global::System.Boolean IsDepartmentSet { get; }

        global::System.Boolean IsAccountSet { get; }

        global::System.Boolean IsPurposeSet { get; }

        global::System.Boolean IsProjectSet { get; }

        global::System.Boolean IsProgramSet { get; }

        global::System.Boolean IsActivitySet { get; }

        global::System.Boolean IsFlex1Set { get; }

        global::System.Boolean IsFlex2Set { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IPpmSegmentInputInfo
    {
        global::System.Boolean IsProjectSet { get; }

        global::System.Boolean IsTaskSet { get; }

        global::System.Boolean IsOrganizationSet { get; }

        global::System.Boolean IsExpenditureTypeSet { get; }

        global::System.Boolean IsAwardSet { get; }

        global::System.Boolean IsFundingSourceSet { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    internal interface IGlideInputInfo
    {
        global::System.Boolean IsLineDescriptionSet { get; }

        global::System.Boolean IsJournalLineNumberSet { get; }

        global::System.Boolean IsTransactionDateSet { get; }

        global::System.Boolean IsUdfNumeric1Set { get; }

        global::System.Boolean IsUdfNumeric2Set { get; }

        global::System.Boolean IsUdfNumeric3Set { get; }

        global::System.Boolean IsUdfDate1Set { get; }

        global::System.Boolean IsUdfDate2Set { get; }

        global::System.Boolean IsUdfString1Set { get; }

        global::System.Boolean IsUdfString2Set { get; }

        global::System.Boolean IsUdfString3Set { get; }

        global::System.Boolean IsUdfString4Set { get; }

        global::System.Boolean IsUdfString5Set { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class DeptParentsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IDeptParentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IDeptParentsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDepartmentCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public DeptParentsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IDeptParentsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _erpDepartmentCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDepartmentCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpDepartmentCode` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IDeptParentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IDeptParentsResult Result, DeptParentsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IDeptParentsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IDeptParentsResult, DeptParentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? erpFinancialDepartmentId = default !;
            _entityStore.Update(session =>
            {
                erpFinancialDepartmentId = UpdateIDeptParents_ErpFinancialDepartmentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpFinancialDepartment"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new DeptParentsResultInfo(erpFinancialDepartmentId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartmentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), UpdateIDeptParents_ErpFinancialDepartment_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.FiscalOfficerName, entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), UpdateIDeptParents_ErpFinancialDepartment_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _erpDepartmentCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, UpdateIDeptParents_ErpFinancialDepartment_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.FiscalOfficerName, entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, UpdateIDeptParents_ErpFinancialDepartment_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.FiscalOfficerName, entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.FiscalOfficerName, entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.FiscalOfficerName, entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.FiscalOfficerName, entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), entity.FiscalOfficerName, entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds), default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIDeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, entity.Parent, entity.FiscalOfficerName, entity.EligibleForUse));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class FundParentsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IFundParentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IFundParentsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFundCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _localDateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        public FundParentsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IFundParentsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _erpFundCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFundCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpFundCode` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _localDateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("LocalDate") ?? throw new global::System.ArgumentException("No serializer for type `LocalDate` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
        }

        public global::StrawberryShake.IOperationResult<IFundParentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IFundParentsResult Result, FundParentsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IFundParentsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IFundParentsResult, FundParentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? erpFundId = default !;
            _entityStore.Update(session =>
            {
                erpFundId = UpdateIFundParents_ErpFundEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpFund"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new FundParentsResultInfo(erpFundId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFundEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "budgeted")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eligibleForUse")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDate")), DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startDate")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "budgeted")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eligibleForUse")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "enabled")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDate")), DeserializeNonNullableInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "id")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "startDate")), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _erpFundCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _localDateParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int64 DeserializeNonNullableInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ParentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "parent"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIFundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ParentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), entity.Parent));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hierarchyDepth")), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::AggieEnterpriseApi.RequestStatus> _requestStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString80Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpNameField100Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDescriptionField240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _glReferenceField25Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _localDateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString15Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _glSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Decimal, global::System.Decimal> _nonNegativeFloatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _glReferenceField10Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _glDescriptionField40Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpEntityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFundCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDepartmentCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpAccountCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpPurposeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProjectCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProgramCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpActivityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFlex1CodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFlex2CodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmProjectNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmTaskNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmExpenseOrganizationCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmExpenseTypeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmAwardNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmFundingSourceNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTime> _dateParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Guid> _uUIDParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GlJournalRequestBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _requestStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::AggieEnterpriseApi.RequestStatus>("RequestStatus") ?? throw new global::System.ArgumentException("No serializer for type `RequestStatus` found.");
            _nonEmptyTrimmedString80Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString80") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString80` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _erpNameField100Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpNameField100") ?? throw new global::System.ArgumentException("No serializer for type `ErpNameField100` found.");
            _erpDescriptionField240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDescriptionField240") ?? throw new global::System.ArgumentException("No serializer for type `ErpDescriptionField240` found.");
            _glReferenceField25Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("GlReferenceField25") ?? throw new global::System.ArgumentException("No serializer for type `GlReferenceField25` found.");
            _localDateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("LocalDate") ?? throw new global::System.ArgumentException("No serializer for type `LocalDate` found.");
            _nonEmptyTrimmedString15Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString15") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString15` found.");
            _glSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("GlSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `GlSegmentString` found.");
            _ppmSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `PpmSegmentString` found.");
            _nonNegativeFloatParser = serializerResolver.GetLeafValueParser<global::System.Decimal, global::System.Decimal>("NonNegativeFloat") ?? throw new global::System.ArgumentException("No serializer for type `NonNegativeFloat` found.");
            _glReferenceField10Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("GlReferenceField10") ?? throw new global::System.ArgumentException("No serializer for type `GlReferenceField10` found.");
            _glDescriptionField40Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("GlDescriptionField40") ?? throw new global::System.ArgumentException("No serializer for type `GlDescriptionField40` found.");
            _erpEntityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpEntityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpEntityCode` found.");
            _erpFundCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFundCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpFundCode` found.");
            _erpDepartmentCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDepartmentCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpDepartmentCode` found.");
            _erpAccountCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpAccountCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpAccountCode` found.");
            _erpPurposeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpPurposeCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpPurposeCode` found.");
            _erpProjectCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProjectCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProjectCode` found.");
            _erpProgramCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProgramCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProgramCode` found.");
            _erpActivityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpActivityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpActivityCode` found.");
            _erpFlex1CodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFlex1Code") ?? throw new global::System.ArgumentException("No serializer for type `ErpFlex1Code` found.");
            _erpFlex2CodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFlex2Code") ?? throw new global::System.ArgumentException("No serializer for type `ErpFlex2Code` found.");
            _ppmProjectNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmProjectNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmProjectNumber` found.");
            _ppmTaskNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmTaskNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmTaskNumber` found.");
            _ppmExpenseOrganizationCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmExpenseOrganizationCode") ?? throw new global::System.ArgumentException("No serializer for type `PpmExpenseOrganizationCode` found.");
            _ppmExpenseTypeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmExpenseTypeCode") ?? throw new global::System.ArgumentException("No serializer for type `PpmExpenseTypeCode` found.");
            _ppmAwardNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmAwardNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmAwardNumber` found.");
            _ppmFundingSourceNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmFundingSourceNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmFundingSourceNumber` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
            _dateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTime>("Date") ?? throw new global::System.ArgumentException("No serializer for type `Date` found.");
            _uUIDParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Guid>("UUID") ?? throw new global::System.ArgumentException("No serializer for type `UUID` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGlJournalRequestResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGlJournalRequestResult Result, GlJournalRequestResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGlJournalRequestResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGlJournalRequestResult, GlJournalRequestResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GlJournalRequestResultInfo(DeserializeNonNullableIGlJournalRequest_GlJournalRequest(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glJournalRequest")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData DeserializeNonNullableIGlJournalRequest_GlJournalRequest(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlJournalRequestStatusOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData(typename, requestStatus: DeserializeNonNullableIGlJournalRequest_GlJournalRequest_RequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestStatus")), validationResults: DeserializeIGlJournalRequest_GlJournalRequest_ValidationResults(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResults")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ActionRequestStatusData DeserializeNonNullableIGlJournalRequest_GlJournalRequest_RequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ActionRequestStatus", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ActionRequestStatusData(typename, requestId: DeserializeGuid(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestId")), consumerId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "consumerId")), requestDateTime: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestDateTime")), requestStatus: DeserializeNonNullableRequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestStatus")), operationName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "operationName")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Guid? DeserializeGuid(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _uUIDParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _nonEmptyTrimmedString80Parser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.RequestStatus DeserializeNonNullableRequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _requestStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData? DeserializeIGlJournalRequest_GlJournalRequest_ValidationResults(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), messageProperties: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "messageProperties")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestStatusResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestStatusResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::AggieEnterpriseApi.RequestStatus> _requestStatusParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _jSONParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString80Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public GlJournalRequestStatusBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestStatusResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _requestStatusParser = serializerResolver.GetLeafValueParser<global::System.String, global::AggieEnterpriseApi.RequestStatus>("RequestStatus") ?? throw new global::System.ArgumentException("No serializer for type `RequestStatus` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _jSONParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("JSON") ?? throw new global::System.ArgumentException("No serializer for type `JSON` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
            _nonEmptyTrimmedString80Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString80") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString80` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IGlJournalRequestStatusResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGlJournalRequestStatusResult Result, GlJournalRequestStatusResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGlJournalRequestStatusResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGlJournalRequestStatusResult, GlJournalRequestStatusResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GlJournalRequestStatusResultInfo(DeserializeIGlJournalRequestStatus_GlJournalRequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glJournalRequestStatus")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData? DeserializeIGlJournalRequestStatus_GlJournalRequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlJournalRequestStatusOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlJournalRequestStatusOutputData(typename, requestStatus: DeserializeNonNullableIGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestStatus")), processingResult: DeserializeIGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "processingResult")), validationResults: DeserializeIGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResults")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ActionRequestStatusData DeserializeNonNullableIGlJournalRequestStatus_GlJournalRequestStatus_RequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ActionRequestStatus", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ActionRequestStatusData(typename, statusRequestPayload: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "statusRequestPayload")), operationName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "operationName")), requestStatus: DeserializeNonNullableRequestStatus(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestStatus")), requestDateTime: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requestDateTime")), lastStatusDateTime: DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastStatusDateTime")), errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), processedDateTime: DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "processedDateTime")), boundaryApplicationName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "boundaryApplicationName")), consumerId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "consumerId")), consumerNotes: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "consumerNotes")), consumerReferenceId: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "consumerReferenceId")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _jSONParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.RequestStatus DeserializeNonNullableRequestStatus(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _requestStatusParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::AggieEnterpriseApi.State.ProcessingResultData? DeserializeIGlJournalRequestStatus_GlJournalRequestStatus_ProcessingResult(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ProcessingResult", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ProcessingResultData(typename, status: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "status")), processedDateTime: DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "processedDateTime")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData? DeserializeIGlJournalRequestStatus_GlJournalRequestStatus_ValidationResults(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, valid: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valid")), errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class CoaDetailsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.ICoaDetailsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ICoaDetailsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpEntityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _nonEmptyTrimmedString240Parser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFundCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDepartmentCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpAccountCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpPurposeCodeParser;
        public CoaDetailsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ICoaDetailsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _erpEntityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpEntityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpEntityCode` found.");
            _nonEmptyTrimmedString240Parser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("NonEmptyTrimmedString240") ?? throw new global::System.ArgumentException("No serializer for type `NonEmptyTrimmedString240` found.");
            _erpFundCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFundCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpFundCode` found.");
            _erpDepartmentCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDepartmentCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpDepartmentCode` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _erpAccountCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpAccountCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpAccountCode` found.");
            _erpPurposeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpPurposeCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpPurposeCode` found.");
        }

        public global::StrawberryShake.IOperationResult<ICoaDetailsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (ICoaDetailsResult Result, CoaDetailsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<ICoaDetailsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (ICoaDetailsResult, CoaDetailsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? erpEntityId = default !;
            global::StrawberryShake.EntityId? erpFundId = default !;
            global::StrawberryShake.EntityId? erpFinancialDepartmentId = default !;
            global::StrawberryShake.EntityId? erpAccountId = default !;
            global::StrawberryShake.EntityId? erpPurposeId = default !;
            _entityStore.Update(session =>
            {
                erpEntityId = UpdateICoaDetails_ErpEntityEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpEntity"), entityIds);
                erpFundId = UpdateICoaDetails_ErpFundEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpFund"), entityIds);
                erpFinancialDepartmentId = UpdateICoaDetails_ErpFinancialDepartmentEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpFinancialDepartment"), entityIds);
                erpAccountId = UpdateICoaDetails_ErpAccountEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpAccount"), entityIds);
                erpPurposeId = UpdateICoaDetails_ErpPurposeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "erpPurpose"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new CoaDetailsResultInfo(erpEntityId, erpFundId, erpFinancialDepartmentId, erpAccountId, erpPurposeId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateICoaDetails_ErpEntityEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpEntity", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpEntityEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpEntityEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpEntityEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _erpEntityCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId? UpdateICoaDetails_ErpFundEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFund", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFundEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Budgeted, entity.EligibleForUse, entity.Enabled, entity.EndDate, entity.Id, entity.StartDate, entity.HierarchyDepth, entity.Parent));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFundEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateICoaDetails_ErpFinancialDepartmentEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpFinancialDepartment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), entity.Enabled, entity.Parent, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fiscalOfficerName")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eligibleForUse"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), default !, default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fiscalOfficerName")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "eligibleForUse"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _nonEmptyTrimmedString240Parser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::StrawberryShake.EntityId? UpdateICoaDetails_ErpAccountEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpAccount", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpAccountEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpAccountEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpAccountEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateICoaDetails_ErpPurposeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("ErpPurpose", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::AggieEnterpriseApi.State.ErpPurposeEntity? entity))
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpPurposeEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::AggieEnterpriseApi.State.ErpPurposeEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "code")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmStringSegmentsValidateBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public PpmStringSegmentsValidateBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _ppmSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `PpmSegmentString` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IPpmStringSegmentsValidateResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IPpmStringSegmentsValidateResult Result, PpmStringSegmentsValidateResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IPpmStringSegmentsValidateResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IPpmStringSegmentsValidateResult, PpmStringSegmentsValidateResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new PpmStringSegmentsValidateResultInfo(DeserializeNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ppmStringSegmentsValidate")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData DeserializeNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PpmSegmentsValidateOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData(typename, validationResponse: DeserializeNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResponse")), segmentString: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentString")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData DeserializeNonNullableIPpmStringSegmentsValidate_PpmStringSegmentsValidate_ValidationResponse(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, valid: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valid")), errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), messageProperties: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "messageProperties")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _ppmSegmentStringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmSegmentsValidateResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmSegmentsValidateResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmProjectNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmTaskNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmExpenseOrganizationCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmExpenseTypeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmAwardNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmFundingSourceNumberParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _ppmSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        public PpmSegmentsValidateBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmSegmentsValidateResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _ppmProjectNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmProjectNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmProjectNumber` found.");
            _ppmTaskNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmTaskNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmTaskNumber` found.");
            _ppmExpenseOrganizationCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmExpenseOrganizationCode") ?? throw new global::System.ArgumentException("No serializer for type `PpmExpenseOrganizationCode` found.");
            _ppmExpenseTypeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmExpenseTypeCode") ?? throw new global::System.ArgumentException("No serializer for type `PpmExpenseTypeCode` found.");
            _ppmAwardNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmAwardNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmAwardNumber` found.");
            _ppmFundingSourceNumberParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmFundingSourceNumber") ?? throw new global::System.ArgumentException("No serializer for type `PpmFundingSourceNumber` found.");
            _ppmSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("PpmSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `PpmSegmentString` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
        }

        public global::StrawberryShake.IOperationResult<IPpmSegmentsValidateResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IPpmSegmentsValidateResult Result, PpmSegmentsValidateResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IPpmSegmentsValidateResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IPpmSegmentsValidateResult, PpmSegmentsValidateResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new PpmSegmentsValidateResultInfo(DeserializeNonNullableIPpmSegmentsValidate_PpmSegmentsValidate(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "ppmSegmentsValidate")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData DeserializeNonNullableIPpmSegmentsValidate_PpmSegmentsValidate(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PpmSegmentsValidateOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.PpmSegmentsValidateOutputData(typename, validationResponse: DeserializeNonNullableIPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResponse")), segmentString: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentString")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData DeserializeNonNullableIPpmSegmentsValidate_PpmSegmentsValidate_ValidationResponse(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), messageProperties: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "messageProperties")), valid: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valid")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _ppmSegmentStringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartSegmentsResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpEntityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFundCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDepartmentCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpAccountCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpPurposeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProjectCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProgramCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpActivityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFlex1CodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFlex2CodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _glSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _localDateParser;
        public GlValidateChartSegmentsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartSegmentsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _erpEntityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpEntityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpEntityCode` found.");
            _erpFundCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFundCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpFundCode` found.");
            _erpDepartmentCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDepartmentCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpDepartmentCode` found.");
            _erpAccountCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpAccountCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpAccountCode` found.");
            _erpPurposeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpPurposeCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpPurposeCode` found.");
            _erpProjectCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProjectCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProjectCode` found.");
            _erpProgramCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProgramCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProgramCode` found.");
            _erpActivityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpActivityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpActivityCode` found.");
            _erpFlex1CodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFlex1Code") ?? throw new global::System.ArgumentException("No serializer for type `ErpFlex1Code` found.");
            _erpFlex2CodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFlex2Code") ?? throw new global::System.ArgumentException("No serializer for type `ErpFlex2Code` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _glSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("GlSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `GlSegmentString` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _localDateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("LocalDate") ?? throw new global::System.ArgumentException("No serializer for type `LocalDate` found.");
        }

        public global::StrawberryShake.IOperationResult<IGlValidateChartSegmentsResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGlValidateChartSegmentsResult Result, GlValidateChartSegmentsResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGlValidateChartSegmentsResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGlValidateChartSegmentsResult, GlValidateChartSegmentsResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GlValidateChartSegmentsResultInfo(DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glValidateChartSegments")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlValidateChartSegmentsOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData(typename, validationResponse: DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_ValidationResponse(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResponse")), segments: DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_Segments(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segments")), completeChartstring: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completeChartstring")), codeCombinationId: DeserializeInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "codeCombinationId")), segmentNames: DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_SegmentNames(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentNames")), warnings: DeserializeIGlValidateChartSegments_GlValidateChartSegments_WarningsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "warnings")), endDates: DeserializeIGlValidateChartSegments_GlValidateChartSegments_EndDatesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDates")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_ValidationResponse(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), messageProperties: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "messageProperties")), valid: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valid")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::AggieEnterpriseApi.State.GlSegmentsData DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_Segments(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlSegments", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlSegmentsData(typename, account: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "account")), activity: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activity")), department: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "department")), entity: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "entity")), fund: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fund")), program: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "program")), project: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "project")), purpose: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purpose")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _erpAccountCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int64? DeserializeInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::AggieEnterpriseApi.State.GlSegmentNamesData DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_SegmentNames(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlSegmentNames", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlSegmentNamesData(typename, entityName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "entityName")), fundName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fundName")), departmentName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "departmentName")), accountName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accountName")), purposeName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purposeName")), projectName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectName")), programName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "programName")), activityName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activityName")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentWarningData>? DeserializeIGlValidateChartSegments_GlValidateChartSegments_WarningsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var segmentWarnings = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.State.SegmentWarningData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                segmentWarnings.Add(DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_Warnings(child));
            }

            return segmentWarnings;
        }

        private global::AggieEnterpriseApi.State.SegmentWarningData DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_Warnings(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SegmentWarning", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.SegmentWarningData(typename, segmentName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentName")), warning: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "warning")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentEndDateData>? DeserializeIGlValidateChartSegments_GlValidateChartSegments_EndDatesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var segmentEndDates = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.State.SegmentEndDateData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                segmentEndDates.Add(DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_EndDates(child));
            }

            return segmentEndDates;
        }

        private global::AggieEnterpriseApi.State.SegmentEndDateData DeserializeNonNullableIGlValidateChartSegments_GlValidateChartSegments_EndDates(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SegmentEndDate", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.SegmentEndDateData(typename, segmentName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentName")), endDate: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDate")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartstringBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartstringResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartstringResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _glSegmentStringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int64, global::System.Int64> _longParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpAccountCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpActivityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpDepartmentCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpEntityCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpFundCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProgramCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpProjectCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _erpPurposeCodeParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _localDateParser;
        public GlValidateChartstringBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartstringResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _glSegmentStringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("GlSegmentString") ?? throw new global::System.ArgumentException("No serializer for type `GlSegmentString` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _longParser = serializerResolver.GetLeafValueParser<global::System.Int64, global::System.Int64>("Long") ?? throw new global::System.ArgumentException("No serializer for type `Long` found.");
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _erpAccountCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpAccountCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpAccountCode` found.");
            _erpActivityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpActivityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpActivityCode` found.");
            _erpDepartmentCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpDepartmentCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpDepartmentCode` found.");
            _erpEntityCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpEntityCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpEntityCode` found.");
            _erpFundCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpFundCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpFundCode` found.");
            _erpProgramCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProgramCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProgramCode` found.");
            _erpProjectCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpProjectCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpProjectCode` found.");
            _erpPurposeCodeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("ErpPurposeCode") ?? throw new global::System.ArgumentException("No serializer for type `ErpPurposeCode` found.");
            _localDateParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("LocalDate") ?? throw new global::System.ArgumentException("No serializer for type `LocalDate` found.");
        }

        public global::StrawberryShake.IOperationResult<IGlValidateChartstringResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGlValidateChartstringResult Result, GlValidateChartstringResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGlValidateChartstringResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGlValidateChartstringResult, GlValidateChartstringResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            _entityStore.Update(session =>
            {
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GlValidateChartstringResultInfo(DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "glValidateChartstring")), entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlValidateChartSegmentsOutput", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlValidateChartSegmentsOutputData(typename, validationResponse: DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_ValidationResponse(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "validationResponse")), segments: DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_Segments(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segments")), completeChartstring: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "completeChartstring")), codeCombinationId: DeserializeInt64(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "codeCombinationId")), segmentNames: DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_SegmentNames(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentNames")), warnings: DeserializeIGlValidateChartstring_GlValidateChartstring_WarningsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "warnings")), endDates: DeserializeIGlValidateChartstring_GlValidateChartstring_EndDatesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDates")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::AggieEnterpriseApi.State.ValidationResponseData DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_ValidationResponse(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ValidationResponse", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.ValidationResponseData(typename, errorMessages: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errorMessages")), messageProperties: DeserializeStringNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "messageProperties")), valid: DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "valid")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::System.String>? DeserializeStringNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var @strings = new global::System.Collections.Generic.List<global::System.String>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                @strings.Add(DeserializeNonNullableString(child));
            }

            return @strings;
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::AggieEnterpriseApi.State.GlSegmentsData DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_Segments(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlSegments", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlSegmentsData(typename, account: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "account")), activity: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activity")), department: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "department")), entity: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "entity")), fund: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fund")), program: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "program")), project: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "project")), purpose: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purpose")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _erpAccountCodeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int64? DeserializeInt64(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _longParser.Parse(obj.Value.GetInt64()!);
        }

        private global::AggieEnterpriseApi.State.GlSegmentNamesData DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_SegmentNames(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("GlSegmentNames", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.GlSegmentNamesData(typename, entityName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "entityName")), fundName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "fundName")), departmentName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "departmentName")), accountName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "accountName")), purposeName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "purposeName")), projectName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "projectName")), programName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "programName")), activityName: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "activityName")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentWarningData>? DeserializeIGlValidateChartstring_GlValidateChartstring_WarningsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var segmentWarnings = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.State.SegmentWarningData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                segmentWarnings.Add(DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_Warnings(child));
            }

            return segmentWarnings;
        }

        private global::AggieEnterpriseApi.State.SegmentWarningData DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_Warnings(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SegmentWarning", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.SegmentWarningData(typename, segmentName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentName")), warning: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "warning")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentEndDateData>? DeserializeIGlValidateChartstring_GlValidateChartstring_EndDatesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var segmentEndDates = new global::System.Collections.Generic.List<global::AggieEnterpriseApi.State.SegmentEndDateData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                segmentEndDates.Add(DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_EndDates(child));
            }

            return segmentEndDates;
        }

        private global::AggieEnterpriseApi.State.SegmentEndDateData DeserializeNonNullableIGlValidateChartstring_GlValidateChartstring_EndDates(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("SegmentEndDate", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::AggieEnterpriseApi.State.SegmentEndDateData(typename, segmentName: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "segmentName")), endDate: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endDate")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlJournalRequestStatusOutputData
    {
        public GlJournalRequestStatusOutputData(global::System.String __typename, global::AggieEnterpriseApi.State.ActionRequestStatusData? requestStatus = default !, global::AggieEnterpriseApi.State.ValidationResponseData? validationResults = default !, global::AggieEnterpriseApi.State.ProcessingResultData? processingResult = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            RequestStatus = requestStatus;
            ValidationResults = validationResults;
            ProcessingResult = processingResult;
        }

        public global::System.String __typename { get; }

        public global::AggieEnterpriseApi.State.ActionRequestStatusData? RequestStatus { get; }

        public global::AggieEnterpriseApi.State.ValidationResponseData? ValidationResults { get; }

        public global::AggieEnterpriseApi.State.ProcessingResultData? ProcessingResult { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ActionRequestStatusData
    {
        public ActionRequestStatusData(global::System.String __typename, global::System.Guid? requestId = default !, global::System.String? consumerId = default !, global::System.DateTimeOffset? requestDateTime = default !, global::AggieEnterpriseApi.RequestStatus? requestStatus = default !, global::System.String? operationName = default !, global::System.String? statusRequestPayload = default !, global::System.DateTimeOffset? lastStatusDateTime = default !, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages = default !, global::System.DateTimeOffset? processedDateTime = default !, global::System.String? boundaryApplicationName = default !, global::System.String? consumerNotes = default !, global::System.String? consumerReferenceId = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            RequestId = requestId;
            ConsumerId = consumerId;
            RequestDateTime = requestDateTime;
            RequestStatus = requestStatus;
            OperationName = operationName;
            StatusRequestPayload = statusRequestPayload;
            LastStatusDateTime = lastStatusDateTime;
            ErrorMessages = errorMessages;
            ProcessedDateTime = processedDateTime;
            BoundaryApplicationName = boundaryApplicationName;
            ConsumerNotes = consumerNotes;
            ConsumerReferenceId = consumerReferenceId;
        }

        public global::System.String __typename { get; }

        public global::System.Guid? RequestId { get; }

        public global::System.String? ConsumerId { get; }

        public global::System.DateTimeOffset? RequestDateTime { get; }

        public global::AggieEnterpriseApi.RequestStatus? RequestStatus { get; }

        public global::System.String? OperationName { get; }

        public global::System.String? StatusRequestPayload { get; }

        public global::System.DateTimeOffset? LastStatusDateTime { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.DateTimeOffset? ProcessedDateTime { get; }

        public global::System.String? BoundaryApplicationName { get; }

        public global::System.String? ConsumerNotes { get; }

        public global::System.String? ConsumerReferenceId { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ValidationResponseData
    {
        public ValidationResponseData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::System.String>? errorMessages = default !, global::System.Collections.Generic.IReadOnlyList<global::System.String>? messageProperties = default !, global::System.Boolean? valid = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ErrorMessages = errorMessages;
            MessageProperties = messageProperties;
            Valid = valid;
        }

        public global::System.String __typename { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? ErrorMessages { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::System.String>? MessageProperties { get; }

        public global::System.Boolean? Valid { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class ProcessingResultData
    {
        public ProcessingResultData(global::System.String __typename, global::System.String? status = default !, global::System.DateTimeOffset? processedDateTime = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Status = status;
            ProcessedDateTime = processedDateTime;
        }

        public global::System.String __typename { get; }

        public global::System.String? Status { get; }

        public global::System.DateTimeOffset? ProcessedDateTime { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class PpmSegmentsValidateOutputData
    {
        public PpmSegmentsValidateOutputData(global::System.String __typename, global::AggieEnterpriseApi.State.ValidationResponseData? validationResponse = default !, global::System.String? segmentString = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ValidationResponse = validationResponse;
            SegmentString = segmentString;
        }

        public global::System.String __typename { get; }

        public global::AggieEnterpriseApi.State.ValidationResponseData? ValidationResponse { get; }

        public global::System.String? SegmentString { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlValidateChartSegmentsOutputData
    {
        public GlValidateChartSegmentsOutputData(global::System.String __typename, global::AggieEnterpriseApi.State.ValidationResponseData? validationResponse = default !, global::AggieEnterpriseApi.State.GlSegmentsData? segments = default !, global::System.String? completeChartstring = default !, global::System.Int64? codeCombinationId = default !, global::AggieEnterpriseApi.State.GlSegmentNamesData? segmentNames = default !, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentWarningData>? warnings = default !, global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentEndDateData>? endDates = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            ValidationResponse = validationResponse;
            Segments = segments;
            CompleteChartstring = completeChartstring;
            CodeCombinationId = codeCombinationId;
            SegmentNames = segmentNames;
            Warnings = warnings;
            EndDates = endDates;
        }

        public global::System.String __typename { get; }

        public global::AggieEnterpriseApi.State.ValidationResponseData? ValidationResponse { get; }

        public global::AggieEnterpriseApi.State.GlSegmentsData? Segments { get; }

        public global::System.String? CompleteChartstring { get; }

        public global::System.Int64? CodeCombinationId { get; }

        public global::AggieEnterpriseApi.State.GlSegmentNamesData? SegmentNames { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentWarningData>? Warnings { get; }

        public global::System.Collections.Generic.IReadOnlyList<global::AggieEnterpriseApi.State.SegmentEndDateData>? EndDates { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlSegmentsData
    {
        public GlSegmentsData(global::System.String __typename, global::System.String? account = default !, global::System.String? activity = default !, global::System.String? department = default !, global::System.String? entity = default !, global::System.String? fund = default !, global::System.String? program = default !, global::System.String? project = default !, global::System.String? purpose = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Account = account;
            Activity = activity;
            Department = department;
            Entity = entity;
            Fund = fund;
            Program = program;
            Project = project;
            Purpose = purpose;
        }

        public global::System.String __typename { get; }

        public global::System.String? Account { get; }

        public global::System.String? Activity { get; }

        public global::System.String? Department { get; }

        public global::System.String? Entity { get; }

        public global::System.String? Fund { get; }

        public global::System.String? Program { get; }

        public global::System.String? Project { get; }

        public global::System.String? Purpose { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class GlSegmentNamesData
    {
        public GlSegmentNamesData(global::System.String __typename, global::System.String? entityName = default !, global::System.String? fundName = default !, global::System.String? departmentName = default !, global::System.String? accountName = default !, global::System.String? purposeName = default !, global::System.String? projectName = default !, global::System.String? programName = default !, global::System.String? activityName = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            EntityName = entityName;
            FundName = fundName;
            DepartmentName = departmentName;
            AccountName = accountName;
            PurposeName = purposeName;
            ProjectName = projectName;
            ProgramName = programName;
            ActivityName = activityName;
        }

        public global::System.String __typename { get; }

        public global::System.String? EntityName { get; }

        public global::System.String? FundName { get; }

        public global::System.String? DepartmentName { get; }

        public global::System.String? AccountName { get; }

        public global::System.String? PurposeName { get; }

        public global::System.String? ProjectName { get; }

        public global::System.String? ProgramName { get; }

        public global::System.String? ActivityName { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class SegmentWarningData
    {
        public SegmentWarningData(global::System.String __typename, global::System.String? segmentName = default !, global::System.String? warning = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            SegmentName = segmentName;
            Warning = warning;
        }

        public global::System.String __typename { get; }

        public global::System.String? SegmentName { get; }

        public global::System.String? Warning { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class SegmentEndDateData
    {
        public SegmentEndDateData(global::System.String __typename, global::System.String? segmentName = default !, global::System.String? endDate = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            SegmentName = segmentName;
            EndDate = endDate;
        }

        public global::System.String __typename { get; }

        public global::System.String? SegmentName { get; }

        public global::System.String? EndDate { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class AggieEnterpriseClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "ErpFinancialDepartment" => ParseErpFinancialDepartmentEntityId(obj, __typename),
                "ErpFund" => ParseErpFundEntityId(obj, __typename),
                "ErpEntity" => ParseErpEntityEntityId(obj, __typename),
                "ErpAccount" => ParseErpAccountEntityId(obj, __typename),
                "ErpPurpose" => ParseErpPurposeEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "ErpFinancialDepartment" => FormatErpFinancialDepartmentEntityId(entityId),
                "ErpFund" => FormatErpFundEntityId(entityId),
                "ErpEntity" => FormatErpEntityEntityId(entityId),
                "ErpAccount" => FormatErpAccountEntityId(entityId),
                "ErpPurpose" => FormatErpPurposeEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseErpFinancialDepartmentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatErpFinancialDepartmentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseErpFundEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatErpFundEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseErpEntityEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatErpEntityEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseErpAccountEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatErpAccountEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseErpPurposeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetInt64()!);
        }

        private global::System.String FormatErpPurposeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteNumber("id", (global::System.Int64)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public partial class AggieEnterpriseClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public AggieEnterpriseClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.11.1.0")]
    public static partial class AggieEnterpriseClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::AggieEnterpriseApi.State.AggieEnterpriseClientStoreAccessor> AddAggieEnterpriseClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::AggieEnterpriseApi.State.AggieEnterpriseClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.DeptParentsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.FundParentsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlJournalRequestMutation>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlJournalRequestStatusQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.CoaDetailsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmStringSegmentsValidateQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmSegmentsValidateQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlValidateChartSegmentsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlValidateChartstringQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.AggieEnterpriseClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IAggieEnterpriseClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::AggieEnterpriseApi.State.AggieEnterpriseClientStoreAccessor>("AggieEnterpriseClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("AggieEnterpriseClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.DeptParents_ErpFinancialDepartment_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_Parent_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFund>, global::AggieEnterpriseApi.State.FundParents_ErpFund_Parent_Parent_Parent_Parent_Parent_Parent_Parent_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpEntityEntity, global::AggieEnterpriseApi.CoaDetails_ErpEntity_ErpEntity>, global::AggieEnterpriseApi.State.CoaDetails_ErpEntity_ErpEntityFromErpEntityEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFundEntity, global::AggieEnterpriseApi.CoaDetails_ErpFund_ErpFund>, global::AggieEnterpriseApi.State.CoaDetails_ErpFund_ErpFundFromErpFundEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpFinancialDepartmentEntity, global::AggieEnterpriseApi.CoaDetails_ErpFinancialDepartment_ErpFinancialDepartment>, global::AggieEnterpriseApi.State.CoaDetails_ErpFinancialDepartment_ErpFinancialDepartmentFromErpFinancialDepartmentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpAccountEntity, global::AggieEnterpriseApi.CoaDetails_ErpAccount_ErpAccount>, global::AggieEnterpriseApi.State.CoaDetails_ErpAccount_ErpAccountFromErpAccountEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::AggieEnterpriseApi.State.ErpPurposeEntity, global::AggieEnterpriseApi.CoaDetails_ErpPurpose_ErpPurpose>, global::AggieEnterpriseApi.State.CoaDetails_ErpPurpose_ErpPurposeFromErpPurposeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.RequestStatusSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpDepartmentCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("NonEmptyTrimmedString240"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpFundCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("LocalDate"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("NonEmptyTrimmedString80"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpNameField100"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpDescriptionField240"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("GlReferenceField25"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("NonEmptyTrimmedString15"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("GlSegmentString"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmSegmentString"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("GlReferenceField10"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("GlDescriptionField40"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpEntityCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpAccountCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpPurposeCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpProjectCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpProgramCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpActivityCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpFlex1Code"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("ErpFlex2Code"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmProjectNumber"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmTaskNumber"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmExpenseOrganizationCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmExpenseTypeCode"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmAwardNumber"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("PpmFundingSourceNumber"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.StringSerializer("JSON"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.GlJournalRequestInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.ActionRequestHeaderInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.GlJournalInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.GlJournalLineInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.GlSegmentInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.PpmSegmentInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::AggieEnterpriseApi.GlideInputInputValueFormatter>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IDeptParentsResult>, global::AggieEnterpriseApi.State.DeptParentsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IDeptParentsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IDeptParentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IDeptParentsResult>, global::AggieEnterpriseApi.State.DeptParentsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IDeptParentsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IDeptParentsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IDeptParentsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.DeptParentsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IDeptParentsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.DeptParentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IFundParentsResult>, global::AggieEnterpriseApi.State.FundParentsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IFundParentsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IFundParentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IFundParentsResult>, global::AggieEnterpriseApi.State.FundParentsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IFundParentsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IFundParentsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IFundParentsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.FundParentsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IFundParentsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.FundParentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestResult>, global::AggieEnterpriseApi.State.GlJournalRequestResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IGlJournalRequestMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestResult>, global::AggieEnterpriseApi.State.GlJournalRequestBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IGlJournalRequestResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.GlJournalRequestMutation>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IGlJournalRequestMutation>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlJournalRequestMutation>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestStatusResult>, global::AggieEnterpriseApi.State.GlJournalRequestStatusResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlJournalRequestStatusResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IGlJournalRequestStatusQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestStatusResult>, global::AggieEnterpriseApi.State.GlJournalRequestStatusBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IGlJournalRequestStatusResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestStatusResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlJournalRequestStatusResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.GlJournalRequestStatusQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IGlJournalRequestStatusQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlJournalRequestStatusQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ICoaDetailsResult>, global::AggieEnterpriseApi.State.CoaDetailsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.ICoaDetailsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.ICoaDetailsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.ICoaDetailsResult>, global::AggieEnterpriseApi.State.CoaDetailsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.ICoaDetailsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.ICoaDetailsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.ICoaDetailsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.CoaDetailsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.ICoaDetailsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.CoaDetailsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>, global::AggieEnterpriseApi.State.PpmStringSegmentsValidateResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>, global::AggieEnterpriseApi.State.PpmStringSegmentsValidateBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmStringSegmentsValidateResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.PpmStringSegmentsValidateQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IPpmStringSegmentsValidateQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmStringSegmentsValidateQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmSegmentsValidateResult>, global::AggieEnterpriseApi.State.PpmSegmentsValidateResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IPpmSegmentsValidateResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IPpmSegmentsValidateQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmSegmentsValidateResult>, global::AggieEnterpriseApi.State.PpmSegmentsValidateBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IPpmSegmentsValidateResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmSegmentsValidateResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IPpmSegmentsValidateResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.PpmSegmentsValidateQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IPpmSegmentsValidateQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.PpmSegmentsValidateQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>, global::AggieEnterpriseApi.State.GlValidateChartSegmentsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>, global::AggieEnterpriseApi.State.GlValidateChartSegmentsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartSegmentsResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.GlValidateChartSegmentsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IGlValidateChartSegmentsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlValidateChartSegmentsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartstringResult>, global::AggieEnterpriseApi.State.GlValidateChartstringResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::AggieEnterpriseApi.IGlValidateChartstringResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.IGlValidateChartstringQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartstringResult>, global::AggieEnterpriseApi.State.GlValidateChartstringBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::AggieEnterpriseApi.IGlValidateChartstringResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartstringResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::AggieEnterpriseApi.IGlValidateChartstringResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.GlValidateChartstringQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IGlValidateChartstringQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.GlValidateChartstringQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::AggieEnterpriseApi.State.AggieEnterpriseClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.AggieEnterpriseClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::AggieEnterpriseApi.IAggieEnterpriseClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::AggieEnterpriseApi.AggieEnterpriseClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
